{
	"id": "9abd80aba9d49ccf0e6fe7352485cf32",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/SimpleSigner.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20; // Use a recent Solidity version\n\ncontract SimpleSigner {\n    // Mapping from address to their message\n    mapping(address => string) public messages;\n    // Count unique signers\n    uint64 public signerCount;\n    // Keep track of who has signed to correctly count unique signers\n    mapping(address => bool) private hasSigned;\n\n    event UserSignedIn(address indexed account, string message);\n\n\n    function signIn(string memory message) public {\n        address caller = msg.sender;\n\n        // Check if this is their first time signing in\n        if (!hasSigned[caller]) {\n            signerCount++;\n            hasSigned[caller] = true;\n        }\n\n        messages[caller] = message;\n\n        emit UserSignedIn(caller, message);\n    }\n\n    /// Get the message stored by a specific account.\n    // We can call the public mapping directly from Remix/ethers: messages(address)\n    function getMessage(address account) public view returns (string memory) {\n         return messages[account];\n    }\n\n     /// Get the total number of unique signers.\n     // You can call the public variable directly: signerCount()\n     // Adding explicit getter for clarity:\n     function getSignerCount() public view returns (uint64) {\n         return signerCount;\n     }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/SimpleSigner.sol": {
				"SimpleSigner": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "UserSignedIn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "getMessage",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSignerCount",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "messages",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "message",
									"type": "string"
								}
							],
							"name": "signIn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "signerCount",
							"outputs": [
								{
									"internalType": "uint64",
									"name": "",
									"type": "uint64"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"UserSignedIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSignerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"signIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"signerCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMessage(address)\":{\"notice\":\"Get the message stored by a specific account.\"},\"getSignerCount()\":{\"notice\":\"Get the total number of unique signers.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSigner.sol\":\"SimpleSigner\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleSigner.sol\":{\"keccak256\":\"0x6766acce49894be888726f2afdaa0086c2ca3da8297e1ccb56e284b94617905b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb64971066534d7afb71e2b87ead680b6df7f7f0923da38ac0eea9c96e44d3c\",\"dweb:/ipfs/QmULhoRvHWEQdyMrvP1PS8kxApmkDy8gKVTLfzfsryFPBd\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"getMessage(address)": {
								"notice": "Get the message stored by a specific account."
							},
							"getSignerCount()": {
								"notice": "Get the total number of unique signers."
							}
						},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 5,
								"contract": "contracts/SimpleSigner.sol:SimpleSigner",
								"label": "messages",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_string_storage)"
							},
							{
								"astId": 7,
								"contract": "contracts/SimpleSigner.sol:SimpleSigner",
								"label": "signerCount",
								"offset": 0,
								"slot": "1",
								"type": "t_uint64"
							},
							{
								"astId": 11,
								"contract": "contracts/SimpleSigner.sol:SimpleSigner",
								"label": "hasSigned",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_string_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => string)",
								"numberOfBytes": "32",
								"value": "t_string_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint64": {
								"encoding": "inplace",
								"label": "uint64",
								"numberOfBytes": "8"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 32/65584 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 6688\n// Code size = 20842 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20020]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20020] = a1\n    42: a1 = 0x20030\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20030\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 2 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x20024] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @43\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xffffffffffffffc0\n   454: u64 [sp + 0x38] = ra\n   457: u64 [sp + 0x30] = s0\n   460: u64 [sp + 0x28] = s1\n   463: s0 = sp + 0x40\n   466: sp = sp & 0xffffffffffffffe0\n   469: a0 = 0x40\n   472: a1 = 0x20\n   475: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   480: u8 [a0 + 31] = 0x80\n   485: u8 [a0 + 30] = 0\n   488: u8 [a0 + 29] = 0\n   491: u8 [a0 + 28] = 0\n   494: u8 [a0 + 27] = 0\n   497: u8 [a0 + 26] = 0\n   500: u8 [a0 + 25] = 0\n   503: u8 [a0 + 24] = 0\n   506: u8 [a0 + 23] = 0\n   509: u8 [a0 + 22] = 0\n   512: u8 [a0 + 21] = 0\n   515: u8 [a0 + 20] = 0\n   518: u8 [a0 + 19] = 0\n   521: u8 [a0 + 18] = 0\n   524: u8 [a0 + 17] = 0\n   527: u8 [a0 + 16] = 0\n   530: u8 [a0 + 15] = 0\n   533: u8 [a0 + 14] = 0\n   536: u8 [a0 + 13] = 0\n   539: u8 [a0 + 12] = 0\n   542: u8 [a0 + 11] = 0\n   545: u8 [a0 + 10] = 0\n   548: u8 [a0 + 9] = 0\n   551: u8 [a0 + 8] = 0\n   554: u8 [a0 + 7] = 0\n   557: u8 [a0 + 6] = 0\n   560: u8 [a0 + 5] = 0\n   563: u8 [a0 + 4] = 0\n   566: u8 [a0 + 3] = 0\n   569: u8 [a0 + 2] = 0\n   572: u8 [a0 + 1] = 0\n   575: u8 [a0 + 0] = 0\n   577: u64 [sp + 24] = 0\n   580: u64 [sp + 0] = 0\n   582: u64 [sp + 8] = 0\n   585: u64 [sp + 16] = 0\n   588: i32 a0 = sp + 0\n   590: ecalli 10 // 'value_transferred'\n   592: fallthrough\n      : @31 (gas: 8)\n   593: a0 = u64 [sp + 0x10]\n   596: a1 = u64 [sp + 0x18]\n   599: a2 = u64 [sp + 0x8]\n   602: a3 = u64 [sp]\n   604: a1 = a1 | a2\n   607: a0 = a0 | a3\n   610: a0 = a0 | a1\n   613: jump @35 if a0 != 0\n      : @32 (gas: 3)\n   617: a0 = 0x40\n   620: a1 = 0x20\n   623: ra = 10, jump @0\n      : @33 [@dyn 5] (gas: 100)\n   628: a1 = u8 [a0 + 0x11]\n   631: a2 = u8 [a0 + 0x10]\n   634: a3 = u8 [a0 + 0x12]\n   637: a4 = u8 [a0 + 0x13]\n   640: a1 = a1 << 0x8\n   643: a1 = a1 | a2\n   646: a3 = a3 << 0x10\n   649: a4 = a4 << 0x18\n   652: a3 = a3 | a4\n   655: a1 = a1 | a3\n   658: a2 = u8 [a0 + 0x15]\n   661: a3 = u8 [a0 + 0x14]\n   664: a4 = u8 [a0 + 0x16]\n   667: a5 = u8 [a0 + 0x17]\n   670: a2 = a2 << 0x8\n   673: a2 = a2 | a3\n   676: a4 = a4 << 0x10\n   679: a5 = a5 << 0x18\n   682: a4 = a4 | a5\n   685: a2 = a2 | a4\n   688: a2 = a2 << 0x20\n   691: t0 = a2 | a1\n   694: a2 = u8 [a0 + 0x1]\n   697: a3 = u8 [a0]\n   699: a4 = u8 [a0 + 0x2]\n   702: a5 = u8 [a0 + 0x3]\n   705: a2 = a2 << 0x8\n   708: a2 = a2 | a3\n   711: a4 = a4 << 0x10\n   714: a5 = a5 << 0x18\n   717: a4 = a4 | a5\n   720: a2 = a2 | a4\n   723: a3 = u8 [a0 + 0x5]\n   726: a4 = u8 [a0 + 0x4]\n   729: a5 = u8 [a0 + 0x6]\n   732: s1 = u8 [a0 + 0x7]\n   735: a3 = a3 << 0x8\n   738: a3 = a3 | a4\n   741: a5 = a5 << 0x10\n   744: s1 = s1 << 0x18\n   747: a5 = a5 | s1\n   750: a3 = a3 | a5\n   753: a3 = a3 << 0x20\n   756: a2 = a2 | a3\n   759: a3 = u8 [a0 + 0x19]\n   762: a4 = u8 [a0 + 0x18]\n   765: a5 = u8 [a0 + 0x1a]\n   768: s1 = u8 [a0 + 0x1b]\n   771: a3 = a3 << 0x8\n   774: a3 = a3 | a4\n   777: a5 = a5 << 0x10\n   780: s1 = s1 << 0x18\n   783: a5 = a5 | s1\n   786: a3 = a3 | a5\n   789: a4 = u8 [a0 + 0x1d]\n   792: a5 = u8 [a0 + 0x1c]\n   795: s1 = u8 [a0 + 0x1e]\n   798: a1 = u8 [a0 + 0x1f]\n   801: a4 = a4 << 0x8\n   804: a4 = a4 | a5\n   807: s1 = s1 << 0x10\n   810: a1 = a1 << 0x18\n   813: a1 = a1 | s1\n   816: a1 = a1 | a4\n   819: a1 = a1 << 0x20\n   822: a3 = a3 | a1\n   825: a1 = u8 [a0 + 0x9]\n   828: a4 = u8 [a0 + 0x8]\n   831: a5 = u8 [a0 + 0xa]\n   834: s1 = u8 [a0 + 0xb]\n   837: a1 = a1 << 0x8\n   840: a1 = a1 | a4\n   843: a5 = a5 << 0x10\n   846: s1 = s1 << 0x18\n   849: a5 = a5 | s1\n   852: a1 = a1 | a5\n   855: a4 = u8 [a0 + 0xd]\n   858: a5 = u8 [a0 + 0xc]\n   861: s1 = u8 [a0 + 0xe]\n   864: a0 = u8 [a0 + 0xf]\n   867: a4 = a4 << 0x8\n   870: a4 = a4 | a5\n   873: s1 = s1 << 0x10\n   876: a0 = a0 << 0x18\n   879: a0 = a0 | s1\n   882: a0 = a0 | a4\n   885: a0 = a0 << 0x20\n   888: a0 = a0 | a1\n   891: a0 = reverse a0\n   893: s1 = reverse a3\n   895: a1 = reverse a2\n   897: a2 = reverse t0\n   899: a1 = a1 | a2\n   902: a2 = s1 | a0\n   905: a2 = a2 | a1\n   908: a2 = a2 >> 0x20\n   911: a0 = a0 | a1\n   914: a0 = a0 << 0x20\n   917: a0 = a0 | a2\n   920: jump @37 if a0 == 0\n      : @34 (gas: 1)\n   923: trap\n      : @35 (gas: 3)\n   924: a0 = 0\n   926: a1 = 0\n   928: ra = 12, jump @0\n      : @36 [@dyn 6] (gas: 5)\n   933: i32 a1 = a0 + 0\n   935: a0 = 0x1\n   938: a2 = 0\n   940: ecalli 7 // 'seal_return'\n   942: fallthrough\n      : @37 (gas: 4)\n   943: i32 s1 = s1 + 0\n   945: a0 = s1\n   947: a1 = 0\n   949: ra = 14, jump @0\n      : @38 [@dyn 7] (gas: 5)\n   954: i32 a0 = a0 + 0\n   956: a1 = 0\n   958: a2 = 0\n   960: ecalli 0 // 'call_data_copy'\n   961: fallthrough\n      : @39 (gas: 2)\n   962: a1 = i32 [0x20028]\n   967: jump @41 if a1 == 0\n      : @40 (gas: 4)\n   970: a0 = 0x30030\n   975: i32 a0 = a0 + 0\n   977: ecalli 8 // 'set_immutable_data'\n   979: fallthrough\n      : @41 (gas: 3)\n   980: a0 = s1\n   982: a1 = 0\n   984: ra = 16, jump @0\n      : @42 [@dyn 8] (gas: 6)\n   989: i32 a1 = a0 + 0\n   991: a0 = 0\n   993: a2 = 0\n   995: ra = 0x12\n   998: ecalli 7 // 'seal_return'\n  1000: fallthrough\n      : @43 [@dyn 9] (gas: 8)\n  1001: sp = sp + 0xffffffffffffffc0\n  1004: u64 [sp + 0x38] = ra\n  1007: u64 [sp + 0x30] = s0\n  1010: s0 = sp + 0x40\n  1013: sp = sp & 0xffffffffffffffe0\n  1016: a0 = 0x40\n  1019: a1 = 0x20\n  1022: ra = 20, jump @0\n      : @44 [@dyn 10] (gas: 34)\n  1027: u8 [a0 + 31] = 0x80\n  1032: u8 [a0 + 30] = 0\n  1035: u8 [a0 + 29] = 0\n  1038: u8 [a0 + 28] = 0\n  1041: u8 [a0 + 27] = 0\n  1044: u8 [a0 + 26] = 0\n  1047: u8 [a0 + 25] = 0\n  1050: u8 [a0 + 24] = 0\n  1053: u8 [a0 + 23] = 0\n  1056: u8 [a0 + 22] = 0\n  1059: u8 [a0 + 21] = 0\n  1062: u8 [a0 + 20] = 0\n  1065: u8 [a0 + 19] = 0\n  1068: u8 [a0 + 18] = 0\n  1071: u8 [a0 + 17] = 0\n  1074: u8 [a0 + 16] = 0\n  1077: u8 [a0 + 15] = 0\n  1080: u8 [a0 + 14] = 0\n  1083: u8 [a0 + 13] = 0\n  1086: u8 [a0 + 12] = 0\n  1089: u8 [a0 + 11] = 0\n  1092: u8 [a0 + 10] = 0\n  1095: u8 [a0 + 9] = 0\n  1098: u8 [a0 + 8] = 0\n  1101: u8 [a0 + 7] = 0\n  1104: u8 [a0 + 3] = 0\n  1107: u8 [a0 + 2] = 0\n  1110: u8 [a0 + 1] = 0\n  1113: u8 [a0 + 0] = 0\n  1115: a1 = i32 [0x20024]\n  1120: u8 [a0 + 6] = 0\n  1123: u8 [a0 + 5] = 0\n  1126: u8 [a0 + 4] = 0\n  1129: jump @54 if a1 <u 4\n      : @45 (gas: 4)\n  1133: i32 a0 = sp + 0\n  1135: a1 = 0\n  1137: ecalli 1 // 'call_data_load'\n  1139: fallthrough\n      : @46 (gas: 2)\n  1140: a0 = i32 [sp + 0x1c]\n  1143: jump @51 if a0 <=s 1430556640\n      : @47 (gas: 1)\n  1150: jump @55 if a0 == 1430556641\n      : @48 (gas: 1)\n  1157: jump @55 if a0 == 1608342008\n      : @49 (gas: 1)\n  1164: jump @56 if a0 == 2091206854\n      : @50 (gas: 1)\n  1171: jump @54\n      : @51 (gas: 1)\n  1173: jump @56 if a0 == 3071655553\n      : @52 (gas: 1)\n  1180: jump @54 if a0 != 3378475658\n      : @53 (gas: 13)\n  1187: ra = 0x16\n  1190: sp = sp + 0xffffffffffffff40\n  1194: u64 [sp + 0xb8] = ra\n  1198: u64 [sp + 0xb0] = s0\n  1202: s0 = sp + 0xc0\n  1206: sp = sp & 0xffffffffffffffe0\n  1209: u64 [sp + 152] = 0\n  1213: u64 [sp + 144] = 0\n  1217: u64 [sp + 136] = 0\n  1221: u64 [sp + 128] = 0\n  1225: i32 a0 = sp + 0x80\n  1229: ecalli 10 // 'value_transferred'\n  1231: jump @221\n      : @54 [@dyn 11] (gas: 1)\n  1234: ra = 24, jump @155\n      : @55 [@dyn 12] (gas: 14)\n  1239: ra = 0x1a\n  1242: sp = sp + 0xfffffffffffffea0\n  1246: u64 [sp + 0x158] = ra\n  1250: u64 [sp + 0x150] = s0\n  1254: u64 [sp + 0x148] = s1\n  1258: s0 = sp + 0x160\n  1262: sp = sp & 0xffffffffffffffe0\n  1265: u64 [sp + 280] = 0\n  1269: u64 [sp + 272] = 0\n  1273: u64 [sp + 264] = 0\n  1277: u64 [sp + 256] = 0\n  1281: i32 a0 = sp + 0x100\n  1285: ecalli 10 // 'value_transferred'\n  1287: jump @73\n      : @56 [@dyn 13] (gas: 14)\n  1290: ra = 0x1c\n  1293: sp = sp + 0xffffffffffffff60\n  1297: u64 [sp + 0x98] = ra\n  1301: u64 [sp + 0x90] = s0\n  1305: u64 [sp + 0x88] = s1\n  1309: s0 = sp + 0xa0\n  1313: sp = sp & 0xffffffffffffffe0\n  1316: u64 [sp + 56] = 0\n  1319: u64 [sp + 48] = 0\n  1322: u64 [sp + 40] = 0\n  1325: u64 [sp + 32] = 0\n  1328: i32 a0 = sp + 0x20\n  1331: ecalli 10 // 'value_transferred'\n  1333: jump @145\n      : @57 [@dyn 14] (gas: 7)\n  1336: sp = sp + 0xfffffffffffffff0\n  1339: u64 [sp + 0x8] = ra\n  1342: u64 [sp] = s0\n  1344: s0 = a0\n  1346: a0 = 0x40\n  1349: a1 = 0x20\n  1352: ra = 30, jump @0\n      : @58 [@dyn 15] (gas: 100)\n  1357: a1 = u8 [a0 + 0x1]\n  1360: a2 = u8 [a0]\n  1362: a3 = u8 [a0 + 0x2]\n  1365: a4 = u8 [a0 + 0x3]\n  1368: a1 = a1 << 0x8\n  1371: a1 = a1 | a2\n  1374: a3 = a3 << 0x10\n  1377: a4 = a4 << 0x18\n  1380: a3 = a3 | a4\n  1383: a1 = a1 | a3\n  1386: a2 = u8 [a0 + 0x5]\n  1389: a3 = u8 [a0 + 0x4]\n  1392: a4 = u8 [a0 + 0x6]\n  1395: a5 = u8 [a0 + 0x7]\n  1398: a2 = a2 << 0x8\n  1401: a2 = a2 | a3\n  1404: a4 = a4 << 0x10\n  1407: a5 = a5 << 0x18\n  1410: a4 = a4 | a5\n  1413: a2 = a2 | a4\n  1416: a2 = a2 << 0x20\n  1419: t0 = a2 | a1\n  1422: a2 = u8 [a0 + 0x9]\n  1425: a3 = u8 [a0 + 0x8]\n  1428: a4 = u8 [a0 + 0xa]\n  1431: a5 = u8 [a0 + 0xb]\n  1434: a2 = a2 << 0x8\n  1437: a2 = a2 | a3\n  1440: a4 = a4 << 0x10\n  1443: a5 = a5 << 0x18\n  1446: a4 = a4 | a5\n  1449: a2 = a2 | a4\n  1452: a3 = u8 [a0 + 0xd]\n  1455: a4 = u8 [a0 + 0xc]\n  1458: a5 = u8 [a0 + 0xe]\n  1461: a1 = u8 [a0 + 0xf]\n  1464: a3 = a3 << 0x8\n  1467: a3 = a3 | a4\n  1470: a5 = a5 << 0x10\n  1473: a1 = a1 << 0x18\n  1476: a1 = a1 | a5\n  1479: a1 = a1 | a3\n  1482: a1 = a1 << 0x20\n  1485: t1 = a1 | a2\n  1488: a1 = u8 [a0 + 0x11]\n  1491: a3 = u8 [a0 + 0x10]\n  1494: a4 = u8 [a0 + 0x12]\n  1497: a5 = u8 [a0 + 0x13]\n  1500: a1 = a1 << 0x8\n  1503: a1 = a1 | a3\n  1506: a4 = a4 << 0x10\n  1509: a5 = a5 << 0x18\n  1512: a4 = a4 | a5\n  1515: a1 = a1 | a4\n  1518: a3 = u8 [a0 + 0x15]\n  1521: a4 = u8 [a0 + 0x14]\n  1524: a5 = u8 [a0 + 0x16]\n  1527: a2 = u8 [a0 + 0x17]\n  1530: a3 = a3 << 0x8\n  1533: a3 = a3 | a4\n  1536: a5 = a5 << 0x10\n  1539: a2 = a2 << 0x18\n  1542: a2 = a2 | a5\n  1545: a2 = a2 | a3\n  1548: a2 = a2 << 0x20\n  1551: a3 = a2 | a1\n  1554: a1 = u8 [a0 + 0x19]\n  1557: a2 = u8 [a0 + 0x18]\n  1560: a4 = u8 [a0 + 0x1a]\n  1563: a5 = u8 [a0 + 0x1b]\n  1566: a1 = a1 << 0x8\n  1569: a1 = a1 | a2\n  1572: a4 = a4 << 0x10\n  1575: a5 = a5 << 0x18\n  1578: a4 = a4 | a5\n  1581: a1 = a1 | a4\n  1584: a2 = u8 [a0 + 0x1d]\n  1587: a4 = u8 [a0 + 0x1c]\n  1590: a5 = u8 [a0 + 0x1e]\n  1593: a0 = u8 [a0 + 0x1f]\n  1596: a2 = a2 << 0x8\n  1599: a2 = a2 | a4\n  1602: a5 = a5 << 0x10\n  1605: a0 = a0 << 0x18\n  1608: a0 = a0 | a5\n  1611: a0 = a0 | a2\n  1614: a0 = a0 << 0x20\n  1617: a0 = a0 | a1\n  1620: a0 = reverse a0\n  1622: a1 = reverse a3\n  1624: a2 = reverse t1\n  1626: a3 = reverse t0\n  1628: u64 [s0 + 0x18] = a3\n  1631: u64 [s0 + 0x10] = a2\n  1634: u64 [s0 + 0x8] = a1\n  1637: u64 [s0] = a0\n  1639: ra = u64 [sp + 0x8]\n  1642: s0 = u64 [sp]\n  1644: sp = sp + 0x10\n  1647: ret\n      : @59 (gas: 16)\n  1649: sp = sp + 0xffffffffffffff88\n  1652: u64 [sp + 0x70] = ra\n  1655: u64 [sp + 0x68] = s0\n  1658: u64 [sp + 0x60] = s1\n  1661: a5 = u64 [a1 + 0x10]\n  1664: s1 = u64 [a1 + 0x18]\n  1667: a4 = u64 [a1 + 0x8]\n  1670: s0 = u64 [a1]\n  1672: a1 = a4 | s1\n  1675: a3 = s0 | a5\n  1678: a3 = a3 | a1\n  1681: a3 = a3 >> 0x20\n  1684: a1 = a1 | a5\n  1687: a1 = a1 << 0x20\n  1690: a1 = a1 | a3\n  1693: jump @72 if a1 != 0\n      : @60 (gas: 16)\n  1697: u64 [sp + 0x28] = s1\n  1700: u64 [sp + 0x30] = a5\n  1703: u64 [sp + 0x40] = a4\n  1706: u64 [sp] = a0\n  1708: a0 = u64 [a2 + 0x18]\n  1711: u64 [sp + 0x58] = a0\n  1714: s1 = u64 [a2 + 0x10]\n  1717: a0 = u64 [a2 + 0x8]\n  1720: u64 [sp + 0x50] = a0\n  1723: a0 = u64 [a2]\n  1725: u64 [sp + 0x48] = a0\n  1728: u64 [sp + 0x20] = s0\n  1731: i32 a0 = s0 + 0\n  1733: a1 = 0x20\n  1736: u64 [sp + 0x8] = a0\n  1739: ra = 32, jump @0\n      : @61 [@dyn 16] (gas: 12)\n  1744: t0 = u64 [sp + 0x48]\n  1747: a1 = t0 | s1\n  1750: a2 = u64 [sp + 0x58]\n  1753: a3 = u64 [sp + 0x50]\n  1756: a2 = a2 | a3\n  1759: a1 = a1 | a2\n  1762: a1 = a1 >> 0x20\n  1765: u64 [sp + 0x38] = s1\n  1768: a2 = a2 | s1\n  1771: a2 = a2 << 0x20\n  1774: a1 = a1 | a2\n  1777: jump @72 if a1 != 0\n      : @62 (gas: 93)\n  1781: a1 = u8 [a0 + 0x19]\n  1784: a2 = u8 [a0 + 0x18]\n  1787: a3 = u8 [a0 + 0x1a]\n  1790: a4 = u8 [a0 + 0x1b]\n  1793: a1 = a1 << 0x8\n  1796: a1 = a1 | a2\n  1799: a3 = a3 << 0x10\n  1802: a4 = a4 << 0x18\n  1805: a3 = a3 | a4\n  1808: a1 = a1 | a3\n  1811: a2 = u8 [a0 + 0x1d]\n  1814: a3 = u8 [a0 + 0x1c]\n  1817: a4 = u8 [a0 + 0x1e]\n  1820: a5 = u8 [a0 + 0x1f]\n  1823: a2 = a2 << 0x8\n  1826: a2 = a2 | a3\n  1829: a4 = a4 << 0x10\n  1832: a5 = a5 << 0x18\n  1835: a4 = a4 | a5\n  1838: a2 = a2 | a4\n  1841: a2 = a2 << 0x20\n  1844: a1 = a1 | a2\n  1847: u64 [sp + 0x18] = a1\n  1850: a1 = u8 [a0 + 0x11]\n  1853: a2 = u8 [a0 + 0x10]\n  1856: a3 = u8 [a0 + 0x12]\n  1859: a4 = u8 [a0 + 0x13]\n  1862: a1 = a1 << 0x8\n  1865: a1 = a1 | a2\n  1868: a3 = a3 << 0x10\n  1871: a4 = a4 << 0x18\n  1874: a3 = a3 | a4\n  1877: a1 = a1 | a3\n  1880: a2 = u8 [a0 + 0x15]\n  1883: a3 = u8 [a0 + 0x14]\n  1886: a4 = u8 [a0 + 0x16]\n  1889: a5 = u8 [a0 + 0x17]\n  1892: a2 = a2 << 0x8\n  1895: a2 = a2 | a3\n  1898: a4 = a4 << 0x10\n  1901: a5 = a5 << 0x18\n  1904: a4 = a4 | a5\n  1907: a2 = a2 | a4\n  1910: a2 = a2 << 0x20\n  1913: a1 = a1 | a2\n  1916: u64 [sp + 0x10] = a1\n  1919: a1 = u8 [a0 + 0x9]\n  1922: a2 = u8 [a0 + 0x8]\n  1925: a3 = u8 [a0 + 0xa]\n  1928: a4 = u8 [a0 + 0xb]\n  1931: a1 = a1 << 0x8\n  1934: a1 = a1 | a2\n  1937: a3 = a3 << 0x10\n  1940: a4 = a4 << 0x18\n  1943: a3 = a3 | a4\n  1946: a1 = a1 | a3\n  1949: a2 = u8 [a0 + 0xd]\n  1952: a3 = u8 [a0 + 0xc]\n  1955: a4 = u8 [a0 + 0xe]\n  1958: a5 = u8 [a0 + 0xf]\n  1961: a2 = a2 << 0x8\n  1964: a2 = a2 | a3\n  1967: a4 = a4 << 0x10\n  1970: a5 = a5 << 0x18\n  1973: a4 = a4 | a5\n  1976: a2 = a2 | a4\n  1979: a2 = a2 << 0x20\n  1982: s1 = a2 | a1\n  1985: a1 = u8 [a0 + 0x1]\n  1988: a2 = u8 [a0]\n  1990: a3 = u8 [a0 + 0x2]\n  1993: a4 = u8 [a0 + 0x3]\n  1996: a1 = a1 << 0x8\n  1999: a1 = a1 | a2\n  2002: a3 = a3 << 0x10\n  2005: a4 = a4 << 0x18\n  2008: a3 = a3 | a4\n  2011: a1 = a1 | a3\n  2014: a2 = u8 [a0 + 0x5]\n  2017: a3 = u8 [a0 + 0x4]\n  2020: a4 = u8 [a0 + 0x6]\n  2023: a0 = u8 [a0 + 0x7]\n  2026: a2 = a2 << 0x8\n  2029: a2 = a2 | a3\n  2032: a4 = a4 << 0x10\n  2035: a0 = a0 << 0x18\n  2038: a0 = a0 | a4\n  2041: a0 = a0 | a2\n  2044: a0 = a0 << 0x20\n  2047: s0 = a0 | a1\n  2050: i32 a0 = t0 + 0\n  2052: a1 = 0x20\n  2055: ra = 34, jump @0\n      : @63 [@dyn 17] (gas: 73)\n  2060: a4 = s1\n  2062: a2 = u64 [sp + 0x10]\n  2065: s1 = u64 [sp + 0x18]\n  2068: t0 = u64 [sp + 0x48]\n  2071: a1 = a4 >> 0x38\n  2074: u8 [a0 + 0xf] = a1\n  2077: a1 = a4 >> 0x30\n  2080: u8 [a0 + 0xe] = a1\n  2083: a1 = a4 >> 0x28\n  2086: u8 [a0 + 0xd] = a1\n  2089: a1 = a4 >> 0x20\n  2092: u8 [a0 + 0xc] = a1\n  2095: a1 = a4 >> 0x18\n  2098: u8 [a0 + 0xb] = a1\n  2101: a1 = a4 >> 0x10\n  2104: u8 [a0 + 0xa] = a1\n  2107: a1 = a4 >> 0x8\n  2110: u8 [a0 + 0x9] = a1\n  2113: a1 = s0 >> 0x38\n  2116: u8 [a0 + 0x7] = a1\n  2119: a1 = s0 >> 0x30\n  2122: u8 [a0 + 0x6] = a1\n  2125: a1 = s0 >> 0x28\n  2128: u8 [a0 + 0x5] = a1\n  2131: a1 = s0 >> 0x20\n  2134: u8 [a0 + 0x4] = a1\n  2137: a1 = s0 >> 0x18\n  2140: u8 [a0 + 0x3] = a1\n  2143: a1 = s0 >> 0x10\n  2146: u8 [a0 + 0x2] = a1\n  2149: a1 = s0 >> 0x8\n  2152: u8 [a0 + 0x1] = a1\n  2155: a1 = a2 >> 0x38\n  2158: u8 [a0 + 0x17] = a1\n  2161: a1 = a2 >> 0x30\n  2164: u8 [a0 + 0x16] = a1\n  2167: a1 = a2 >> 0x28\n  2170: u8 [a0 + 0x15] = a1\n  2173: a1 = a2 >> 0x20\n  2176: u8 [a0 + 0x14] = a1\n  2179: a1 = a2 >> 0x18\n  2182: u8 [a0 + 0x13] = a1\n  2185: a1 = a2 >> 0x10\n  2188: u8 [a0 + 0x12] = a1\n  2191: a1 = a2 >> 0x8\n  2194: u8 [a0 + 0x11] = a1\n  2197: a1 = s1 >> 0x38\n  2200: u8 [a0 + 0x1f] = a1\n  2203: a1 = s1 >> 0x30\n  2206: u8 [a0 + 0x1e] = a1\n  2209: a1 = s1 >> 0x28\n  2212: u8 [a0 + 0x1d] = a1\n  2215: a1 = s1 >> 0x20\n  2218: u8 [a0 + 0x1c] = a1\n  2221: a1 = s1 >> 0x18\n  2224: u8 [a0 + 0x1b] = a1\n  2227: a1 = s1 >> 0x10\n  2230: u8 [a0 + 0x1a] = a1\n  2233: a1 = s1 >> 0x8\n  2236: u8 [a0 + 0x19] = a1\n  2239: ra = u64 [sp + 0x58]\n  2242: t2 = u64 [sp + 0x38]\n  2245: t1 = t2 | ra\n  2248: a1 = 0xffffffe0\n  2258: a3 = t0 <u a1\n  2261: a5 = u64 [sp + 0x50]\n  2264: a3 = 0 if a5 != 0\n  2266: a3 = 0 if t1 != 0\n  2268: u8 [a0 + 0x10] = a2\n  2271: u8 [a0 + 0x8] = a4\n  2274: u8 [a0] = s0\n  2276: u8 [a0 + 0x18] = s1\n  2279: jump @72 if a3 == 0\n      : @64 (gas: 9)\n  2283: a0 = u64 [sp + 0x30]\n  2286: a3 = u64 [sp + 0x28]\n  2289: a0 = a0 | a3\n  2292: a3 = u64 [sp + 0x20]\n  2295: a1 = a3 <u a1\n  2298: a3 = u64 [sp + 0x40]\n  2301: a1 = 0 if a3 != 0\n  2303: a1 = 0 if a0 != 0\n  2305: jump @72 if a1 == 0\n      : @65 (gas: 15)\n  2309: a1 = reverse s0\n  2311: a3 = reverse a4\n  2313: a4 = reverse a2\n  2315: s0 = reverse s1\n  2317: a0 = s0 | a3\n  2320: u64 [sp + 0x30] = a1\n  2323: u64 [sp + 0x20] = a4\n  2326: a1 = a1 | a4\n  2329: a0 = a0 | a1\n  2332: a0 = a0 >> 0x20\n  2335: u64 [sp + 0x28] = a3\n  2338: a1 = a1 | a3\n  2341: a1 = a1 << 0x20\n  2344: a0 = a0 | a1\n  2347: jump @72 if a0 != 0\n      : @66 (gas: 19)\n  2351: a3 = t0 + 0x20\n  2354: u64 [sp + 0x40] = a3\n  2357: a0 = a3 <u t0\n  2360: a1 = a5 + a0\n  2363: u64 [sp + 0x48] = a1\n  2366: a1 = a1 <u a5\n  2369: a1 = a0 if a0 == 0\n  2372: a1 = a1 + t2\n  2375: u64 [sp + 0x50] = a1\n  2378: a0 = a1 <u t2\n  2381: a0 = a0 + ra\n  2384: u64 [sp + 0x58] = a0\n  2387: i32 a0 = a3 + 0\n  2389: a1 = u64 [sp + 0x8]\n  2392: i32 a1 = a1 + 0x20\n  2395: u64 [sp + 0x38] = a1\n  2398: i32 s1 = s0 + 0\n  2400: a1 = s1\n  2402: ra = 36, jump @0\n      : @67 [@dyn 18] (gas: 5)\n  2407: u64 [sp + 0x18] = a0\n  2410: a0 = u64 [sp + 0x38]\n  2413: a1 = s1\n  2415: s1 = s0\n  2417: ra = 38, jump @0\n      : @68 [@dyn 19] (gas: 4)\n  2422: a1 = a0\n  2424: a0 = u64 [sp + 0x18]\n  2427: a2 = s0\n  2429: ra = 40, jump @8\n      : @69 [@dyn 20] (gas: 29)\n  2434: a0 = u64 [sp + 0x40]\n  2437: a0 = a0 + s0\n  2440: a1 = a0 <u s0\n  2443: a4 = u64 [sp + 0x20]\n  2446: a2 = u64 [sp + 0x48]\n  2449: a2 = a2 + a4\n  2452: a2 = a2 + a1\n  2455: a3 = a2 ^ a4\n  2458: a4 = a2 <u a4\n  2461: a4 = a1 if a3 == 0\n  2464: a5 = u64 [sp + 0x28]\n  2467: a1 = u64 [sp + 0x50]\n  2470: a1 = a1 + a5\n  2473: a4 = a4 + a1\n  2476: a3 = a4 <u a1\n  2479: a1 = a1 <u a5\n  2482: a5 = u64 [sp + 0x30]\n  2485: s0 = u64 [sp + 0x58]\n  2488: a5 = a5 + s0\n  2491: a1 = a1 + a5\n  2494: a1 = a1 + a3\n  2497: a3 = a0 | a4\n  2500: a1 = a1 | a2\n  2503: a3 = a3 | a1\n  2506: a3 = a3 >> 0x20\n  2509: a1 = a1 | a4\n  2512: a1 = a1 << 0x20\n  2515: a1 = a1 | a3\n  2518: jump @72 if a1 != 0\n      : @70 (gas: 3)\n  2522: i32 a0 = a0 + 0\n  2524: a1 = 0x20\n  2527: ra = 42, jump @0\n      : @71 [@dyn 21] (gas: 56)\n  2532: u8 [a0 + 31] = 0\n  2535: u8 [a0 + 30] = 0\n  2538: u8 [a0 + 29] = 0\n  2541: u8 [a0 + 28] = 0\n  2544: u8 [a0 + 27] = 0\n  2547: u8 [a0 + 26] = 0\n  2550: u8 [a0 + 25] = 0\n  2553: u8 [a0 + 24] = 0\n  2556: u8 [a0 + 23] = 0\n  2559: u8 [a0 + 22] = 0\n  2562: u8 [a0 + 21] = 0\n  2565: u8 [a0 + 20] = 0\n  2568: u8 [a0 + 19] = 0\n  2571: u8 [a0 + 18] = 0\n  2574: u8 [a0 + 17] = 0\n  2577: u8 [a0 + 16] = 0\n  2580: u8 [a0 + 15] = 0\n  2583: u8 [a0 + 14] = 0\n  2586: u8 [a0 + 13] = 0\n  2589: u8 [a0 + 12] = 0\n  2592: u8 [a0 + 11] = 0\n  2595: u8 [a0 + 10] = 0\n  2598: u8 [a0 + 9] = 0\n  2601: u8 [a0 + 8] = 0\n  2604: u8 [a0 + 7] = 0\n  2607: u8 [a0 + 6] = 0\n  2610: u8 [a0 + 5] = 0\n  2613: u8 [a0 + 4] = 0\n  2616: u8 [a0 + 3] = 0\n  2619: u8 [a0 + 2] = 0\n  2622: u8 [a0 + 1] = 0\n  2625: u8 [a0 + 0] = 0\n  2627: a0 = s1 + 0x1f\n  2630: a1 = 0x1ffffffe0\n  2640: a0 = a0 & a1\n  2643: a1 = u64 [sp + 0x40]\n  2646: a1 = a1 + a0\n  2649: a0 = a1 <u a0\n  2652: a2 = u64 [sp + 0x48]\n  2655: a2 = a2 + a0\n  2658: a0 = 0 if a2 != 0\n  2660: a3 = u64 [sp + 0x50]\n  2663: a0 = a0 + a3\n  2666: a3 = a0 <u a3\n  2669: a4 = u64 [sp + 0x58]\n  2672: a3 = a3 + a4\n  2675: a4 = u64 [sp]\n  2677: u64 [a4] = a1\n  2679: u64 [a4 + 0x8] = a2\n  2682: u64 [a4 + 0x10] = a0\n  2685: u64 [a4 + 0x18] = a3\n  2688: ra = u64 [sp + 0x70]\n  2691: s0 = u64 [sp + 0x68]\n  2694: s1 = u64 [sp + 0x60]\n  2697: sp = sp + 0x78\n  2700: ret\n      : @72 (gas: 1)\n  2702: trap\n      : @73 (gas: 8)\n  2703: a0 = u64 [sp + 0x110]\n  2707: a1 = u64 [sp + 0x118]\n  2711: a2 = u64 [sp + 0x108]\n  2715: a3 = u64 [sp + 0x100]\n  2719: a1 = a1 | a2\n  2722: a0 = a0 | a3\n  2725: a0 = a0 | a1\n  2728: jump @87 if a0 != 0\n      : @74 (gas: 2)\n  2732: a0 = i32 [0x20024]\n  2737: jump @87 if a0 <=u 35\n      : @75 (gas: 4)\n  2742: i32 a0 = sp + 0x120\n  2746: a1 = 0x4\n  2749: ecalli 1 // 'call_data_load'\n  2751: fallthrough\n      : @76 (gas: 11)\n  2752: a1 = u64 [sp + 0x130]\n  2756: s1 = u64 [sp + 0x138]\n  2760: a0 = 0x100000000\n  2770: a0 = a0 ^ a1\n  2773: a0 = a0 | s1\n  2776: u64 [sp + 0x58] = a1\n  2779: a1 = a1 >> 0x20\n  2782: a1 = a1 <u 0x1\n  2785: a1 = 0 if s1 != 0\n  2787: a1 = 0 if a0 == 0\n  2789: jump @88 if a1 == 0\n      : @77 (gas: 7)\n  2793: a0 = u64 [sp + 0x128]\n  2797: u64 [sp + 0x48] = a0\n  2800: a0 = u64 [sp + 0x120]\n  2804: u64 [sp + 0x50] = a0\n  2807: a1 = 0x20\n  2810: a0 = 0\n  2812: ra = 44, jump @0\n      : @78 [@dyn 22] (gas: 70)\n  2817: a1 = reverse s1\n  2819: a2 = u64 [sp + 0x58]\n  2822: a2 = reverse a2\n  2824: a3 = u64 [sp + 0x48]\n  2827: a3 = reverse a3\n  2829: a4 = u64 [sp + 0x50]\n  2832: a4 = reverse a4\n  2834: a5 = a4 >> 0x38\n  2837: u8 [a0 + 0x1f] = a5\n  2840: a5 = a4 >> 0x30\n  2843: u8 [a0 + 0x1e] = a5\n  2846: a5 = a4 >> 0x28\n  2849: u8 [a0 + 0x1d] = a5\n  2852: a5 = a4 >> 0x20\n  2855: u8 [a0 + 0x1c] = a5\n  2858: a5 = a4 >> 0x18\n  2861: u8 [a0 + 0x1b] = a5\n  2864: a5 = a4 >> 0x10\n  2867: u8 [a0 + 0x1a] = a5\n  2870: a5 = a4 >> 0x8\n  2873: u8 [a0 + 0x19] = a5\n  2876: u8 [a0 + 0x18] = a4\n  2879: a4 = a3 >> 0x38\n  2882: u8 [a0 + 0x17] = a4\n  2885: a4 = a3 >> 0x30\n  2888: u8 [a0 + 0x16] = a4\n  2891: a4 = a3 >> 0x28\n  2894: u8 [a0 + 0x15] = a4\n  2897: a4 = a3 >> 0x20\n  2900: u8 [a0 + 0x14] = a4\n  2903: a4 = a3 >> 0x18\n  2906: u8 [a0 + 0x13] = a4\n  2909: a4 = a3 >> 0x10\n  2912: u8 [a0 + 0x12] = a4\n  2915: a4 = a3 >> 0x8\n  2918: u8 [a0 + 0x11] = a4\n  2921: u8 [a0 + 0x10] = a3\n  2924: u8 [a0 + 0x8] = a2\n  2927: a3 = a2 >> 0x38\n  2930: u8 [a0 + 0xf] = a3\n  2933: a3 = a2 >> 0x30\n  2936: u8 [a0 + 0xe] = a3\n  2939: a3 = a2 >> 0x28\n  2942: u8 [a0 + 0xd] = a3\n  2945: a3 = a2 >> 0x20\n  2948: u8 [a0 + 0xc] = a3\n  2951: a3 = a2 >> 0x18\n  2954: u8 [a0 + 0xb] = a3\n  2957: a3 = a2 >> 0x10\n  2960: u8 [a0 + 0xa] = a3\n  2963: a2 = a2 >> 0x8\n  2966: u8 [a0 + 0x9] = a2\n  2969: u8 [a0] = a1\n  2971: a2 = a1 >> 0x38\n  2974: u8 [a0 + 0x7] = a2\n  2977: a2 = a1 >> 0x30\n  2980: u8 [a0 + 0x6] = a2\n  2983: a2 = a1 >> 0x28\n  2986: u8 [a0 + 0x5] = a2\n  2989: a2 = a1 >> 0x20\n  2992: u8 [a0 + 0x4] = a2\n  2995: a2 = a1 >> 0x18\n  2998: u8 [a0 + 0x3] = a2\n  3001: a2 = a1 >> 0x10\n  3004: u8 [a0 + 0x2] = a2\n  3007: a1 = a1 >> 0x8\n  3010: u8 [a0 + 0x1] = a1\n  3013: a0 = 0x20\n  3016: a1 = 0x20\n  3019: ra = 46, jump @0\n      : @79 [@dyn 23] (gas: 35)\n  3024: u8 [a0 + 31] = 0\n  3027: u8 [a0 + 30] = 0\n  3030: u8 [a0 + 29] = 0\n  3033: u8 [a0 + 28] = 0\n  3036: u8 [a0 + 27] = 0\n  3039: u8 [a0 + 26] = 0\n  3042: u8 [a0 + 25] = 0\n  3045: u8 [a0 + 24] = 0\n  3048: u8 [a0 + 23] = 0\n  3051: u8 [a0 + 22] = 0\n  3054: u8 [a0 + 21] = 0\n  3057: u8 [a0 + 20] = 0\n  3060: u8 [a0 + 19] = 0\n  3063: u8 [a0 + 18] = 0\n  3066: u8 [a0 + 17] = 0\n  3069: u8 [a0 + 16] = 0\n  3072: u8 [a0 + 15] = 0\n  3075: u8 [a0 + 14] = 0\n  3078: u8 [a0 + 13] = 0\n  3081: u8 [a0 + 12] = 0\n  3084: u8 [a0 + 11] = 0\n  3087: u8 [a0 + 10] = 0\n  3090: u8 [a0 + 9] = 0\n  3093: u8 [a0 + 8] = 0\n  3096: u8 [a0 + 7] = 0\n  3099: u8 [a0 + 6] = 0\n  3102: u8 [a0 + 5] = 0\n  3105: u8 [a0 + 4] = 0\n  3108: u8 [a0 + 3] = 0\n  3111: u8 [a0 + 2] = 0\n  3114: u8 [a0 + 1] = 0\n  3117: u8 [a0 + 0] = 0\n  3119: a1 = 0x40\n  3122: a0 = 0\n  3124: ra = 48, jump @0\n      : @80 [@dyn 24] (gas: 19)\n  3129: i32 a0 = a0 + 0\n  3131: i32 a2 = sp + 0x120\n  3135: a1 = 0x40\n  3138: ecalli 6 // 'hash_keccak_256'\n  3140: a0 = u64 [sp + 0x138]\n  3144: a1 = u64 [sp + 0x130]\n  3148: a2 = u64 [sp + 0x128]\n  3152: a3 = u64 [sp + 0x120]\n  3156: a4 = reverse a0\n  3158: a0 = reverse a1\n  3160: a1 = reverse a2\n  3162: a2 = reverse a3\n  3164: u64 [sp + 0xd8] = a2\n  3168: u64 [sp + 0xd0] = a1\n  3172: u64 [sp + 0xc8] = a0\n  3176: a0 = sp + 0xe0\n  3180: a1 = sp + 0xc0\n  3184: u64 [sp + 0xc0] = a4\n  3188: ra = 50, jump @123\n      : @81 [@dyn 25] (gas: 11)\n  3193: a0 = u64 [sp + 0xf8]\n  3197: u64 [sp + 0x40] = a0\n  3200: a0 = u64 [sp + 0xf0]\n  3204: u64 [sp + 0x48] = a0\n  3207: a0 = u64 [sp + 0xe8]\n  3211: u64 [sp + 0x50] = a0\n  3214: a0 = u64 [sp + 0xe0]\n  3218: u64 [sp + 0x58] = a0\n  3221: a0 = 0x40\n  3224: a1 = 0x20\n  3227: ra = 52, jump @0\n      : @82 [@dyn 26] (gas: 100)\n  3232: a1 = u8 [a0 + 0x11]\n  3235: a2 = u8 [a0 + 0x10]\n  3238: a3 = u8 [a0 + 0x12]\n  3241: a4 = u8 [a0 + 0x13]\n  3244: a1 = a1 << 0x8\n  3247: a1 = a1 | a2\n  3250: a3 = a3 << 0x10\n  3253: a4 = a4 << 0x18\n  3256: a3 = a3 | a4\n  3259: a1 = a1 | a3\n  3262: a2 = u8 [a0 + 0x15]\n  3265: a3 = u8 [a0 + 0x14]\n  3268: a4 = u8 [a0 + 0x16]\n  3271: a5 = u8 [a0 + 0x17]\n  3274: a2 = a2 << 0x8\n  3277: a2 = a2 | a3\n  3280: a4 = a4 << 0x10\n  3283: a5 = a5 << 0x18\n  3286: a4 = a4 | a5\n  3289: a2 = a2 | a4\n  3292: a2 = a2 << 0x20\n  3295: t0 = a2 | a1\n  3298: a2 = u8 [a0 + 0x1]\n  3301: a3 = u8 [a0]\n  3303: a4 = u8 [a0 + 0x2]\n  3306: a5 = u8 [a0 + 0x3]\n  3309: a2 = a2 << 0x8\n  3312: a2 = a2 | a3\n  3315: a4 = a4 << 0x10\n  3318: a5 = a5 << 0x18\n  3321: a4 = a4 | a5\n  3324: a2 = a2 | a4\n  3327: a3 = u8 [a0 + 0x5]\n  3330: a4 = u8 [a0 + 0x4]\n  3333: a5 = u8 [a0 + 0x6]\n  3336: s1 = u8 [a0 + 0x7]\n  3339: a3 = a3 << 0x8\n  3342: a3 = a3 | a4\n  3345: a5 = a5 << 0x10\n  3348: s1 = s1 << 0x18\n  3351: a5 = a5 | s1\n  3354: a3 = a3 | a5\n  3357: a3 = a3 << 0x20\n  3360: a2 = a2 | a3\n  3363: a3 = u8 [a0 + 0x19]\n  3366: a4 = u8 [a0 + 0x18]\n  3369: a5 = u8 [a0 + 0x1a]\n  3372: s1 = u8 [a0 + 0x1b]\n  3375: a3 = a3 << 0x8\n  3378: a3 = a3 | a4\n  3381: a5 = a5 << 0x10\n  3384: s1 = s1 << 0x18\n  3387: a5 = a5 | s1\n  3390: a3 = a3 | a5\n  3393: a4 = u8 [a0 + 0x1d]\n  3396: a5 = u8 [a0 + 0x1c]\n  3399: s1 = u8 [a0 + 0x1e]\n  3402: a1 = u8 [a0 + 0x1f]\n  3405: a4 = a4 << 0x8\n  3408: a4 = a4 | a5\n  3411: s1 = s1 << 0x10\n  3414: a1 = a1 << 0x18\n  3417: a1 = a1 | s1\n  3420: a1 = a1 | a4\n  3423: a1 = a1 << 0x20\n  3426: a3 = a3 | a1\n  3429: a1 = u8 [a0 + 0x9]\n  3432: a4 = u8 [a0 + 0x8]\n  3435: a5 = u8 [a0 + 0xa]\n  3438: s1 = u8 [a0 + 0xb]\n  3441: a1 = a1 << 0x8\n  3444: a1 = a1 | a4\n  3447: a5 = a5 << 0x10\n  3450: s1 = s1 << 0x18\n  3453: a5 = a5 | s1\n  3456: a1 = a1 | a5\n  3459: a4 = u8 [a0 + 0xd]\n  3462: a5 = u8 [a0 + 0xc]\n  3465: s1 = u8 [a0 + 0xe]\n  3468: a0 = u8 [a0 + 0xf]\n  3471: a4 = a4 << 0x8\n  3474: a4 = a4 | a5\n  3477: s1 = s1 << 0x10\n  3480: a0 = a0 << 0x18\n  3483: a0 = a0 | s1\n  3486: a0 = a0 | a4\n  3489: a0 = a0 << 0x20\n  3492: a0 = a0 | a1\n  3495: s1 = reverse a0\n  3497: a3 = reverse a3\n  3499: a4 = reverse a2\n  3501: a2 = reverse t0\n  3503: a0 = a2 | a4\n  3506: a1 = a3 | s1\n  3509: a1 = a1 | a0\n  3512: a1 = a1 >> 0x20\n  3515: a0 = a0 | s1\n  3518: a0 = a0 << 0x20\n  3521: a0 = a0 | a1\n  3524: jump @86 if a0 != 0\n      : @83 (gas: 19)\n  3528: a0 = a3 + 0x20\n  3531: u64 [sp + 0x18] = a0\n  3534: a0 = a0 <u a3\n  3537: a1 = a2 + a0\n  3540: u64 [sp + 0x8] = a1\n  3543: a1 = a1 <u a2\n  3546: a1 = a0 if a0 == 0\n  3549: a1 = a1 + s1\n  3552: u64 [sp + 0x10] = a1\n  3555: a0 = a1 <u s1\n  3558: a0 = a0 + a4\n  3561: u64 [sp + 0x20] = a0\n  3564: i32 a0 = a3 + 0\n  3566: a1 = 0x20\n  3569: u64 [sp] = a0\n  3571: u64 [sp + 0x30] = a3\n  3574: u64 [sp + 0x28] = a2\n  3577: u64 [sp + 0x38] = a4\n  3580: ra = 54, jump @0\n      : @84 [@dyn 27] (gas: 52)\n  3585: u8 [a0 + 31] = 0x20\n  3589: u8 [a0 + 30] = 0\n  3592: u8 [a0 + 29] = 0\n  3595: u8 [a0 + 28] = 0\n  3598: u8 [a0 + 27] = 0\n  3601: u8 [a0 + 26] = 0\n  3604: u8 [a0 + 25] = 0\n  3607: u8 [a0 + 24] = 0\n  3610: u8 [a0 + 23] = 0\n  3613: u8 [a0 + 22] = 0\n  3616: u8 [a0 + 21] = 0\n  3619: u8 [a0 + 20] = 0\n  3622: u8 [a0 + 19] = 0\n  3625: u8 [a0 + 18] = 0\n  3628: u8 [a0 + 17] = 0\n  3631: u8 [a0 + 16] = 0\n  3634: u8 [a0 + 15] = 0\n  3637: u8 [a0 + 14] = 0\n  3640: u8 [a0 + 13] = 0\n  3643: u8 [a0 + 12] = 0\n  3646: u8 [a0 + 11] = 0\n  3649: u8 [a0 + 10] = 0\n  3652: u8 [a0 + 9] = 0\n  3655: u8 [a0 + 8] = 0\n  3658: u8 [a0 + 7] = 0\n  3661: u8 [a0 + 6] = 0\n  3664: u8 [a0 + 5] = 0\n  3667: u8 [a0 + 4] = 0\n  3670: u8 [a0 + 3] = 0\n  3673: u8 [a0 + 2] = 0\n  3676: u8 [a0 + 1] = 0\n  3679: u8 [a0 + 0] = 0\n  3681: a0 = u64 [sp + 0x8]\n  3684: u64 [sp + 0x68] = a0\n  3687: a0 = u64 [sp + 0x18]\n  3690: u64 [sp + 0x60] = a0\n  3693: a0 = u64 [sp + 0x40]\n  3696: u64 [sp + 0x98] = a0\n  3700: a0 = u64 [sp + 0x48]\n  3703: u64 [sp + 0x90] = a0\n  3707: a0 = u64 [sp + 0x50]\n  3710: u64 [sp + 0x88] = a0\n  3714: a0 = u64 [sp + 0x58]\n  3717: u64 [sp + 0x80] = a0\n  3721: a0 = u64 [sp + 0x10]\n  3724: u64 [sp + 0x70] = a0\n  3727: a0 = sp + 0xa0\n  3731: a1 = sp + 0x80\n  3735: a2 = sp + 0x60\n  3738: a3 = u64 [sp + 0x20]\n  3741: u64 [sp + 0x78] = a3\n  3744: ra = 56, jump @59\n      : @85 [@dyn 28] (gas: 30)\n  3749: a0 = u64 [sp + 0xa8]\n  3753: t0 = u64 [sp + 0xb8]\n  3757: t1 = u64 [sp + 0xa0]\n  3761: a3 = u64 [sp + 0xb0]\n  3765: a1 = u64 [sp + 0x28]\n  3768: a4 = a0 ^ a1\n  3771: a5 = a0 <u a1\n  3774: t2 = a1\n  3776: a2 = u64 [sp + 0x30]\n  3779: a1 = t1 <u a2\n  3782: a5 = a1 if a4 == 0\n  3785: a4 = a3 - s1\n  3788: a3 = a3 <u s1\n  3791: s1 = u64 [sp + 0x38]\n  3794: s1 = t0 - s1\n  3797: s1 = s1 - a3\n  3800: a3 = a4 <u a5\n  3803: s1 = s1 - a3\n  3806: a4 = a4 - a5\n  3809: a0 = a0 - t2\n  3812: a1 = a0 - a1\n  3815: a0 = t1 - a2\n  3818: a1 = a1 | s1\n  3821: a2 = a0 | a4\n  3824: a2 = a2 | a1\n  3827: a1 = a1 | a4\n  3830: a2 = a2 >> 0x20\n  3833: a1 = a1 << 0x20\n  3836: a1 = a1 | a2\n  3839: jump @90 if a1 == 0\n      : @86 (gas: 1)\n  3842: trap\n      : @87 (gas: 4)\n  3843: a0 = 0\n  3845: a1 = 0\n  3847: ra = 0x3a\n  3850: jump @0\n      : @88 (gas: 2)\n  3853: a0 = 0\n  3855: ra = 58, jump @0\n      : @89 [@dyn 29] (gas: 5)\n  3860: i32 a1 = a0 + 0\n  3862: a0 = 0x1\n  3865: a2 = 0\n  3867: ecalli 7 // 'seal_return'\n  3869: fallthrough\n      : @90 (gas: 4)\n  3870: i32 s1 = a0 + 0\n  3872: a0 = u64 [sp]\n  3874: a1 = s1\n  3876: ra = 60, jump @0\n      : @91 [@dyn 30] (gas: 6)\n  3881: i32 a1 = a0 + 0\n  3883: a0 = 0\n  3885: a2 = s1\n  3887: ra = 0x3e\n  3890: ecalli 7 // 'seal_return'\n  3892: fallthrough\n      : @92 [@dyn 31] (gas: 9)\n  3893: a2 = u64 [a1 + 0x18]\n  3896: a3 = u64 [a1 + 0x10]\n  3899: a4 = u64 [a1 + 0x8]\n  3902: a1 = u64 [a1]\n  3904: u64 [a0 + 0x18] = a2\n  3907: u64 [a0 + 0x10] = a3\n  3910: u64 [a0 + 0x8] = a4\n  3913: u64 [a0] = a1\n  3915: ret\n      : @93 (gas: 20)\n  3917: sp = sp + 0xffffffffffffffb0\n  3920: u64 [sp + 0x48] = ra\n  3923: u64 [sp + 0x40] = s0\n  3926: u64 [sp + 0x38] = s1\n  3929: a4 = u64 [a1 + 0x10]\n  3932: a3 = u64 [a1 + 0x18]\n  3935: a5 = u64 [a1 + 0x8]\n  3938: s0 = u64 [a1]\n  3940: u64 [sp + 0x28] = a3\n  3943: u64 [sp + 0x20] = a5\n  3946: a1 = a5 | a3\n  3949: a3 = s0 | a4\n  3952: a3 = a3 | a1\n  3955: a3 = a3 >> 0x20\n  3958: u64 [sp + 0x30] = a4\n  3961: a1 = a1 | a4\n  3964: a1 = a1 << 0x20\n  3967: a1 = a1 | a3\n  3970: u64 [sp + 0x18] = a0\n  3973: jump @96 if a1 != 0\n      : @94 (gas: 10)\n  3977: a0 = u64 [a2 + 0x18]\n  3980: u64 [sp] = a0\n  3982: s1 = u64 [a2 + 0x10]\n  3985: a0 = u64 [a2 + 0x8]\n  3988: u64 [sp + 0x8] = a0\n  3991: a0 = u64 [a2]\n  3993: u64 [sp + 0x10] = a0\n  3996: i32 a0 = s0 + 0\n  3998: a1 = 0x20\n  4001: ra = 64, jump @0\n      : @95 [@dyn 32] (gas: 88)\n  4006: a1 = u64 [sp]\n  4008: a1 = reverse a1\n  4010: a2 = reverse s1\n  4012: a3 = u64 [sp + 0x8]\n  4015: a3 = reverse a3\n  4017: a4 = u64 [sp + 0x10]\n  4020: a4 = reverse a4\n  4022: a5 = a4 >> 0x38\n  4025: u8 [a0 + 0x1f] = a5\n  4028: a5 = a4 >> 0x30\n  4031: u8 [a0 + 0x1e] = a5\n  4034: a5 = a4 >> 0x28\n  4037: u8 [a0 + 0x1d] = a5\n  4040: a5 = a4 >> 0x20\n  4043: u8 [a0 + 0x1c] = a5\n  4046: a5 = a4 >> 0x18\n  4049: u8 [a0 + 0x1b] = a5\n  4052: a5 = a4 >> 0x10\n  4055: u8 [a0 + 0x1a] = a5\n  4058: a5 = a4 >> 0x8\n  4061: u8 [a0 + 0x19] = a5\n  4064: u8 [a0 + 0x18] = a4\n  4067: u8 [a0 + 0x10] = a3\n  4070: a4 = a3 >> 0x38\n  4073: u8 [a0 + 0x17] = a4\n  4076: a4 = a3 >> 0x30\n  4079: u8 [a0 + 0x16] = a4\n  4082: a4 = a3 >> 0x28\n  4085: u8 [a0 + 0x15] = a4\n  4088: a4 = a3 >> 0x20\n  4091: u8 [a0 + 0x14] = a4\n  4094: a4 = a3 >> 0x18\n  4097: u8 [a0 + 0x13] = a4\n  4100: a4 = a3 >> 0x10\n  4103: u8 [a0 + 0x12] = a4\n  4106: a3 = a3 >> 0x8\n  4109: u8 [a0 + 0x11] = a3\n  4112: u8 [a0 + 0x8] = a2\n  4115: a3 = a2 >> 0x38\n  4118: u8 [a0 + 0xf] = a3\n  4121: a3 = a2 >> 0x30\n  4124: u8 [a0 + 0xe] = a3\n  4127: a3 = a2 >> 0x28\n  4130: u8 [a0 + 0xd] = a3\n  4133: a3 = a2 >> 0x20\n  4136: u8 [a0 + 0xc] = a3\n  4139: a3 = a2 >> 0x18\n  4142: u8 [a0 + 0xb] = a3\n  4145: a3 = a2 >> 0x10\n  4148: u8 [a0 + 0xa] = a3\n  4151: a2 = a2 >> 0x8\n  4154: u8 [a0 + 0x9] = a2\n  4157: u8 [a0] = a1\n  4159: a2 = a1 >> 0x38\n  4162: u8 [a0 + 0x7] = a2\n  4165: a2 = a1 >> 0x30\n  4168: u8 [a0 + 0x6] = a2\n  4171: a2 = a1 >> 0x28\n  4174: u8 [a0 + 0x5] = a2\n  4177: a2 = a1 >> 0x20\n  4180: u8 [a0 + 0x4] = a2\n  4183: a2 = a1 >> 0x18\n  4186: u8 [a0 + 0x3] = a2\n  4189: a2 = a1 >> 0x10\n  4192: u8 [a0 + 0x2] = a2\n  4195: a1 = a1 >> 0x8\n  4198: u8 [a0 + 0x1] = a1\n  4201: a0 = s0 + 0x20\n  4204: a1 = a0 <u s0\n  4207: a3 = u64 [sp + 0x20]\n  4210: a2 = a3 + a1\n  4213: a3 = a2 <u a3\n  4216: a3 = a1 if a1 == 0\n  4219: a1 = u64 [sp + 0x30]\n  4222: a3 = a3 + a1\n  4225: a1 = a3 <u a1\n  4228: a4 = u64 [sp + 0x28]\n  4231: a1 = a1 + a4\n  4234: a4 = u64 [sp + 0x18]\n  4237: u64 [a4] = a0\n  4239: u64 [a4 + 0x8] = a2\n  4242: u64 [a4 + 0x10] = a3\n  4245: u64 [a4 + 0x18] = a1\n  4248: ra = u64 [sp + 0x48]\n  4251: s0 = u64 [sp + 0x40]\n  4254: s1 = u64 [sp + 0x38]\n  4257: sp = sp + 0x50\n  4260: ret\n      : @96 (gas: 1)\n  4262: trap\n      : @97 (gas: 39)\n  4263: sp = sp + 0xfffffffffffffea0\n  4267: u64 [sp + 0x158] = ra\n  4271: u64 [sp + 0x150] = s0\n  4275: u64 [sp + 0x148] = s1\n  4279: s0 = sp + 0x160\n  4283: sp = sp & 0xffffffffffffffe0\n  4286: u64 [sp + 0x8] = a0\n  4289: a0 = u64 [a2 + 0x18]\n  4292: u64 [sp + 0xb0] = a0\n  4296: a0 = u64 [a2 + 0x10]\n  4299: u64 [sp + 0xa8] = a0\n  4303: a0 = u64 [a2 + 0x8]\n  4306: u64 [sp + 0xa0] = a0\n  4310: a0 = u64 [a2]\n  4312: u64 [sp + 0xb8] = a0\n  4316: a4 = u64 [a1 + 0x18]\n  4319: a3 = u64 [a1 + 0x10]\n  4322: a2 = u64 [a1 + 0x8]\n  4325: a0 = u64 [a1]\n  4327: u64 [sp + 0x18] = a4\n  4330: u64 [sp + 0x118] = a4\n  4334: u64 [sp + 0x20] = a3\n  4337: u64 [sp + 0x110] = a3\n  4341: u64 [sp + 0x68] = a2\n  4344: u64 [sp + 0x108] = a2\n  4348: u64 [sp + 0x70] = a0\n  4351: u64 [sp + 0x100] = a0\n  4355: u64 [sp + 312] = 0\n  4359: u64 [sp + 304] = 0\n  4363: u64 [sp + 296] = 0\n  4367: u64 [sp + 288] = 0\n  4371: u32 [sp + 320] = 0x20\n  4376: i32 a1 = sp + 0x100\n  4380: i32 a3 = sp + 0x120\n  4384: i32 a4 = sp + 0x140\n  4388: a2 = 0xffffffffffffffff\n  4391: a0 = 0\n  4393: ecalli 5 // 'get_storage'\n  4395: fallthrough\n      : @98 (gas: 32)\n  4396: t0 = u64 [sp + 0x130]\n  4400: t1 = u64 [sp + 0x128]\n  4404: t2 = u64 [sp + 0x138]\n  4408: a5 = u64 [sp + 0x120]\n  4412: a0 = t0 << 0x3f\n  4415: a1 = t1 >> 0x1\n  4418: a0 = a0 | a1\n  4421: a1 = t2 << 0x3f\n  4424: a2 = t0 >> 0x1\n  4427: a1 = a1 | a2\n  4430: a2 = t1 << 0x3f\n  4433: a3 = a5 >> 0x1\n  4436: a4 = a3 | a2\n  4439: a2 = t2 >> 0x1\n  4442: u64 [sp + 0x78] = a5\n  4445: a5 = a5 & 0x1\n  4448: a3 = -a5\n  4450: ra = a4 & 0x7f\n  4453: a1 = a1 & a3\n  4456: s1 = a3 & a0\n  4459: a4 = ra if a5 == 0\n  4462: a2 = a2 & a3\n  4465: u64 [sp + 0x58] = a4\n  4468: a0 = a4 <u 0x20\n  4471: u64 [sp + 0x48] = s1\n  4474: a0 = 0 if s1 != 0\n  4476: u64 [sp + 0x50] = a1\n  4479: u64 [sp + 0x40] = a2\n  4482: a1 = a1 | a2\n  4485: a0 = 0 if a1 != 0\n  4487: a1 = a5 <u 0x1\n  4490: jump @117 if a1 != a0\n      : @99 (gas: 17)\n  4494: u64 [sp + 0x98] = a5\n  4498: u64 [sp + 0x10] = ra\n  4501: u64 [sp + 0x80] = t1\n  4505: u64 [sp + 0x88] = t0\n  4509: u64 [sp + 0x90] = t2\n  4513: a0 = u64 [sp + 0xb8]\n  4517: a2 = u64 [sp + 0xa8]\n  4521: a0 = a0 | a2\n  4524: a1 = u64 [sp + 0xb0]\n  4528: a3 = u64 [sp + 0xa0]\n  4532: a1 = a1 | a3\n  4535: a0 = a0 | a1\n  4538: a0 = a0 >> 0x20\n  4541: a1 = a1 | a2\n  4544: a1 = a1 << 0x20\n  4547: a0 = a0 | a1\n  4550: jump @116 if a0 != 0\n      : @100 (gas: 4)\n  4554: s1 = u64 [sp + 0xb8]\n  4558: i32 a0 = s1 + 0\n  4560: a1 = 0x20\n  4563: ra = 66, jump @0\n      : @101 [@dyn 33] (gas: 85)\n  4568: a1 = u64 [sp + 0x40]\n  4571: a1 = reverse a1\n  4573: a2 = u64 [sp + 0x58]\n  4576: a2 = reverse a2\n  4578: a3 = a2 >> 0x38\n  4581: u8 [a0 + 0x1f] = a3\n  4584: a3 = a2 >> 0x30\n  4587: u8 [a0 + 0x1e] = a3\n  4590: a3 = a2 >> 0x28\n  4593: u8 [a0 + 0x1d] = a3\n  4596: a3 = a2 >> 0x20\n  4599: u8 [a0 + 0x1c] = a3\n  4602: a3 = a2 >> 0x18\n  4605: u8 [a0 + 0x1b] = a3\n  4608: a3 = a2 >> 0x10\n  4611: u8 [a0 + 0x1a] = a3\n  4614: a3 = a2 >> 0x8\n  4617: u8 [a0 + 0x19] = a3\n  4620: a3 = u64 [sp + 0x48]\n  4623: a3 = reverse a3\n  4625: u8 [a0 + 0x18] = a2\n  4628: a2 = a3 >> 0x38\n  4631: u8 [a0 + 0x17] = a2\n  4634: a2 = a3 >> 0x30\n  4637: u8 [a0 + 0x16] = a2\n  4640: a2 = a3 >> 0x28\n  4643: u8 [a0 + 0x15] = a2\n  4646: a2 = a3 >> 0x20\n  4649: u8 [a0 + 0x14] = a2\n  4652: a2 = a3 >> 0x18\n  4655: u8 [a0 + 0x13] = a2\n  4658: a2 = a3 >> 0x10\n  4661: u8 [a0 + 0x12] = a2\n  4664: a2 = u64 [sp + 0x50]\n  4667: a2 = reverse a2\n  4669: u8 [a0 + 0x10] = a3\n  4672: a3 = a3 >> 0x8\n  4675: u8 [a0 + 0x11] = a3\n  4678: u8 [a0 + 0x8] = a2\n  4681: a3 = a2 >> 0x38\n  4684: u8 [a0 + 0xf] = a3\n  4687: a3 = a2 >> 0x30\n  4690: u8 [a0 + 0xe] = a3\n  4693: a3 = a2 >> 0x28\n  4696: u8 [a0 + 0xd] = a3\n  4699: a3 = a2 >> 0x20\n  4702: u8 [a0 + 0xc] = a3\n  4705: a3 = a2 >> 0x18\n  4708: u8 [a0 + 0xb] = a3\n  4711: a3 = a2 >> 0x10\n  4714: u8 [a0 + 0xa] = a3\n  4717: a2 = a2 >> 0x8\n  4720: u8 [a0 + 0x9] = a2\n  4723: u8 [a0] = a1\n  4725: a2 = a1 >> 0x38\n  4728: u8 [a0 + 0x7] = a2\n  4731: a2 = a1 >> 0x30\n  4734: u8 [a0 + 0x6] = a2\n  4737: a2 = a1 >> 0x28\n  4740: u8 [a0 + 0x5] = a2\n  4743: a2 = a1 >> 0x20\n  4746: u8 [a0 + 0x4] = a2\n  4749: a2 = a1 >> 0x18\n  4752: u8 [a0 + 0x3] = a2\n  4755: a2 = a1 >> 0x10\n  4758: u8 [a0 + 0x2] = a2\n  4761: a1 = a1 >> 0x8\n  4764: u8 [a0 + 0x1] = a1\n  4767: a0 = s1 + 0x20\n  4770: u64 [sp + 0x60] = a0\n  4773: a0 = a0 <u s1\n  4776: a3 = u64 [sp + 0xa0]\n  4780: a1 = a3 + a0\n  4783: u64 [sp + 0x28] = a1\n  4786: a1 = a1 <u a3\n  4789: a1 = a0 if a0 == 0\n  4792: a0 = u64 [sp + 0xa8]\n  4796: a1 = a1 + a0\n  4799: u64 [sp + 0x30] = a1\n  4802: a0 = a1 <u a0\n  4805: a1 = u64 [sp + 0xb0]\n  4809: a0 = a0 + a1\n  4812: u64 [sp + 0x38] = a0\n  4815: a0 = u64 [sp + 0x98]\n  4819: jump @105 if a0 != 0\n      : @102 (gas: 9)\n  4823: a0 = u64 [sp + 0xb0]\n  4827: a1 = u64 [sp + 0xa8]\n  4831: a0 = a0 | a1\n  4834: a1 = 0xffffffe0\n  4844: a2 = u64 [sp + 0xb8]\n  4848: a1 = a2 <u a1\n  4851: a1 = 0 if a3 != 0\n  4853: a1 = 0 if a0 != 0\n  4855: jump @116 if a1 == 0\n      : @103 (gas: 5)\n  4859: a0 = u64 [sp + 0x78]\n  4862: s1 = a0 & 0xffffffffffffff00\n  4866: a0 = i32 [sp + 0x60]\n  4869: a1 = 0x20\n  4872: ra = 68, jump @0\n      : @104 [@dyn 34] (gas: 73)\n  4877: t0 = 0\n  4879: t1 = 0\n  4881: u64 [sp + 176] = 0\n  4885: a3 = reverse s1\n  4887: a4 = a3 >> 0x30\n  4890: u8 [a0 + 0x1e] = a4\n  4893: a4 = a3 >> 0x28\n  4896: u8 [a0 + 0x1d] = a4\n  4899: a4 = a3 >> 0x20\n  4902: u8 [a0 + 0x1c] = a4\n  4905: a4 = a3 >> 0x18\n  4908: u8 [a0 + 0x1b] = a4\n  4911: a4 = a3 >> 0x10\n  4914: u8 [a0 + 0x1a] = a4\n  4917: a1 = u64 [sp + 0x80]\n  4921: a4 = reverse a1\n  4923: u8 [a0 + 0x18] = a3\n  4926: a3 = a3 >> 0x8\n  4929: u8 [a0 + 0x19] = a3\n  4932: a3 = a4 >> 0x38\n  4935: u8 [a0 + 0x17] = a3\n  4938: a3 = a4 >> 0x30\n  4941: u8 [a0 + 0x16] = a3\n  4944: a3 = a4 >> 0x28\n  4947: u8 [a0 + 0x15] = a3\n  4950: a3 = a4 >> 0x20\n  4953: u8 [a0 + 0x14] = a3\n  4956: a3 = a4 >> 0x18\n  4959: u8 [a0 + 0x13] = a3\n  4962: a3 = a4 >> 0x10\n  4965: u8 [a0 + 0x12] = a3\n  4968: a1 = u64 [sp + 0x88]\n  4972: a3 = reverse a1\n  4974: u8 [a0 + 0x10] = a4\n  4977: a4 = a4 >> 0x8\n  4980: u8 [a0 + 0x11] = a4\n  4983: a4 = a3 >> 0x38\n  4986: u8 [a0 + 0xf] = a4\n  4989: a4 = a3 >> 0x30\n  4992: u8 [a0 + 0xe] = a4\n  4995: a4 = a3 >> 0x28\n  4998: u8 [a0 + 0xd] = a4\n  5001: a4 = a3 >> 0x20\n  5004: u8 [a0 + 0xc] = a4\n  5007: a4 = a3 >> 0x18\n  5010: u8 [a0 + 0xb] = a4\n  5013: a4 = a3 >> 0x10\n  5016: u8 [a0 + 0xa] = a4\n  5019: a1 = u64 [sp + 0x90]\n  5023: a4 = reverse a1\n  5025: u8 [a0 + 31] = 0\n  5028: u8 [a0 + 0x8] = a3\n  5031: a3 = a3 >> 0x8\n  5034: u8 [a0 + 0x9] = a3\n  5037: u8 [a0] = a4\n  5039: a3 = a4 >> 0x38\n  5042: u8 [a0 + 0x7] = a3\n  5045: a3 = a4 >> 0x30\n  5048: u8 [a0 + 0x6] = a3\n  5051: a3 = a4 >> 0x28\n  5054: u8 [a0 + 0x5] = a3\n  5057: a3 = a4 >> 0x20\n  5060: u8 [a0 + 0x4] = a3\n  5063: a3 = a4 >> 0x18\n  5066: u8 [a0 + 0x3] = a3\n  5069: a3 = a4 >> 0x10\n  5072: u8 [a0 + 0x2] = a3\n  5075: a4 = a4 >> 0x8\n  5078: u8 [a0 + 0x1] = a4\n  5081: a0 = u64 [sp + 0x10]\n  5084: a0 = a0 >u 0\n  5086: ra = a0 << 0x5\n  5089: jump @115\n      : @105 (gas: 3)\n  5092: a1 = 0x20\n  5095: a0 = 0\n  5097: ra = 70, jump @0\n      : @106 [@dyn 35] (gas: 71)\n  5102: a1 = u64 [sp + 0x18]\n  5105: a1 = reverse a1\n  5107: a2 = u64 [sp + 0x20]\n  5110: a2 = reverse a2\n  5112: a3 = u64 [sp + 0x68]\n  5115: a3 = reverse a3\n  5117: a4 = u64 [sp + 0x70]\n  5120: a4 = reverse a4\n  5122: a5 = a4 >> 0x38\n  5125: u8 [a0 + 0x1f] = a5\n  5128: a5 = a4 >> 0x30\n  5131: u8 [a0 + 0x1e] = a5\n  5134: a5 = a4 >> 0x28\n  5137: u8 [a0 + 0x1d] = a5\n  5140: a5 = a4 >> 0x20\n  5143: u8 [a0 + 0x1c] = a5\n  5146: a5 = a4 >> 0x18\n  5149: u8 [a0 + 0x1b] = a5\n  5152: a5 = a4 >> 0x10\n  5155: u8 [a0 + 0x1a] = a5\n  5158: a5 = a4 >> 0x8\n  5161: u8 [a0 + 0x19] = a5\n  5164: u8 [a0 + 0x18] = a4\n  5167: u8 [a0 + 0x10] = a3\n  5170: a4 = a3 >> 0x38\n  5173: u8 [a0 + 0x17] = a4\n  5176: a4 = a3 >> 0x30\n  5179: u8 [a0 + 0x16] = a4\n  5182: a4 = a3 >> 0x28\n  5185: u8 [a0 + 0x15] = a4\n  5188: a4 = a3 >> 0x20\n  5191: u8 [a0 + 0x14] = a4\n  5194: a4 = a3 >> 0x18\n  5197: u8 [a0 + 0x13] = a4\n  5200: a4 = a3 >> 0x10\n  5203: u8 [a0 + 0x12] = a4\n  5206: a3 = a3 >> 0x8\n  5209: u8 [a0 + 0x11] = a3\n  5212: u8 [a0 + 0x8] = a2\n  5215: a3 = a2 >> 0x38\n  5218: u8 [a0 + 0xf] = a3\n  5221: a3 = a2 >> 0x30\n  5224: u8 [a0 + 0xe] = a3\n  5227: a3 = a2 >> 0x28\n  5230: u8 [a0 + 0xd] = a3\n  5233: a3 = a2 >> 0x20\n  5236: u8 [a0 + 0xc] = a3\n  5239: a3 = a2 >> 0x18\n  5242: u8 [a0 + 0xb] = a3\n  5245: a3 = a2 >> 0x10\n  5248: u8 [a0 + 0xa] = a3\n  5251: a2 = a2 >> 0x8\n  5254: u8 [a0 + 0x9] = a2\n  5257: u8 [a0] = a1\n  5259: a2 = a1 >> 0x38\n  5262: u8 [a0 + 0x7] = a2\n  5265: a2 = a1 >> 0x30\n  5268: u8 [a0 + 0x6] = a2\n  5271: a2 = a1 >> 0x28\n  5274: u8 [a0 + 0x5] = a2\n  5277: a2 = a1 >> 0x20\n  5280: u8 [a0 + 0x4] = a2\n  5283: a2 = a1 >> 0x18\n  5286: u8 [a0 + 0x3] = a2\n  5289: a2 = a1 >> 0x10\n  5292: u8 [a0 + 0x2] = a2\n  5295: a1 = a1 >> 0x8\n  5298: u8 [a0 + 0x1] = a1\n  5301: a1 = 0x20\n  5304: a0 = 0\n  5306: ra = 72, jump @0\n      : @107 [@dyn 36] (gas: 5)\n  5311: i32 a0 = a0 + 0\n  5313: i32 a2 = sp + 0x120\n  5317: a1 = 0x20\n  5320: ecalli 6 // 'hash_keccak_256'\n  5322: fallthrough\n      : @108 (gas: 9)\n  5323: a0 = u64 [sp + 0x78]\n  5326: a0 = a0 <u 0x2\n  5329: a1 = u64 [sp + 0x80]\n  5333: a0 = 0 if a1 != 0\n  5335: a1 = u64 [sp + 0x90]\n  5339: a2 = u64 [sp + 0x88]\n  5343: a1 = a1 | a2\n  5346: a0 = 0 if a1 != 0\n  5348: jump @110 if a0 == 0\n      : @109 (gas: 5)\n  5351: ra = 0\n  5353: t0 = 0\n  5355: t1 = 0\n  5357: u64 [sp + 176] = 0\n  5361: jump @115\n      : @110 (gas: 19)\n  5364: u64 [sp + 168] = 0\n  5368: u64 [sp + 160] = 0\n  5372: s1 = 0\n  5374: u64 [sp + 176] = 0\n  5378: a0 = u64 [sp + 0x120]\n  5382: a1 = u64 [sp + 0x128]\n  5386: a2 = u64 [sp + 0x130]\n  5390: a3 = u64 [sp + 0x138]\n  5394: a0 = reverse a0\n  5396: a5 = reverse a1\n  5398: a1 = reverse a2\n  5400: t2 = reverse a3\n  5402: i32 a3 = sp + 0x100\n  5406: u64 [sp + 0x20] = a3\n  5409: i32 a3 = sp + 0x120\n  5413: u64 [sp + 0x18] = a3\n  5416: i32 a3 = sp + 0x140\n  5420: u64 [sp + 0x10] = a3\n  5423: fallthrough\n      : @111 (gas: 20)\n  5424: u64 [sp + 0x88] = a5\n  5428: u64 [sp + 0x110] = a5\n  5432: u64 [sp + 0xb8] = a1\n  5436: u64 [sp + 0x108] = a1\n  5440: u64 [sp + 0x90] = t2\n  5444: u64 [sp + 0x100] = t2\n  5448: u64 [sp + 0x98] = a0\n  5452: u64 [sp + 0x118] = a0\n  5456: u64 [sp + 312] = 0\n  5460: u64 [sp + 304] = 0\n  5464: u64 [sp + 296] = 0\n  5468: u64 [sp + 288] = 0\n  5472: u32 [sp + 320] = 0x20\n  5477: a2 = 0xffffffffffffffff\n  5480: a0 = 0\n  5482: a1 = u64 [sp + 0x20]\n  5485: a3 = u64 [sp + 0x18]\n  5488: a4 = u64 [sp + 0x10]\n  5491: ecalli 5 // 'get_storage'\n  5493: fallthrough\n      : @112 (gas: 30)\n  5494: a0 = u64 [sp + 0x60]\n  5497: a1 = u64 [sp + 0xa8]\n  5501: a0 = a0 + a1\n  5504: a1 = a0 <u a1\n  5507: a2 = u64 [sp + 0x28]\n  5510: a4 = u64 [sp + 0xa0]\n  5514: a2 = a2 + a4\n  5517: a2 = a2 + a1\n  5520: a3 = a2 ^ a4\n  5523: a4 = a2 <u a4\n  5526: a4 = a1 if a3 == 0\n  5529: a1 = u64 [sp + 0x30]\n  5532: a1 = a1 + s1\n  5535: u64 [sp + 0x80] = s1\n  5539: a3 = a1 <u s1\n  5542: a5 = u64 [sp + 0x38]\n  5545: s1 = u64 [sp + 0xb0]\n  5549: a5 = a5 + s1\n  5552: a3 = a3 + a5\n  5555: a4 = a4 + a1\n  5558: a1 = a4 <u a1\n  5561: a1 = a1 + a3\n  5564: a1 = a1 | a2\n  5567: a2 = a0 | a4\n  5570: a2 = a2 | a1\n  5573: a1 = a1 | a4\n  5576: a2 = a2 >> 0x20\n  5579: a1 = a1 << 0x20\n  5582: a1 = a1 | a2\n  5585: jump @116 if a1 != 0\n      : @113 (gas: 10)\n  5589: a1 = u64 [sp + 0x138]\n  5593: u64 [sp + 0x70] = a1\n  5596: a1 = u64 [sp + 0x130]\n  5600: u64 [sp + 0x78] = a1\n  5603: a1 = u64 [sp + 0x128]\n  5607: u64 [sp + 0x68] = a1\n  5610: s1 = u64 [sp + 0x120]\n  5614: i32 a0 = a0 + 0\n  5616: a1 = 0x20\n  5619: ra = 74, jump @0\n      : @114 [@dyn 37] (gas: 115)\n  5624: a1 = reverse s1\n  5626: a2 = a1 >> 0x38\n  5629: u8 [a0 + 0x1f] = a2\n  5632: a2 = a1 >> 0x30\n  5635: u8 [a0 + 0x1e] = a2\n  5638: a2 = a1 >> 0x28\n  5641: u8 [a0 + 0x1d] = a2\n  5644: a2 = a1 >> 0x20\n  5647: u8 [a0 + 0x1c] = a2\n  5650: a2 = a1 >> 0x18\n  5653: u8 [a0 + 0x1b] = a2\n  5656: a2 = a1 >> 0x10\n  5659: u8 [a0 + 0x1a] = a2\n  5662: a2 = a1 >> 0x8\n  5665: u8 [a0 + 0x19] = a2\n  5668: a2 = u64 [sp + 0x68]\n  5671: a2 = reverse a2\n  5673: u8 [a0 + 0x18] = a1\n  5676: a1 = a2 >> 0x38\n  5679: u8 [a0 + 0x17] = a1\n  5682: a1 = a2 >> 0x30\n  5685: u8 [a0 + 0x16] = a1\n  5688: a1 = a2 >> 0x28\n  5691: u8 [a0 + 0x15] = a1\n  5694: a1 = a2 >> 0x20\n  5697: u8 [a0 + 0x14] = a1\n  5700: a1 = a2 >> 0x18\n  5703: u8 [a0 + 0x13] = a1\n  5706: a1 = a2 >> 0x10\n  5709: u8 [a0 + 0x12] = a1\n  5712: a1 = u64 [sp + 0x70]\n  5715: a1 = reverse a1\n  5717: a3 = u64 [sp + 0x78]\n  5720: a3 = reverse a3\n  5722: u8 [a0 + 0x10] = a2\n  5725: a2 = a2 >> 0x8\n  5728: u8 [a0 + 0x11] = a2\n  5731: u8 [a0 + 0x8] = a3\n  5734: a2 = a3 >> 0x38\n  5737: u8 [a0 + 0xf] = a2\n  5740: a2 = a3 >> 0x30\n  5743: u8 [a0 + 0xe] = a2\n  5746: a2 = a3 >> 0x28\n  5749: u8 [a0 + 0xd] = a2\n  5752: a2 = a3 >> 0x20\n  5755: u8 [a0 + 0xc] = a2\n  5758: a2 = a3 >> 0x18\n  5761: u8 [a0 + 0xb] = a2\n  5764: a2 = a3 >> 0x10\n  5767: u8 [a0 + 0xa] = a2\n  5770: a3 = a3 >> 0x8\n  5773: u8 [a0 + 0x9] = a3\n  5776: u8 [a0] = a1\n  5778: a2 = a1 >> 0x38\n  5781: u8 [a0 + 0x7] = a2\n  5784: a2 = a1 >> 0x30\n  5787: u8 [a0 + 0x6] = a2\n  5790: a2 = a1 >> 0x28\n  5793: u8 [a0 + 0x5] = a2\n  5796: a2 = a1 >> 0x20\n  5799: u8 [a0 + 0x4] = a2\n  5802: a2 = a1 >> 0x18\n  5805: u8 [a0 + 0x3] = a2\n  5808: a2 = a1 >> 0x10\n  5811: u8 [a0 + 0x2] = a2\n  5814: a1 = a1 >> 0x8\n  5817: u8 [a0 + 0x1] = a1\n  5820: t2 = u64 [sp + 0x90]\n  5824: t2 = t2 + 0x1\n  5827: a0 = t2 <u 0x1\n  5830: a1 = u64 [sp + 0xb8]\n  5834: a1 = a1 + a0\n  5837: u64 [sp + 0xb8] = a1\n  5841: a0 = u64 [sp + 0xa8]\n  5845: ra = a0 + 0x20\n  5848: a2 = ra <u a0\n  5851: a0 = u64 [sp + 0xa0]\n  5855: t0 = a0 + a2\n  5858: a3 = t0 <u a0\n  5861: a3 = a2 if a2 == 0\n  5864: a0 = u64 [sp + 0x80]\n  5868: t1 = a0 + a3\n  5871: a3 = t1 <u a0\n  5874: a5 = u64 [sp + 0xb0]\n  5878: a5 = a5 + a3\n  5881: a1 = u64 [sp + 0x50]\n  5884: a0 = t1 <u a1\n  5887: u64 [sp + 0xa8] = a0\n  5891: a2 = u64 [sp + 0x58]\n  5894: a4 = ra <u a2\n  5897: a2 = u64 [sp + 0x48]\n  5900: s1 = t0 ^ a2\n  5903: a3 = t0 <u a2\n  5906: a3 = a4 if s1 == 0\n  5909: a2 = u64 [sp + 0x40]\n  5912: a0 = a5 ^ a2\n  5915: u64 [sp + 0xb0] = a5\n  5919: s1 = a5 <u a2\n  5922: a2 = u64 [sp + 0xa8]\n  5926: s1 = a2 if a0 == 0\n  5929: a4 = t1 ^ a1\n  5932: a1 = u64 [sp + 0xb8]\n  5936: a0 = a0 | a4\n  5939: a5 = t2 | a1\n  5942: a5 = a5 <u 0x1\n  5945: a4 = u64 [sp + 0x88]\n  5949: a5 = a5 + a4\n  5952: a4 = a5 <u a4\n  5955: a3 = s1 if a0 != 0\n  5958: a0 = u64 [sp + 0x98]\n  5962: a0 = a0 + a4\n  5965: u64 [sp + 0xa8] = ra\n  5969: u64 [sp + 0xa0] = t0\n  5973: s1 = t1\n  5975: jump @111 if a3 != 0\n      : @115 (gas: 30)\n  5979: a3 = u64 [sp + 0x60]\n  5982: a3 = a3 + ra\n  5985: a0 = a3 <u ra\n  5988: a4 = u64 [sp + 0x28]\n  5991: a4 = a4 + t0\n  5994: a4 = a4 + a0\n  5997: a5 = a4 ^ t0\n  6000: a1 = a4 <u t0\n  6003: a1 = a0 if a5 == 0\n  6006: a0 = u64 [sp + 0x30]\n  6009: a0 = a0 + t1\n  6012: a1 = a1 + a0\n  6015: a5 = a1 <u a0\n  6018: a0 = a0 <u t1\n  6021: a2 = u64 [sp + 0x38]\n  6024: s1 = u64 [sp + 0xb0]\n  6028: a2 = a2 + s1\n  6031: a0 = a0 + a2\n  6034: a0 = a0 + a5\n  6037: a2 = u64 [sp + 0x8]\n  6040: u64 [a2] = a3\n  6042: u64 [a2 + 0x8] = a4\n  6045: u64 [a2 + 0x10] = a1\n  6048: u64 [a2 + 0x18] = a0\n  6051: sp = s0 + 0xfffffffffffffea0\n  6055: ra = u64 [sp + 0x158]\n  6059: s0 = u64 [sp + 0x150]\n  6063: s1 = u64 [sp + 0x148]\n  6067: sp = sp + 0x160\n  6071: ret\n      : @116 (gas: 1)\n  6073: trap\n      : @117 (gas: 8)\n  6074: u64 [sp + 240] = 0\n  6078: u64 [sp + 232] = 0\n  6082: u64 [sp + 224] = 0\n  6086: a0 = 0x4e487b7100000000\n  6096: a1 = sp + 0xe0\n  6100: u64 [sp + 0xf8] = a0\n  6104: a0 = 0\n  6106: ra = 76, jump @23\n      : @118 [@dyn 38] (gas: 7)\n  6111: u64 [sp + 216] = 0\n  6115: u64 [sp + 208] = 0\n  6119: u64 [sp + 192] = 0x22\n  6124: a0 = 0x4\n  6127: a1 = sp + 0xc0\n  6131: u64 [sp + 200] = 0\n  6135: ra = 78, jump @23\n      : @119 [@dyn 39] (gas: 3)\n  6140: a1 = 0x24\n  6143: a0 = 0\n  6145: ra = 80, jump @0\n      : @120 [@dyn 40] (gas: 6)\n  6150: i32 a1 = a0 + 0\n  6152: a0 = 0x1\n  6155: a2 = 0x24\n  6158: ra = 0x52\n  6161: ecalli 7 // 'seal_return'\n  6163: fallthrough\n      : @121 [@dyn 41] (gas: 27)\n  6164: sp = sp + 0xffffffffffffff80\n  6167: u64 [sp + 0x78] = ra\n  6170: u64 [sp + 0x70] = s0\n  6173: u64 [sp + 0x68] = s1\n  6176: s0 = sp + 0x80\n  6180: sp = sp & 0xfffffffffffffff0\n  6183: t0 = u64 [a1]\n  6185: t1 = u64 [a1 + 0x8]\n  6188: t2 = u64 [a1 + 0x10]\n  6191: a1 = u64 [a1 + 0x18]\n  6194: a3 = u64 [a2]\n  6196: a4 = u64 [a2 + 0x8]\n  6199: a5 = u64 [a2 + 0x10]\n  6202: a2 = u64 [a2 + 0x18]\n  6205: s1 = a0\n  6207: u64 [sp + 0x18] = a2\n  6210: u64 [sp + 0x10] = a5\n  6213: u64 [sp + 0x8] = a4\n  6216: u64 [sp] = a3\n  6218: u64 [sp + 0x38] = a1\n  6221: u64 [sp + 0x30] = t2\n  6224: u64 [sp + 0x28] = t1\n  6227: a0 = sp + 0x40\n  6230: a1 = sp + 0x20\n  6233: a2 = sp\n  6235: u64 [sp + 0x20] = t0\n  6238: ra = 84, jump @97\n      : @122 [@dyn 42] (gas: 14)\n  6243: a0 = u64 [sp + 0x50]\n  6246: a1 = u64 [sp + 0x58]\n  6249: a2 = u64 [sp + 0x40]\n  6252: a3 = u64 [sp + 0x48]\n  6255: u64 [s1 + 0x10] = a0\n  6258: u64 [s1 + 0x18] = a1\n  6261: u64 [s1] = a2\n  6263: u64 [s1 + 0x8] = a3\n  6266: sp = s0 + 0xffffffffffffff80\n  6269: ra = u64 [sp + 0x78]\n  6272: s0 = u64 [sp + 0x70]\n  6275: s1 = u64 [sp + 0x68]\n  6278: sp = sp + 0x80\n  6282: ret\n      : @123 (gas: 18)\n  6284: sp = sp + 0xffffffffffffff00\n  6288: u64 [sp + 0xf8] = ra\n  6292: u64 [sp + 0xf0] = s0\n  6296: u64 [sp + 0xe8] = s1\n  6300: s0 = sp + 0x100\n  6304: sp = sp & 0xfffffffffffffff0\n  6307: a2 = u64 [a1]\n  6309: u64 [sp + 0x20] = a2\n  6312: a2 = u64 [a1 + 0x8]\n  6315: u64 [sp + 0x10] = a2\n  6318: a2 = u64 [a1 + 0x10]\n  6321: u64 [sp + 0x8] = a2\n  6324: a1 = u64 [a1 + 0x18]\n  6327: u64 [sp] = a1\n  6329: u64 [sp + 0x18] = a0\n  6332: a0 = 0x40\n  6335: a1 = 0x20\n  6338: ra = 86, jump @0\n      : @124 [@dyn 43] (gas: 111)\n  6343: a1 = u8 [a0 + 0x1]\n  6346: a2 = u8 [a0]\n  6348: a3 = u8 [a0 + 0x2]\n  6351: a4 = u8 [a0 + 0x3]\n  6354: a1 = a1 << 0x8\n  6357: a1 = a1 | a2\n  6360: a3 = a3 << 0x10\n  6363: a4 = a4 << 0x18\n  6366: a3 = a3 | a4\n  6369: a1 = a1 | a3\n  6372: a2 = u8 [a0 + 0x5]\n  6375: a3 = u8 [a0 + 0x4]\n  6378: a4 = u8 [a0 + 0x6]\n  6381: a5 = u8 [a0 + 0x7]\n  6384: a2 = a2 << 0x8\n  6387: a2 = a2 | a3\n  6390: a4 = a4 << 0x10\n  6393: a5 = a5 << 0x18\n  6396: a4 = a4 | a5\n  6399: a2 = a2 | a4\n  6402: a2 = a2 << 0x20\n  6405: t0 = a2 | a1\n  6408: a2 = u8 [a0 + 0x9]\n  6411: a3 = u8 [a0 + 0x8]\n  6414: a4 = u8 [a0 + 0xa]\n  6417: a5 = u8 [a0 + 0xb]\n  6420: a2 = a2 << 0x8\n  6423: a2 = a2 | a3\n  6426: a4 = a4 << 0x10\n  6429: a5 = a5 << 0x18\n  6432: a4 = a4 | a5\n  6435: a2 = a2 | a4\n  6438: a3 = u8 [a0 + 0xd]\n  6441: a4 = u8 [a0 + 0xc]\n  6444: a5 = u8 [a0 + 0xe]\n  6447: s1 = u8 [a0 + 0xf]\n  6450: a3 = a3 << 0x8\n  6453: a3 = a3 | a4\n  6456: a5 = a5 << 0x10\n  6459: s1 = s1 << 0x18\n  6462: a5 = a5 | s1\n  6465: a3 = a3 | a5\n  6468: a3 = a3 << 0x20\n  6471: a2 = a2 | a3\n  6474: a3 = u8 [a0 + 0x11]\n  6477: a4 = u8 [a0 + 0x10]\n  6480: a5 = u8 [a0 + 0x12]\n  6483: s1 = u8 [a0 + 0x13]\n  6486: a3 = a3 << 0x8\n  6489: a3 = a3 | a4\n  6492: a5 = a5 << 0x10\n  6495: s1 = s1 << 0x18\n  6498: a5 = a5 | s1\n  6501: a3 = a3 | a5\n  6504: a4 = u8 [a0 + 0x15]\n  6507: a5 = u8 [a0 + 0x14]\n  6510: s1 = u8 [a0 + 0x16]\n  6513: a1 = u8 [a0 + 0x17]\n  6516: a4 = a4 << 0x8\n  6519: a4 = a4 | a5\n  6522: s1 = s1 << 0x10\n  6525: a1 = a1 << 0x18\n  6528: a1 = a1 | s1\n  6531: a1 = a1 | a4\n  6534: a1 = a1 << 0x20\n  6537: a3 = a3 | a1\n  6540: a1 = u8 [a0 + 0x19]\n  6543: a4 = u8 [a0 + 0x18]\n  6546: a5 = u8 [a0 + 0x1a]\n  6549: s1 = u8 [a0 + 0x1b]\n  6552: a1 = a1 << 0x8\n  6555: a1 = a1 | a4\n  6558: a5 = a5 << 0x10\n  6561: s1 = s1 << 0x18\n  6564: a5 = a5 | s1\n  6567: a1 = a1 | a5\n  6570: a4 = u8 [a0 + 0x1d]\n  6573: a5 = u8 [a0 + 0x1c]\n  6576: s1 = u8 [a0 + 0x1e]\n  6579: a0 = u8 [a0 + 0x1f]\n  6582: a4 = a4 << 0x8\n  6585: a4 = a4 | a5\n  6588: s1 = s1 << 0x10\n  6591: a0 = a0 << 0x18\n  6594: a0 = a0 | s1\n  6597: a0 = a0 | a4\n  6600: a0 = a0 << 0x20\n  6603: a0 = a0 | a1\n  6606: a4 = reverse a0\n  6608: u64 [sp + 0x38] = a4\n  6611: s1 = reverse a3\n  6613: a2 = reverse a2\n  6615: u64 [sp + 0x30] = a2\n  6618: a1 = reverse t0\n  6620: u64 [sp + 0x28] = a1\n  6623: a0 = u64 [sp]\n  6625: u64 [sp + 0xb8] = a0\n  6629: a0 = u64 [sp + 0x8]\n  6632: u64 [sp + 0xb0] = a0\n  6636: a0 = u64 [sp + 0x10]\n  6639: u64 [sp + 0xa8] = a0\n  6643: a0 = u64 [sp + 0x20]\n  6646: u64 [sp + 0xa0] = a0\n  6650: u64 [sp + 0x98] = a1\n  6654: u64 [sp + 0x90] = a2\n  6658: u64 [sp + 0x88] = s1\n  6662: a0 = sp + 0xc0\n  6666: a1 = sp + 0xa0\n  6670: a2 = sp + 0x80\n  6674: u64 [sp + 0x80] = a4\n  6678: ra = 88, jump @97\n      : @125 [@dyn 44] (gas: 58)\n  6683: t2 = s1\n  6685: a3 = u64 [sp + 0xc8]\n  6689: a0 = u64 [sp + 0xd8]\n  6693: u64 [sp + 0x10] = a0\n  6696: a4 = u64 [sp + 0xc0]\n  6700: t1 = u64 [sp + 0xd0]\n  6704: a5 = a3 ^ s1\n  6707: a1 = a3 <u s1\n  6710: a2 = u64 [sp + 0x38]\n  6713: s1 = a4 <u a2\n  6716: a1 = s1 if a5 == 0\n  6719: a3 = a3 - t2\n  6722: a3 = a3 - s1\n  6725: u64 [sp + 0x8] = a3\n  6728: a4 = a4 - a2\n  6731: a5 = a4 + 0x1f\n  6734: a4 = a5 <u a4\n  6737: a3 = a3 + a4\n  6740: a5 = a5 & 0xffffffffffffffe0\n  6743: a0 = a3 + t2\n  6746: a2 = a2 + a5\n  6749: u64 [sp + 0x20] = a2\n  6752: a5 = a2 <u a5\n  6755: t0 = a0 + a5\n  6758: a0 = t0 ^ a3\n  6761: a2 = t0 <u a3\n  6764: a2 = a5 if a0 == 0\n  6767: s1 = u64 [sp + 0x30]\n  6770: a0 = t1 - s1\n  6773: a5 = t1 <u s1\n  6776: t1 = s1\n  6778: ra = u64 [sp + 0x28]\n  6781: s1 = u64 [sp + 0x10]\n  6784: s1 = s1 - ra\n  6787: s1 = s1 - a5\n  6790: a5 = a0 <u a1\n  6793: s1 = s1 - a5\n  6796: a0 = a0 - a1\n  6799: a1 = u64 [sp + 0x8]\n  6802: a1 = a3 <u a1\n  6805: a1 = a4 if a4 == 0\n  6808: a1 = a1 + a0\n  6811: a0 = a1 <u a0\n  6814: a3 = a1 + t1\n  6817: a5 = a3 + a2\n  6820: a1 = a3 <u a1\n  6823: a2 = a5 <u a3\n  6826: s1 = s1 + ra\n  6829: a0 = a0 + s1\n  6832: a0 = a0 + a1\n  6835: s1 = a0 + a2\n  6838: a0 = s1 >u 0\n  6840: a1 = a5 >u 0\n  6842: a1 = a0 if s1 != 0\n  6845: a0 = a5 | s1\n  6848: a2 = t0 >u 0\n  6850: a2 = a1 if a0 != 0\n  6853: jump @129 if a2 != 0\n      : @126 (gas: 15)\n  6857: a4 = t1\n  6859: a0 = u64 [sp + 0x38]\n  6862: a1 = u64 [sp + 0x20]\n  6865: a0 = a1 <u a0\n  6868: a1 = t0 ^ t2\n  6871: a2 = t0 <u t2\n  6874: a2 = a0 if a1 == 0\n  6877: a0 = a5 <u t1\n  6880: a1 = s1 ^ ra\n  6883: a3 = s1 <u ra\n  6886: a3 = a0 if a1 == 0\n  6889: a0 = a5 ^ t1\n  6892: a0 = a0 | a1\n  6895: a3 = a2 if a0 == 0\n  6898: jump @129 if a3 != 0\n      : @127 (gas: 6)\n  6902: a0 = 0x40\n  6905: a1 = 0x20\n  6908: u64 [sp + 0x10] = t2\n  6911: u64 [sp + 0x8] = t0\n  6914: u64 [sp] = a5\n  6916: ra = 90, jump @0\n      : @128 [@dyn 45] (gas: 82)\n  6921: a1 = reverse s1\n  6923: a2 = u64 [sp]\n  6925: a2 = reverse a2\n  6927: a3 = u64 [sp + 0x8]\n  6930: a3 = reverse a3\n  6932: a4 = u64 [sp + 0x20]\n  6935: a4 = reverse a4\n  6937: u8 [a0 + 0x18] = a4\n  6940: a5 = a4 >> 0x38\n  6943: u8 [a0 + 0x1f] = a5\n  6946: a5 = a4 >> 0x30\n  6949: u8 [a0 + 0x1e] = a5\n  6952: a5 = a4 >> 0x28\n  6955: u8 [a0 + 0x1d] = a5\n  6958: a5 = a4 >> 0x20\n  6961: u8 [a0 + 0x1c] = a5\n  6964: a5 = a4 >> 0x18\n  6967: u8 [a0 + 0x1b] = a5\n  6970: a5 = a4 >> 0x10\n  6973: u8 [a0 + 0x1a] = a5\n  6976: a4 = a4 >> 0x8\n  6979: u8 [a0 + 0x19] = a4\n  6982: u8 [a0 + 0x10] = a3\n  6985: a4 = a3 >> 0x38\n  6988: u8 [a0 + 0x17] = a4\n  6991: a4 = a3 >> 0x30\n  6994: u8 [a0 + 0x16] = a4\n  6997: a4 = a3 >> 0x28\n  7000: u8 [a0 + 0x15] = a4\n  7003: a4 = a3 >> 0x20\n  7006: u8 [a0 + 0x14] = a4\n  7009: a4 = a3 >> 0x18\n  7012: u8 [a0 + 0x13] = a4\n  7015: a4 = a3 >> 0x10\n  7018: u8 [a0 + 0x12] = a4\n  7021: a3 = a3 >> 0x8\n  7024: u8 [a0 + 0x11] = a3\n  7027: u8 [a0 + 0x8] = a2\n  7030: a3 = a2 >> 0x38\n  7033: u8 [a0 + 0xf] = a3\n  7036: a3 = a2 >> 0x30\n  7039: u8 [a0 + 0xe] = a3\n  7042: a3 = a2 >> 0x28\n  7045: u8 [a0 + 0xd] = a3\n  7048: a3 = a2 >> 0x20\n  7051: u8 [a0 + 0xc] = a3\n  7054: a3 = a2 >> 0x18\n  7057: u8 [a0 + 0xb] = a3\n  7060: a3 = a2 >> 0x10\n  7063: u8 [a0 + 0xa] = a3\n  7066: a2 = a2 >> 0x8\n  7069: u8 [a0 + 0x9] = a2\n  7072: u8 [a0] = a1\n  7074: a2 = a1 >> 0x38\n  7077: u8 [a0 + 0x7] = a2\n  7080: a2 = a1 >> 0x30\n  7083: u8 [a0 + 0x6] = a2\n  7086: a2 = a1 >> 0x28\n  7089: u8 [a0 + 0x5] = a2\n  7092: a2 = a1 >> 0x20\n  7095: u8 [a0 + 0x4] = a2\n  7098: a2 = a1 >> 0x18\n  7101: u8 [a0 + 0x3] = a2\n  7104: a2 = a1 >> 0x10\n  7107: u8 [a0 + 0x2] = a2\n  7110: a1 = a1 >> 0x8\n  7113: u8 [a0 + 0x1] = a1\n  7116: a0 = u64 [sp + 0x18]\n  7119: a1 = u64 [sp + 0x38]\n  7122: u64 [a0] = a1\n  7124: a1 = u64 [sp + 0x28]\n  7127: u64 [a0 + 0x18] = a1\n  7130: a1 = u64 [sp + 0x10]\n  7133: u64 [a0 + 0x8] = a1\n  7136: a1 = u64 [sp + 0x30]\n  7139: u64 [a0 + 0x10] = a1\n  7142: sp = s0 + 0xffffffffffffff00\n  7146: ra = u64 [sp + 0xf8]\n  7150: s0 = u64 [sp + 0xf0]\n  7154: s1 = u64 [sp + 0xe8]\n  7158: sp = sp + 0x100\n  7162: ret\n      : @129 (gas: 8)\n  7164: u64 [sp + 112] = 0\n  7167: u64 [sp + 104] = 0\n  7170: u64 [sp + 96] = 0\n  7173: a0 = 0x4e487b7100000000\n  7183: a1 = sp + 0x60\n  7186: u64 [sp + 0x78] = a0\n  7189: a0 = 0\n  7191: ra = 92, jump @23\n      : @130 [@dyn 46] (gas: 7)\n  7196: u64 [sp + 88] = 0\n  7199: u64 [sp + 80] = 0\n  7202: u64 [sp + 64] = 0x41\n  7206: a0 = 0x4\n  7209: a1 = sp + 0x40\n  7212: u64 [sp + 72] = 0\n  7215: ra = 94, jump @23\n      : @131 [@dyn 47] (gas: 3)\n  7220: a1 = 0x24\n  7223: a0 = 0\n  7225: ra = 96, jump @0\n      : @132 [@dyn 48] (gas: 6)\n  7230: i32 a1 = a0 + 0\n  7232: a0 = 0x1\n  7235: a2 = 0x24\n  7238: ra = 0x62\n  7241: ecalli 7 // 'seal_return'\n  7243: fallthrough\n      : @133 [@dyn 49] (gas: 14)\n  7244: sp = sp + 0xffffffffffffff60\n  7248: u64 [sp + 0x98] = ra\n  7252: u64 [sp + 0x90] = s0\n  7256: u64 [sp + 0x88] = s1\n  7260: s0 = sp + 0xa0\n  7264: sp = sp & 0xfffffffffffffff0\n  7267: a3 = u64 [a2 + 0x10]\n  7270: a4 = u64 [a2 + 0x18]\n  7273: a5 = u64 [a2 + 0x8]\n  7276: a2 = u64 [a2]\n  7278: a4 = a4 | a5\n  7281: a2 = a2 | a3\n  7284: a2 = a2 | a4\n  7287: jump @136 if a2 != 0\n      : @134 (gas: 12)\n  7290: s1 = a0\n  7292: a2 = u64 [a1 + 0x18]\n  7295: a0 = u64 [a1 + 0x10]\n  7298: a3 = u64 [a1 + 0x8]\n  7301: a1 = u64 [a1]\n  7303: u64 [sp] = a1\n  7305: u64 [sp + 0x8] = a3\n  7308: u64 [sp + 0x10] = a0\n  7311: a0 = sp + 0x20\n  7314: a1 = sp\n  7316: u64 [sp + 0x18] = a2\n  7319: ra = 100, jump @123\n      : @135 [@dyn 50] (gas: 14)\n  7324: a0 = u64 [sp + 0x30]\n  7327: a1 = u64 [sp + 0x38]\n  7330: a2 = u64 [sp + 0x20]\n  7333: a3 = u64 [sp + 0x28]\n  7336: u64 [s1 + 0x10] = a0\n  7339: u64 [s1 + 0x18] = a1\n  7342: u64 [s1] = a2\n  7344: u64 [s1 + 0x8] = a3\n  7347: sp = s0 + 0xffffffffffffff60\n  7351: ra = u64 [sp + 0x98]\n  7355: s0 = u64 [sp + 0x90]\n  7359: s1 = u64 [sp + 0x88]\n  7363: sp = sp + 0xa0\n  7367: ret\n      : @136 (gas: 8)\n  7369: u64 [sp + 112] = 0\n  7372: u64 [sp + 104] = 0\n  7375: u64 [sp + 96] = 0\n  7378: a0 = 0x4e487b7100000000\n  7388: a1 = sp + 0x60\n  7391: u64 [sp + 0x78] = a0\n  7394: a0 = 0\n  7396: ra = 102, jump @23\n      : @137 [@dyn 51] (gas: 7)\n  7401: u64 [sp + 88] = 0\n  7404: u64 [sp + 80] = 0\n  7407: u64 [sp + 72] = 0\n  7410: a0 = 0x4\n  7413: a1 = sp + 0x40\n  7416: u64 [sp + 64] = 0\n  7419: ra = 104, jump @23\n      : @138 [@dyn 52] (gas: 3)\n  7424: a1 = 0x24\n  7427: a0 = 0\n  7429: ra = 106, jump @0\n      : @139 [@dyn 53] (gas: 6)\n  7434: i32 a1 = a0 + 0\n  7436: a0 = 0x1\n  7439: a2 = 0x24\n  7442: ra = 0x6c\n  7445: ecalli 7 // 'seal_return'\n  7447: fallthrough\n      : @140 [@dyn 54] (gas: 19)\n  7448: t0 = u64 [a0 + 0x18]\n  7451: t1 = u64 [a1 + 0x18]\n  7454: a4 = u64 [a0 + 0x10]\n  7457: a5 = u64 [a0 + 0x8]\n  7460: a2 = u64 [a1 + 0x8]\n  7463: t2 = u64 [a0]\n  7465: a3 = u64 [a1]\n  7467: a1 = u64 [a1 + 0x10]\n  7470: a0 = a2 ^ a5\n  7473: a2 = a2 <u a5\n  7476: a3 = a3 <u t2\n  7479: a3 = a2 if a0 != 0\n  7482: a0 = a1 - a4\n  7485: a0 = a0 <u a3\n  7488: a1 = a1 <u a4\n  7491: a2 = t1 - t0\n  7494: a2 = a2 - a1\n  7497: a2 = a2 - a0\n  7500: jump @142 if a2 <s 0\n      : @141 (gas: 1)\n  7503: ret\n      : @142 (gas: 5)\n  7505: sp = sp + 0xfffffffffffffff8\n  7508: u64 [sp] = ra\n  7510: a0 = 0\n  7512: a1 = 0\n  7514: ra = 110, jump @0\n      : @143 [@dyn 55] (gas: 6)\n  7519: i32 a1 = a0 + 0\n  7521: a0 = 0x1\n  7524: a2 = 0\n  7526: ra = 0x70\n  7529: ecalli 7 // 'seal_return'\n  7531: fallthrough\n      : @144 [@dyn 56] (gas: 236)\n  7532: sp = sp + 0xffffffffffffffa0\n  7535: u64 [sp + 0x58] = ra\n  7538: u64 [sp + 0x50] = s0\n  7541: u64 [sp + 0x48] = s1\n  7544: u64 [sp] = a0\n  7546: t0 = u64 [a1]\n  7548: t1 = u64 [a2]\n  7550: a0 = u64 [a2 + 0x8]\n  7553: a3 = u64 [a2 + 0x10]\n  7556: a4 = u64 [a1 + 0x18]\n  7559: s0 = u64 [a1 + 0x10]\n  7562: a2 = u64 [a2 + 0x18]\n  7565: a1 = u64 [a1 + 0x8]\n  7568: t2 = a4 >u 0\n  7570: s1 = s0 >u 0\n  7572: s1 = t2 if a4 != 0\n  7575: ra = a1 >u 0\n  7577: a5 = t0 <u 0x100\n  7581: t2 = a5 ^ 0x1\n  7584: t2 = ra if a1 != 0\n  7587: a4 = a4 | s0\n  7590: t2 = s1 if a4 != 0\n  7593: u8 [sp + 71] = 0\n  7596: u8 [sp + 70] = 0\n  7599: u8 [sp + 69] = 0\n  7602: u8 [sp + 68] = 0\n  7605: u8 [sp + 67] = 0\n  7608: u8 [sp + 66] = 0\n  7611: u8 [sp + 65] = 0\n  7614: u8 [sp + 64] = 0\n  7617: u8 [sp + 63] = 0\n  7620: u8 [sp + 62] = 0\n  7623: u8 [sp + 61] = 0\n  7626: u8 [sp + 60] = 0\n  7629: u8 [sp + 59] = 0\n  7632: u8 [sp + 58] = 0\n  7635: u8 [sp + 57] = 0\n  7638: u8 [sp + 56] = 0\n  7641: u8 [sp + 55] = 0\n  7644: u8 [sp + 54] = 0\n  7647: u8 [sp + 53] = 0\n  7650: u8 [sp + 52] = 0\n  7653: u8 [sp + 51] = 0\n  7656: u8 [sp + 50] = 0\n  7659: u8 [sp + 49] = 0\n  7662: u8 [sp + 48] = 0\n  7665: u8 [sp + 47] = 0\n  7668: u8 [sp + 46] = 0\n  7671: u8 [sp + 45] = 0\n  7674: u8 [sp + 44] = 0\n  7677: u8 [sp + 43] = 0\n  7680: u8 [sp + 42] = 0\n  7683: u8 [sp + 41] = 0\n  7686: u8 [sp + 40] = 0\n  7689: u8 [sp + 0x20] = a2\n  7692: u8 [sp + 0x18] = a3\n  7695: u8 [sp + 0x10] = a0\n  7698: u8 [sp + 0x8] = t1\n  7701: a1 = a2 >> 0x38\n  7704: u8 [sp + 0x27] = a1\n  7707: a1 = a2 >> 0x30\n  7710: u8 [sp + 0x26] = a1\n  7713: a1 = a2 >> 0x28\n  7716: u8 [sp + 0x25] = a1\n  7719: a1 = a2 >> 0x20\n  7722: u8 [sp + 0x24] = a1\n  7725: a1 = a2 >> 0x18\n  7728: u8 [sp + 0x23] = a1\n  7731: a1 = a2 >> 0x10\n  7734: u8 [sp + 0x22] = a1\n  7737: a2 = a2 >> 0x8\n  7740: u8 [sp + 0x21] = a2\n  7743: a1 = a3 >> 0x38\n  7746: u8 [sp + 0x1f] = a1\n  7749: a1 = a3 >> 0x30\n  7752: u8 [sp + 0x1e] = a1\n  7755: a1 = a3 >> 0x28\n  7758: u8 [sp + 0x1d] = a1\n  7761: a1 = a3 >> 0x20\n  7764: u8 [sp + 0x1c] = a1\n  7767: a1 = a3 >> 0x18\n  7770: u8 [sp + 0x1b] = a1\n  7773: a1 = a3 >> 0x10\n  7776: u8 [sp + 0x1a] = a1\n  7779: a3 = a3 >> 0x8\n  7782: u8 [sp + 0x19] = a3\n  7785: a1 = a0 >> 0x38\n  7788: u8 [sp + 0x17] = a1\n  7791: a1 = a0 >> 0x30\n  7794: u8 [sp + 0x16] = a1\n  7797: a1 = a0 >> 0x28\n  7800: u8 [sp + 0x15] = a1\n  7803: a1 = a0 >> 0x20\n  7806: u8 [sp + 0x14] = a1\n  7809: a1 = a0 >> 0x18\n  7812: u8 [sp + 0x13] = a1\n  7815: a1 = a0 >> 0x10\n  7818: u8 [sp + 0x12] = a1\n  7821: a0 = a0 >> 0x8\n  7824: u8 [sp + 0x11] = a0\n  7827: a0 = t1 >> 0x38\n  7830: u8 [sp + 0xf] = a0\n  7833: a0 = t1 >> 0x30\n  7836: u8 [sp + 0xe] = a0\n  7839: a0 = t1 >> 0x28\n  7842: u8 [sp + 0xd] = a0\n  7845: a0 = t1 >> 0x20\n  7848: u8 [sp + 0xc] = a0\n  7851: a0 = t1 >> 0x18\n  7854: u8 [sp + 0xb] = a0\n  7857: a0 = t1 >> 0x10\n  7860: u8 [sp + 0xa] = a0\n  7863: a0 = t1 >> 0x8\n  7866: u8 [sp + 0x9] = a0\n  7869: a0 = t0 << 0x38\n  7872: a0 = a0 >> 0x3b\n  7875: a2 = sp + 0x8\n  7878: a2 = a2 + a0\n  7881: a0 = u8 [a2 + 0x11]\n  7884: a1 = u8 [a2 + 0x10]\n  7887: a3 = u8 [a2 + 0x12]\n  7890: a4 = u8 [a2 + 0x13]\n  7893: a0 = a0 << 0x8\n  7896: a0 = a0 | a1\n  7899: a3 = a3 << 0x10\n  7902: a4 = a4 << 0x18\n  7905: a3 = a3 | a4\n  7908: a0 = a0 | a3\n  7911: a1 = u8 [a2 + 0x15]\n  7914: a3 = u8 [a2 + 0x14]\n  7917: a4 = u8 [a2 + 0x16]\n  7920: a5 = u8 [a2 + 0x17]\n  7923: a1 = a1 << 0x8\n  7926: a1 = a1 | a3\n  7929: a4 = a4 << 0x10\n  7932: a5 = a5 << 0x18\n  7935: a4 = a4 | a5\n  7938: a1 = a1 | a4\n  7941: a1 = a1 << 0x20\n  7944: ra = a1 | a0\n  7947: a3 = t0 & 0x7\n  7950: a1 = ra >> a3\n  7953: a0 = u8 [a2 + 0x19]\n  7956: a4 = u8 [a2 + 0x18]\n  7959: s1 = u8 [a2 + 0x1a]\n  7962: s0 = u8 [a2 + 0x1b]\n  7965: a0 = a0 << 0x8\n  7968: a0 = a0 | a4\n  7971: s1 = s1 << 0x10\n  7974: s0 = s0 << 0x18\n  7977: s0 = s0 | s1\n  7980: a0 = a0 | s0\n  7983: a4 = u8 [a2 + 0x1d]\n  7986: s1 = u8 [a2 + 0x1c]\n  7989: s0 = u8 [a2 + 0x1e]\n  7992: a5 = u8 [a2 + 0x1f]\n  7995: a4 = a4 << 0x8\n  7998: a4 = a4 | s1\n  8001: s0 = s0 << 0x10\n  8004: a5 = a5 << 0x18\n  8007: a5 = a5 | s0\n  8010: a4 = a4 | a5\n  8013: a4 = a4 << 0x20\n  8016: t0 = a4 | a0\n  8019: a0 = t0 << 0x1\n  8022: t1 = a3 ^ 0x3f\n  8025: a4 = a0 << t1\n  8028: a4 = a4 | a1\n  8031: a0 = u8 [a2 + 0x9]\n  8034: a1 = u8 [a2 + 0x8]\n  8037: a5 = u8 [a2 + 0xa]\n  8040: s0 = u8 [a2 + 0xb]\n  8043: a0 = a0 << 0x8\n  8046: a0 = a0 | a1\n  8049: a5 = a5 << 0x10\n  8052: s0 = s0 << 0x18\n  8055: a5 = a5 | s0\n  8058: a0 = a0 | a5\n  8061: a1 = u8 [a2 + 0xd]\n  8064: a5 = u8 [a2 + 0xc]\n  8067: s0 = u8 [a2 + 0xe]\n  8070: s1 = u8 [a2 + 0xf]\n  8073: a1 = a1 << 0x8\n  8076: a1 = a1 | a5\n  8079: s0 = s0 << 0x10\n  8082: s1 = s1 << 0x18\n  8085: s0 = s0 | s1\n  8088: a1 = a1 | s0\n  8091: a1 = a1 << 0x20\n  8094: a1 = a1 | a0\n  8097: a0 = a1 >> a3\n  8100: ra = ra << 0x1\n  8103: a5 = a3 ^ 0xffffffffffffffff\n  8106: a5 = ra << a5\n  8109: ra = a0 | a5\n  8112: a0 = u8 [a2 + 0x1]\n  8115: s0 = u8 [a2]\n  8117: s1 = u8 [a2 + 0x2]\n  8120: a5 = u8 [a2 + 0x3]\n  8123: a0 = a0 << 0x8\n  8126: a0 = a0 | s0\n  8129: s1 = s1 << 0x10\n  8132: a5 = a5 << 0x18\n  8135: a5 = a5 | s1\n  8138: a0 = a0 | a5\n  8141: a5 = u8 [a2 + 0x5]\n  8144: s0 = u8 [a2 + 0x4]\n  8147: s1 = u8 [a2 + 0x6]\n  8150: a2 = u8 [a2 + 0x7]\n  8153: a5 = a5 << 0x8\n  8156: a5 = a5 | s0\n  8159: s1 = s1 << 0x10\n  8162: a2 = a2 << 0x18\n  8165: a2 = a2 | s1\n  8168: a2 = a2 | a5\n  8171: a2 = a2 << 0x20\n  8174: a0 = a0 | a2\n  8177: a0 = a0 >> a3\n  8180: a1 = a1 << 0x1\n  8183: a1 = a1 << t1\n  8186: a0 = a0 | a1\n  8189: a1 = t0 >> a3\n  8192: a0 = 0 if t2 != 0\n  8194: ra = 0 if t2 != 0\n  8196: a4 = 0 if t2 != 0\n  8198: a1 = 0 if t2 != 0\n  8200: a2 = u64 [sp]\n  8202: u64 [a2 + 0x18] = a1\n  8205: u64 [a2 + 0x10] = a4\n  8208: u64 [a2 + 0x8] = ra\n  8211: u64 [a2] = a0\n  8213: ra = u64 [sp + 0x58]\n  8216: s0 = u64 [sp + 0x50]\n  8219: s1 = u64 [sp + 0x48]\n  8222: sp = sp + 0x60\n  8225: ret\n      : @145 (gas: 8)\n  8227: a0 = u64 [sp + 0x30]\n  8230: a1 = u64 [sp + 0x38]\n  8233: a2 = u64 [sp + 0x28]\n  8236: a3 = u64 [sp + 0x20]\n  8239: a1 = a1 | a2\n  8242: a0 = a0 | a3\n  8245: a0 = a0 | a1\n  8248: jump @150 if a0 != 0\n      : @146 (gas: 2)\n  8252: a0 = i32 [0x20024]\n  8257: jump @150 if a0 <=u 3\n      : @147 (gas: 20)\n  8262: u64 [sp + 88] = 0\n  8265: u64 [sp + 80] = 0\n  8268: u64 [sp + 72] = 0\n  8271: u64 [sp + 64] = 0x1\n  8275: u64 [sp + 120] = 0\n  8278: u64 [sp + 112] = 0\n  8281: u64 [sp + 104] = 0\n  8284: u64 [sp + 96] = 0\n  8287: u32 [sp + 128] = 0x20\n  8292: i32 a1 = sp + 0x40\n  8295: i32 a3 = sp + 0x60\n  8298: i32 a4 = sp + 0x80\n  8302: a2 = 0xffffffffffffffff\n  8305: a0 = 0\n  8307: ecalli 5 // 'get_storage'\n  8309: a0 = u64 [sp + 0x60]\n  8312: u64 [sp + 0x18] = a0\n  8315: a0 = 0x40\n  8318: a1 = 0x20\n  8321: ra = 114, jump @0\n      : @148 [@dyn 57] (gas: 100)\n  8326: a1 = u8 [a0 + 0x11]\n  8329: a2 = u8 [a0 + 0x10]\n  8332: a3 = u8 [a0 + 0x12]\n  8335: a4 = u8 [a0 + 0x13]\n  8338: a1 = a1 << 0x8\n  8341: a1 = a1 | a2\n  8344: a3 = a3 << 0x10\n  8347: a4 = a4 << 0x18\n  8350: a3 = a3 | a4\n  8353: a1 = a1 | a3\n  8356: a2 = u8 [a0 + 0x15]\n  8359: a3 = u8 [a0 + 0x14]\n  8362: a4 = u8 [a0 + 0x16]\n  8365: a5 = u8 [a0 + 0x17]\n  8368: a2 = a2 << 0x8\n  8371: a2 = a2 | a3\n  8374: a4 = a4 << 0x10\n  8377: a5 = a5 << 0x18\n  8380: a4 = a4 | a5\n  8383: a2 = a2 | a4\n  8386: a2 = a2 << 0x20\n  8389: t0 = a2 | a1\n  8392: a2 = u8 [a0 + 0x1]\n  8395: a3 = u8 [a0]\n  8397: a4 = u8 [a0 + 0x2]\n  8400: a5 = u8 [a0 + 0x3]\n  8403: a2 = a2 << 0x8\n  8406: a2 = a2 | a3\n  8409: a4 = a4 << 0x10\n  8412: a5 = a5 << 0x18\n  8415: a4 = a4 | a5\n  8418: a2 = a2 | a4\n  8421: a3 = u8 [a0 + 0x5]\n  8424: a4 = u8 [a0 + 0x4]\n  8427: a5 = u8 [a0 + 0x6]\n  8430: s1 = u8 [a0 + 0x7]\n  8433: a3 = a3 << 0x8\n  8436: a3 = a3 | a4\n  8439: a5 = a5 << 0x10\n  8442: s1 = s1 << 0x18\n  8445: a5 = a5 | s1\n  8448: a3 = a3 | a5\n  8451: a3 = a3 << 0x20\n  8454: a2 = a2 | a3\n  8457: a3 = u8 [a0 + 0x19]\n  8460: a4 = u8 [a0 + 0x18]\n  8463: a5 = u8 [a0 + 0x1a]\n  8466: s1 = u8 [a0 + 0x1b]\n  8469: a3 = a3 << 0x8\n  8472: a3 = a3 | a4\n  8475: a5 = a5 << 0x10\n  8478: s1 = s1 << 0x18\n  8481: a5 = a5 | s1\n  8484: a3 = a3 | a5\n  8487: a4 = u8 [a0 + 0x1d]\n  8490: a5 = u8 [a0 + 0x1c]\n  8493: s1 = u8 [a0 + 0x1e]\n  8496: a1 = u8 [a0 + 0x1f]\n  8499: a4 = a4 << 0x8\n  8502: a4 = a4 | a5\n  8505: s1 = s1 << 0x10\n  8508: a1 = a1 << 0x18\n  8511: a1 = a1 | s1\n  8514: a1 = a1 | a4\n  8517: a1 = a1 << 0x20\n  8520: a3 = a3 | a1\n  8523: a1 = u8 [a0 + 0x9]\n  8526: a4 = u8 [a0 + 0x8]\n  8529: a5 = u8 [a0 + 0xa]\n  8532: s1 = u8 [a0 + 0xb]\n  8535: a1 = a1 << 0x8\n  8538: a1 = a1 | a4\n  8541: a5 = a5 << 0x10\n  8544: s1 = s1 << 0x18\n  8547: a5 = a5 | s1\n  8550: a1 = a1 | a5\n  8553: a4 = u8 [a0 + 0xd]\n  8556: a5 = u8 [a0 + 0xc]\n  8559: s1 = u8 [a0 + 0xe]\n  8562: a0 = u8 [a0 + 0xf]\n  8565: a4 = a4 << 0x8\n  8568: a4 = a4 | a5\n  8571: s1 = s1 << 0x10\n  8574: a0 = a0 << 0x18\n  8577: a0 = a0 | s1\n  8580: a0 = a0 | a4\n  8583: a0 = a0 << 0x20\n  8586: a0 = a0 | a1\n  8589: a1 = reverse a0\n  8591: a0 = reverse a3\n  8593: a2 = reverse a2\n  8595: a3 = reverse t0\n  8597: a2 = a2 | a3\n  8600: a3 = a0 | a1\n  8603: a3 = a3 | a2\n  8606: a3 = a3 >> 0x20\n  8609: a1 = a1 | a2\n  8612: a1 = a1 << 0x20\n  8615: a1 = a1 | a3\n  8618: jump @152 if a1 == 0\n      : @149 (gas: 1)\n  8621: trap\n      : @150 (gas: 3)\n  8622: a0 = 0\n  8624: a1 = 0\n  8626: ra = 116, jump @0\n      : @151 [@dyn 58] (gas: 5)\n  8631: i32 a1 = a0 + 0\n  8633: a0 = 0x1\n  8636: a2 = 0\n  8638: ecalli 7 // 'seal_return'\n  8640: fallthrough\n      : @152 (gas: 4)\n  8641: i32 s1 = a0 + 0\n  8643: a1 = 0x20\n  8646: a0 = s1\n  8648: ra = 118, jump @0\n      : @153 [@dyn 59] (gas: 44)\n  8653: a1 = u64 [sp + 0x18]\n  8656: a1 = reverse a1\n  8658: a2 = a1 >> 0x38\n  8661: u8 [a0 + 0x1f] = a2\n  8664: a2 = a1 >> 0x30\n  8667: u8 [a0 + 0x1e] = a2\n  8670: a2 = a1 >> 0x28\n  8673: u8 [a0 + 0x1d] = a2\n  8676: a2 = a1 >> 0x20\n  8679: u8 [a0 + 0x1c] = a2\n  8682: a2 = a1 >> 0x18\n  8685: u8 [a0 + 0x1b] = a2\n  8688: a2 = a1 >> 0x10\n  8691: u8 [a0 + 0x1a] = a2\n  8694: a2 = a1 >> 0x8\n  8697: u8 [a0 + 0x19] = a2\n  8700: u8 [a0 + 0x18] = a1\n  8703: u8 [a0 + 23] = 0\n  8706: u8 [a0 + 22] = 0\n  8709: u8 [a0 + 21] = 0\n  8712: u8 [a0 + 20] = 0\n  8715: u8 [a0 + 19] = 0\n  8718: u8 [a0 + 18] = 0\n  8721: u8 [a0 + 17] = 0\n  8724: u8 [a0 + 16] = 0\n  8727: u8 [a0 + 15] = 0\n  8730: u8 [a0 + 14] = 0\n  8733: u8 [a0 + 13] = 0\n  8736: u8 [a0 + 12] = 0\n  8739: u8 [a0 + 11] = 0\n  8742: u8 [a0 + 10] = 0\n  8745: u8 [a0 + 9] = 0\n  8748: u8 [a0 + 8] = 0\n  8751: u8 [a0 + 7] = 0\n  8754: u8 [a0 + 6] = 0\n  8757: u8 [a0 + 5] = 0\n  8760: u8 [a0 + 4] = 0\n  8763: u8 [a0 + 3] = 0\n  8766: u8 [a0 + 2] = 0\n  8769: u8 [a0 + 1] = 0\n  8772: u8 [a0 + 0] = 0\n  8774: a1 = 0x20\n  8777: a0 = s1\n  8779: ra = 120, jump @0\n      : @154 [@dyn 60] (gas: 6)\n  8784: i32 a1 = a0 + 0\n  8786: a2 = 0x20\n  8789: a0 = 0\n  8791: ra = 0x7a\n  8794: ecalli 7 // 'seal_return'\n  8796: fallthrough\n      : @155 [@dyn 61] (gas: 5)\n  8797: sp = sp + 0xfffffffffffffff8\n  8800: u64 [sp] = ra\n  8802: a0 = 0\n  8804: a1 = 0\n  8806: ra = 124, jump @0\n      : @156 [@dyn 62] (gas: 6)\n  8811: i32 a1 = a0 + 0\n  8813: a0 = 0x1\n  8816: a2 = 0\n  8818: ra = 0x7e\n  8821: ecalli 7 // 'seal_return'\n  8823: fallthrough\n      : @157 [@dyn 63] (gas: 18)\n  8824: sp = sp + 0xffffffffffffff60\n  8828: u64 [sp + 0x98] = ra\n  8832: u64 [sp + 0x90] = s0\n  8836: u64 [sp + 0x88] = s1\n  8840: s0 = sp + 0xa0\n  8844: sp = sp & 0xfffffffffffffff0\n  8847: a2 = u64 [a1 + 0x18]\n  8850: u64 [sp + 0x30] = a2\n  8853: a2 = u64 [a1 + 0x10]\n  8856: u64 [sp + 0x28] = a2\n  8859: a2 = u64 [a1 + 0x8]\n  8862: u64 [sp + 0x20] = a2\n  8865: a1 = u64 [a1]\n  8867: u64 [sp + 0x18] = a1\n  8870: u64 [sp + 0x38] = a0\n  8873: a0 = 0x40\n  8876: a1 = 0x20\n  8879: ra = 128, jump @0\n      : @158 [@dyn 64] (gas: 130)\n  8885: a1 = u8 [a0 + 0x19]\n  8888: a2 = u8 [a0 + 0x18]\n  8891: a3 = u8 [a0 + 0x1a]\n  8894: a4 = u8 [a0 + 0x1b]\n  8897: a1 = a1 << 0x8\n  8900: a1 = a1 | a2\n  8903: a3 = a3 << 0x10\n  8906: a4 = a4 << 0x18\n  8909: a3 = a3 | a4\n  8912: a1 = a1 | a3\n  8915: a2 = u8 [a0 + 0x1d]\n  8918: a3 = u8 [a0 + 0x1c]\n  8921: a4 = u8 [a0 + 0x1e]\n  8924: a5 = u8 [a0 + 0x1f]\n  8927: a2 = a2 << 0x8\n  8930: a2 = a2 | a3\n  8933: a4 = a4 << 0x10\n  8936: a5 = a5 << 0x18\n  8939: a4 = a4 | a5\n  8942: a2 = a2 | a4\n  8945: a2 = a2 << 0x20\n  8948: t0 = a2 | a1\n  8951: a2 = u8 [a0 + 0x11]\n  8954: a3 = u8 [a0 + 0x10]\n  8957: a4 = u8 [a0 + 0x12]\n  8960: a5 = u8 [a0 + 0x13]\n  8963: a2 = a2 << 0x8\n  8966: a2 = a2 | a3\n  8969: a4 = a4 << 0x10\n  8972: a5 = a5 << 0x18\n  8975: a4 = a4 | a5\n  8978: a2 = a2 | a4\n  8981: a3 = u8 [a0 + 0x15]\n  8984: a4 = u8 [a0 + 0x14]\n  8987: a5 = u8 [a0 + 0x16]\n  8990: s1 = u8 [a0 + 0x17]\n  8993: a3 = a3 << 0x8\n  8996: a3 = a3 | a4\n  8999: a5 = a5 << 0x10\n  9002: s1 = s1 << 0x18\n  9005: a5 = a5 | s1\n  9008: a3 = a3 | a5\n  9011: a3 = a3 << 0x20\n  9014: a2 = a2 | a3\n  9017: a3 = u8 [a0 + 0x9]\n  9020: a4 = u8 [a0 + 0x8]\n  9023: a5 = u8 [a0 + 0xa]\n  9026: s1 = u8 [a0 + 0xb]\n  9029: a3 = a3 << 0x8\n  9032: a3 = a3 | a4\n  9035: a5 = a5 << 0x10\n  9038: s1 = s1 << 0x18\n  9041: a5 = a5 | s1\n  9044: a3 = a3 | a5\n  9047: a4 = u8 [a0 + 0xd]\n  9050: a5 = u8 [a0 + 0xc]\n  9053: s1 = u8 [a0 + 0xe]\n  9056: a1 = u8 [a0 + 0xf]\n  9059: a4 = a4 << 0x8\n  9062: a4 = a4 | a5\n  9065: s1 = s1 << 0x10\n  9068: a1 = a1 << 0x18\n  9071: a1 = a1 | s1\n  9074: a1 = a1 | a4\n  9077: a1 = a1 << 0x20\n  9080: a3 = a3 | a1\n  9083: a1 = u8 [a0 + 0x1]\n  9086: a4 = u8 [a0]\n  9088: a5 = u8 [a0 + 0x2]\n  9091: s1 = u8 [a0 + 0x3]\n  9094: a1 = a1 << 0x8\n  9097: a1 = a1 | a4\n  9100: a5 = a5 << 0x10\n  9103: s1 = s1 << 0x18\n  9106: a5 = a5 | s1\n  9109: a1 = a1 | a5\n  9112: a4 = u8 [a0 + 0x5]\n  9115: a5 = u8 [a0 + 0x4]\n  9118: s1 = u8 [a0 + 0x6]\n  9121: a0 = u8 [a0 + 0x7]\n  9124: a4 = a4 << 0x8\n  9127: a4 = a4 | a5\n  9130: s1 = s1 << 0x10\n  9133: a0 = a0 << 0x18\n  9136: a0 = a0 | s1\n  9139: a0 = a0 | a4\n  9142: a0 = a0 << 0x20\n  9145: a0 = a0 | a1\n  9148: t1 = reverse a0\n  9150: t2 = reverse a3\n  9152: s1 = reverse a2\n  9154: a5 = reverse t0\n  9156: a1 = u64 [sp + 0x18]\n  9159: a0 = a1 + 0x1f\n  9162: a1 = a0 <u a1\n  9165: a3 = u64 [sp + 0x20]\n  9168: a2 = a3 + a1\n  9171: a3 = a2 <u a3\n  9174: a3 = a1 if a1 == 0\n  9177: a1 = u64 [sp + 0x28]\n  9180: a3 = a3 + a1\n  9183: a1 = a3 <u a1\n  9186: a4 = u64 [sp + 0x30]\n  9189: a1 = a1 + a4\n  9192: a0 = a0 & 0xffffffffffffffe0\n  9195: a0 = a0 + a5\n  9198: u64 [sp + 0x28] = a5\n  9201: u64 [sp + 0x10] = a0\n  9204: a4 = a0 <u a5\n  9207: a2 = a2 + s1\n  9210: a5 = a2 + a4\n  9213: a2 = a5 ^ s1\n  9216: u64 [sp + 0x30] = s1\n  9219: a0 = a5 <u s1\n  9222: a0 = a4 if a2 == 0\n  9225: a3 = a3 + t2\n  9228: a4 = a3 + a0\n  9231: s1 = a4 <u a3\n  9234: a2 = a3 <u t2\n  9237: a1 = a1 + t1\n  9240: a1 = a1 + a2\n  9243: s1 = s1 + a1\n  9246: a1 = a4 >u 0\n  9248: a2 = s1 >u 0\n  9250: a2 = a1 if s1 == 0\n  9253: a1 = a4 | s1\n  9256: u64 [sp + 0x8] = a5\n  9259: a3 = a5 >u 0\n  9261: a3 = a2 if a1 != 0\n  9264: jump @162 if a3 != 0\n      : @159 (gas: 8)\n  9268: a1 = a4 <u t2\n  9271: a2 = s1 ^ t1\n  9274: a3 = s1 <u t1\n  9277: a3 = a1 if a2 == 0\n  9280: a1 = a4 ^ t2\n  9283: a1 = a1 | a2\n  9286: a0 = a3 if a1 != 0\n  9289: jump @162 if a0 != 0\n      : @160 (gas: 6)\n  9293: a0 = 0x40\n  9296: a1 = 0x20\n  9299: u64 [sp + 0x20] = t2\n  9302: u64 [sp + 0x18] = t1\n  9305: u64 [sp] = a4\n  9307: ra = 130, jump @0\n      : @161 [@dyn 65] (gas: 82)\n  9313: a1 = reverse s1\n  9315: a2 = u64 [sp]\n  9317: a2 = reverse a2\n  9319: a3 = u64 [sp + 0x8]\n  9322: a3 = reverse a3\n  9324: a4 = u64 [sp + 0x10]\n  9327: a4 = reverse a4\n  9329: u8 [a0 + 0x18] = a4\n  9332: a5 = a4 >> 0x38\n  9335: u8 [a0 + 0x1f] = a5\n  9338: a5 = a4 >> 0x30\n  9341: u8 [a0 + 0x1e] = a5\n  9344: a5 = a4 >> 0x28\n  9347: u8 [a0 + 0x1d] = a5\n  9350: a5 = a4 >> 0x20\n  9353: u8 [a0 + 0x1c] = a5\n  9356: a5 = a4 >> 0x18\n  9359: u8 [a0 + 0x1b] = a5\n  9362: a5 = a4 >> 0x10\n  9365: u8 [a0 + 0x1a] = a5\n  9368: a4 = a4 >> 0x8\n  9371: u8 [a0 + 0x19] = a4\n  9374: u8 [a0 + 0x10] = a3\n  9377: a4 = a3 >> 0x38\n  9380: u8 [a0 + 0x17] = a4\n  9383: a4 = a3 >> 0x30\n  9386: u8 [a0 + 0x16] = a4\n  9389: a4 = a3 >> 0x28\n  9392: u8 [a0 + 0x15] = a4\n  9395: a4 = a3 >> 0x20\n  9398: u8 [a0 + 0x14] = a4\n  9401: a4 = a3 >> 0x18\n  9404: u8 [a0 + 0x13] = a4\n  9407: a4 = a3 >> 0x10\n  9410: u8 [a0 + 0x12] = a4\n  9413: a3 = a3 >> 0x8\n  9416: u8 [a0 + 0x11] = a3\n  9419: u8 [a0 + 0x8] = a2\n  9422: a3 = a2 >> 0x38\n  9425: u8 [a0 + 0xf] = a3\n  9428: a3 = a2 >> 0x30\n  9431: u8 [a0 + 0xe] = a3\n  9434: a3 = a2 >> 0x28\n  9437: u8 [a0 + 0xd] = a3\n  9440: a3 = a2 >> 0x20\n  9443: u8 [a0 + 0xc] = a3\n  9446: a3 = a2 >> 0x18\n  9449: u8 [a0 + 0xb] = a3\n  9452: a3 = a2 >> 0x10\n  9455: u8 [a0 + 0xa] = a3\n  9458: a2 = a2 >> 0x8\n  9461: u8 [a0 + 0x9] = a2\n  9464: u8 [a0] = a1\n  9466: a2 = a1 >> 0x38\n  9469: u8 [a0 + 0x7] = a2\n  9472: a2 = a1 >> 0x30\n  9475: u8 [a0 + 0x6] = a2\n  9478: a2 = a1 >> 0x28\n  9481: u8 [a0 + 0x5] = a2\n  9484: a2 = a1 >> 0x20\n  9487: u8 [a0 + 0x4] = a2\n  9490: a2 = a1 >> 0x18\n  9493: u8 [a0 + 0x3] = a2\n  9496: a2 = a1 >> 0x10\n  9499: u8 [a0 + 0x2] = a2\n  9502: a1 = a1 >> 0x8\n  9505: u8 [a0 + 0x1] = a1\n  9508: a0 = u64 [sp + 0x38]\n  9511: a1 = u64 [sp + 0x28]\n  9514: u64 [a0] = a1\n  9516: a1 = u64 [sp + 0x18]\n  9519: u64 [a0 + 0x18] = a1\n  9522: a1 = u64 [sp + 0x30]\n  9525: u64 [a0 + 0x8] = a1\n  9528: a1 = u64 [sp + 0x20]\n  9531: u64 [a0 + 0x10] = a1\n  9534: sp = s0 + 0xffffffffffffff60\n  9538: ra = u64 [sp + 0x98]\n  9542: s0 = u64 [sp + 0x90]\n  9546: s1 = u64 [sp + 0x88]\n  9550: sp = sp + 0xa0\n  9554: ret\n      : @162 (gas: 8)\n  9556: u64 [sp + 112] = 0\n  9559: u64 [sp + 104] = 0\n  9562: u64 [sp + 96] = 0\n  9565: a0 = 0x4e487b7100000000\n  9575: a1 = sp + 0x60\n  9578: u64 [sp + 0x78] = a0\n  9581: a0 = 0\n  9583: ra = 132, jump @23\n      : @163 [@dyn 66] (gas: 7)\n  9589: u64 [sp + 88] = 0\n  9592: u64 [sp + 80] = 0\n  9595: u64 [sp + 64] = 0x41\n  9599: a0 = 0x4\n  9602: a1 = sp + 0x40\n  9605: u64 [sp + 72] = 0\n  9608: ra = 134, jump @23\n      : @164 [@dyn 67] (gas: 3)\n  9614: a1 = 0x24\n  9617: a0 = 0\n  9619: ra = 136, jump @0\n      : @165 [@dyn 68] (gas: 6)\n  9625: i32 a1 = a0 + 0\n  9627: a0 = 0x1\n  9630: a2 = 0x24\n  9633: ra = 0x8a\n  9637: ecalli 7 // 'seal_return'\n  9639: fallthrough\n      : @166 [@dyn 69] (gas: 7)\n  9640: a3 = u64 [a1 + 0x18]\n  9643: a4 = u64 [a1 + 0x10]\n  9646: a2 = u64 [a1 + 0x8]\n  9649: a3 = a3 | a4\n  9652: a4 = a2 <u 0x1\n  9655: a4 = 0 if a3 != 0\n  9657: jump @168 if a4 == 0\n      : @167 (gas: 16)\n  9660: a1 = u64 [a1]\n  9662: a3 = a1 + 0x1f\n  9665: a1 = a3 <u a1\n  9668: a1 = a1 + a2\n  9671: a1 = a1 & 0x1\n  9674: a3 = a3 & 0xffffffffffffffe0\n  9677: a2 = a3 + 0x20\n  9680: a3 = a2 <u a3\n  9683: a4 = a1 + a3\n  9686: a1 = a4 <u a1\n  9689: a1 = a3 if a3 == 0\n  9692: u64 [a0 + 24] = 0\n  9695: u64 [a0] = a2\n  9697: u64 [a0 + 0x8] = a4\n  9700: u64 [a0 + 0x10] = a1\n  9703: ret\n      : @168 (gas: 13)\n  9705: sp = sp + 0xffffffffffffffb0\n  9708: u64 [sp + 0x48] = ra\n  9711: u64 [sp + 0x40] = s0\n  9714: s0 = sp + 0x50\n  9717: sp = sp & 0xfffffffffffffff0\n  9720: u64 [sp + 48] = 0\n  9723: u64 [sp + 40] = 0\n  9726: u64 [sp + 32] = 0\n  9729: a0 = 0x4e487b7100000000\n  9739: a1 = sp + 0x20\n  9742: u64 [sp + 0x38] = a0\n  9745: a0 = 0\n  9747: ra = 140, jump @23\n      : @169 [@dyn 70] (gas: 7)\n  9753: u64 [sp + 24] = 0\n  9756: u64 [sp + 16] = 0\n  9759: u64 [sp + 0] = 0x41\n  9762: a0 = 0x4\n  9765: a1 = sp\n  9767: u64 [sp + 8] = 0\n  9770: ra = 142, jump @23\n      : @170 [@dyn 71] (gas: 3)\n  9776: a1 = 0x24\n  9779: a0 = 0\n  9781: ra = 144, jump @0\n      : @171 [@dyn 72] (gas: 6)\n  9787: i32 a1 = a0 + 0\n  9789: a0 = 0x1\n  9792: a2 = 0x24\n  9795: ra = 0x92\n  9799: ecalli 7 // 'seal_return'\n  9801: fallthrough\n      : @172 [@dyn 73] (gas: 16)\n  9802: sp = sp + 0xffffffffffffffa8\n  9805: u64 [sp + 0x50] = ra\n  9808: u64 [sp + 0x48] = s0\n  9811: u64 [sp + 0x40] = s1\n  9814: a3 = u64 [a0 + 0x10]\n  9817: a4 = u64 [a0 + 0x18]\n  9820: a5 = u64 [a0 + 0x8]\n  9823: a0 = u64 [a0]\n  9825: a4 = a4 | a5\n  9828: a5 = a0 | a3\n  9831: a5 = a5 | a4\n  9834: a5 = a5 >> 0x20\n  9837: a3 = a3 | a4\n  9840: a3 = a3 << 0x20\n  9843: a3 = a3 | a5\n  9846: jump @180 if a3 != 0\n      : @173 (gas: 12)\n  9850: a4 = u64 [a2 + 0x18]\n  9853: a5 = u64 [a2 + 0x10]\n  9856: s0 = u64 [a2]\n  9858: s1 = u64 [a2 + 0x8]\n  9861: a2 = s0 | a5\n  9864: a3 = s1 | a4\n  9867: a2 = a2 | a3\n  9870: a2 = a2 >> 0x20\n  9873: a3 = a3 | a5\n  9876: a3 = a3 << 0x20\n  9879: a2 = a2 | a3\n  9882: jump @180 if a2 != 0\n      : @174 (gas: 18)\n  9886: u64 [sp + 0x28] = s1\n  9889: u64 [sp + 0x30] = a5\n  9892: u64 [sp + 0x38] = a4\n  9895: a2 = u64 [a1 + 0x18]\n  9898: a3 = u64 [a1 + 0x10]\n  9901: a5 = u64 [a1]\n  9903: a4 = u64 [a1 + 0x8]\n  9906: a1 = a5 | a3\n  9909: u64 [sp + 0x20] = a2\n  9912: u64 [sp + 0x10] = a4\n  9915: a2 = a2 | a4\n  9918: a1 = a1 | a2\n  9921: a1 = a1 >> 0x20\n  9924: u64 [sp + 0x18] = a3\n  9927: a2 = a2 | a3\n  9930: a2 = a2 << 0x20\n  9933: a1 = a1 | a2\n  9936: jump @180 if a1 != 0\n      : @175 (gas: 7)\n  9940: i32 a0 = a0 + 0\n  9942: u64 [sp + 0x8] = a0\n  9945: i32 a0 = a5 + 0\n  9947: i32 s1 = s0 + 0\n  9949: a1 = s1\n  9951: u64 [sp] = a5\n  9953: ra = 148, jump @0\n      : @176 [@dyn 74] (gas: 5)\n  9959: i32 a0 = a0 + 0\n  9961: a1 = s1\n  9963: a2 = u64 [sp + 0x8]\n  9966: ecalli 0 // 'call_data_copy'\n  9967: fallthrough\n      : @177 (gas: 29)\n  9968: a0 = u64 [sp]\n  9970: a0 = a0 + s0\n  9973: a1 = a0 <u s0\n  9976: a4 = u64 [sp + 0x28]\n  9979: a2 = u64 [sp + 0x10]\n  9982: a2 = a2 + a4\n  9985: a2 = a2 + a1\n  9988: a3 = a2 ^ a4\n  9991: a4 = a2 <u a4\n  9994: a4 = a1 if a3 == 0\n  9997: a5 = u64 [sp + 0x30]\n 10000: a1 = u64 [sp + 0x18]\n 10003: a1 = a1 + a5\n 10006: a4 = a4 + a1\n 10009: a3 = a4 <u a1\n 10012: a1 = a1 <u a5\n 10015: a5 = u64 [sp + 0x38]\n 10018: s1 = u64 [sp + 0x20]\n 10021: a5 = a5 + s1\n 10024: a1 = a1 + a5\n 10027: a1 = a1 + a3\n 10030: a3 = a0 | a4\n 10033: a1 = a1 | a2\n 10036: a3 = a3 | a1\n 10039: a3 = a3 >> 0x20\n 10042: a1 = a1 | a4\n 10045: a1 = a1 << 0x20\n 10048: a1 = a1 | a3\n 10051: jump @180 if a1 != 0\n      : @178 (gas: 3)\n 10054: i32 a0 = a0 + 0\n 10056: a1 = 0x20\n 10059: ra = 150, jump @0\n      : @179 [@dyn 75] (gas: 37)\n 10065: u8 [a0 + 31] = 0\n 10068: u8 [a0 + 30] = 0\n 10071: u8 [a0 + 29] = 0\n 10074: u8 [a0 + 28] = 0\n 10077: u8 [a0 + 27] = 0\n 10080: u8 [a0 + 26] = 0\n 10083: u8 [a0 + 25] = 0\n 10086: u8 [a0 + 24] = 0\n 10089: u8 [a0 + 23] = 0\n 10092: u8 [a0 + 22] = 0\n 10095: u8 [a0 + 21] = 0\n 10098: u8 [a0 + 20] = 0\n 10101: u8 [a0 + 19] = 0\n 10104: u8 [a0 + 18] = 0\n 10107: u8 [a0 + 17] = 0\n 10110: u8 [a0 + 16] = 0\n 10113: u8 [a0 + 15] = 0\n 10116: u8 [a0 + 14] = 0\n 10119: u8 [a0 + 13] = 0\n 10122: u8 [a0 + 12] = 0\n 10125: u8 [a0 + 11] = 0\n 10128: u8 [a0 + 10] = 0\n 10131: u8 [a0 + 9] = 0\n 10134: u8 [a0 + 8] = 0\n 10137: u8 [a0 + 7] = 0\n 10140: u8 [a0 + 6] = 0\n 10143: u8 [a0 + 5] = 0\n 10146: u8 [a0 + 4] = 0\n 10149: u8 [a0 + 3] = 0\n 10152: u8 [a0 + 2] = 0\n 10155: u8 [a0 + 1] = 0\n 10158: u8 [a0 + 0] = 0\n 10160: ra = u64 [sp + 0x50]\n 10163: s0 = u64 [sp + 0x48]\n 10166: s1 = u64 [sp + 0x40]\n 10169: sp = sp + 0x58\n 10172: ret\n      : @180 (gas: 1)\n 10174: trap\n      : @181 (gas: 16)\n 10175: sp = sp + 0xfffffffffffffee0\n 10179: u64 [sp + 0x118] = ra\n 10183: u64 [sp + 0x110] = s0\n 10187: u64 [sp + 0x108] = s1\n 10191: s0 = sp + 0x120\n 10195: sp = sp & 0xfffffffffffffff0\n 10198: a4 = u64 [a2 + 0x18]\n 10201: a5 = u64 [a2 + 0x10]\n 10204: s1 = u64 [a2 + 0x8]\n 10207: u64 [sp + 0x50] = a4\n 10210: u64 [sp + 0x48] = a5\n 10213: a4 = a4 | a5\n 10216: a5 = s1 <u 0x1\n 10219: a5 = 0 if a4 != 0\n 10221: u64 [sp] = a0\n 10223: jump @195 if a5 == 0\n      : @182 (gas: 35)\n 10227: a0 = u64 [a3 + 0x18]\n 10230: u64 [sp + 0x18] = a0\n 10233: a0 = u64 [a3 + 0x10]\n 10236: u64 [sp + 0x20] = a0\n 10239: a0 = u64 [a3 + 0x8]\n 10242: u64 [sp + 0x8] = a0\n 10245: a0 = u64 [a3]\n 10247: u64 [sp + 0x10] = a0\n 10250: a2 = u64 [a2]\n 10252: a0 = u64 [a1 + 0x18]\n 10255: u64 [sp + 0x70] = a0\n 10258: a0 = u64 [a1 + 0x10]\n 10261: u64 [sp + 0x78] = a0\n 10264: a0 = u64 [a1 + 0x8]\n 10267: u64 [sp + 0x68] = a0\n 10270: a0 = u64 [a1]\n 10272: u64 [sp + 0x60] = a0\n 10275: a0 = a2 + 0x1f\n 10278: u64 [sp + 0x40] = a2\n 10281: a1 = a0 <u a2\n 10284: a1 = a1 + s1\n 10287: a1 = a1 & 0x1\n 10290: a0 = a0 & 0xffffffffffffffe0\n 10293: a2 = a0 + 0x20\n 10296: a0 = a2 <u a0\n 10299: a3 = a1 + a0\n 10302: a4 = a3 <u a1\n 10305: a4 = a0 if a0 == 0\n 10308: u64 [sp + 216] = 0\n 10312: u64 [sp + 0xc0] = a2\n 10316: u64 [sp + 0xc8] = a3\n 10320: a0 = sp + 0xe0\n 10324: a1 = sp + 0xc0\n 10328: u64 [sp + 0xd0] = a4\n 10332: ra = 152, jump @157\n      : @183 [@dyn 76] (gas: 15)\n 10338: a0 = u64 [sp + 0xf8]\n 10342: a2 = u64 [sp + 0xf0]\n 10346: a1 = u64 [sp + 0xe8]\n 10350: a3 = u64 [sp + 0xe0]\n 10354: u64 [sp + 0x58] = a0\n 10357: u64 [sp + 0x30] = a1\n 10360: a0 = a0 | a1\n 10363: a1 = a3 | a2\n 10366: a1 = a1 | a0\n 10369: a1 = a1 >> 0x20\n 10372: u64 [sp + 0x38] = a2\n 10375: a0 = a0 | a2\n 10378: a0 = a0 << 0x20\n 10381: a0 = a0 | a1\n 10384: jump @194 if a0 != 0\n      : @184 (gas: 4)\n 10388: u64 [sp + 0x28] = a3\n 10391: i32 a0 = a3 + 0\n 10393: a1 = 0x20\n 10396: ra = 154, jump @0\n      : @185 [@dyn 77] (gas: 102)\n 10402: t2 = u64 [sp + 0x40]\n 10405: a1 = u64 [sp + 0x60]\n 10408: a1 = a1 + t2\n 10411: a3 = a1 <u t2\n 10414: a2 = u64 [sp + 0x68]\n 10417: a2 = a2 + s1\n 10420: a4 = a2 + a3\n 10423: a5 = a4 ^ s1\n 10426: a2 = a4 <u s1\n 10429: a2 = a3 if a5 == 0\n 10432: a5 = u64 [sp + 0x8]\n 10435: a3 = a4 ^ a5\n 10438: a4 = a5 <u a4\n 10441: a5 = u64 [sp + 0x10]\n 10444: a1 = a5 <u a1\n 10447: ra = u64 [sp + 0x48]\n 10450: a5 = u64 [sp + 0x78]\n 10453: a5 = a5 + ra\n 10456: a1 = a4 if a3 != 0\n 10459: a3 = a5 <u ra\n 10462: t1 = u64 [sp + 0x50]\n 10465: a4 = u64 [sp + 0x70]\n 10468: a4 = a4 + t1\n 10471: a3 = a3 + a4\n 10474: a2 = a2 + a5\n 10477: a4 = a2 <u a5\n 10480: a3 = a3 + a4\n 10483: a5 = u64 [sp + 0x18]\n 10486: a4 = a3 ^ a5\n 10489: a3 = a5 <u a3\n 10492: t0 = u64 [sp + 0x20]\n 10495: a5 = t0 <u a2\n 10498: a3 = a5 if a4 == 0\n 10501: a2 = a2 ^ t0\n 10504: a2 = a2 | a4\n 10507: a1 = a3 if a2 != 0\n 10510: a2 = reverse t2\n 10512: a3 = a2 >> 0x38\n 10515: u8 [a0 + 0x1f] = a3\n 10518: a3 = a2 >> 0x30\n 10521: u8 [a0 + 0x1e] = a3\n 10524: a3 = a2 >> 0x28\n 10527: u8 [a0 + 0x1d] = a3\n 10530: a3 = a2 >> 0x20\n 10533: u8 [a0 + 0x1c] = a3\n 10536: a3 = a2 >> 0x18\n 10539: u8 [a0 + 0x1b] = a3\n 10542: a3 = a2 >> 0x10\n 10545: u8 [a0 + 0x1a] = a3\n 10548: a3 = a2 >> 0x8\n 10551: u8 [a0 + 0x19] = a3\n 10554: a3 = reverse s1\n 10556: u8 [a0 + 0x18] = a2\n 10559: a2 = a3 >> 0x38\n 10562: u8 [a0 + 0x17] = a2\n 10565: a2 = a3 >> 0x30\n 10568: u8 [a0 + 0x16] = a2\n 10571: a2 = a3 >> 0x28\n 10574: u8 [a0 + 0x15] = a2\n 10577: a2 = a3 >> 0x20\n 10580: u8 [a0 + 0x14] = a2\n 10583: a2 = a3 >> 0x18\n 10586: u8 [a0 + 0x13] = a2\n 10589: a2 = a3 >> 0x10\n 10592: u8 [a0 + 0x12] = a2\n 10595: a2 = reverse ra\n 10597: u8 [a0 + 0x10] = a3\n 10600: a3 = a3 >> 0x8\n 10603: u8 [a0 + 0x11] = a3\n 10606: a3 = a2 >> 0x38\n 10609: u8 [a0 + 0xf] = a3\n 10612: a3 = a2 >> 0x30\n 10615: u8 [a0 + 0xe] = a3\n 10618: a3 = a2 >> 0x28\n 10621: u8 [a0 + 0xd] = a3\n 10624: a3 = a2 >> 0x20\n 10627: u8 [a0 + 0xc] = a3\n 10630: a3 = a2 >> 0x18\n 10633: u8 [a0 + 0xb] = a3\n 10636: a3 = a2 >> 0x10\n 10639: u8 [a0 + 0xa] = a3\n 10642: a3 = reverse t1\n 10644: u8 [a0 + 0x8] = a2\n 10647: a2 = a2 >> 0x8\n 10650: u8 [a0 + 0x9] = a2\n 10653: a2 = a3 >> 0x38\n 10656: u8 [a0 + 0x7] = a2\n 10659: a2 = a3 >> 0x30\n 10662: u8 [a0 + 0x6] = a2\n 10665: a2 = a3 >> 0x28\n 10668: u8 [a0 + 0x5] = a2\n 10671: a2 = a3 >> 0x20\n 10674: u8 [a0 + 0x4] = a2\n 10677: a2 = a3 >> 0x18\n 10680: u8 [a0 + 0x3] = a2\n 10683: a2 = a3 >> 0x10\n 10686: u8 [a0 + 0x2] = a2\n 10689: u8 [a0] = a3\n 10691: a3 = a3 >> 0x8\n 10694: u8 [a0 + 0x1] = a3\n 10697: t0 = u64 [sp + 0x60]\n 10700: jump @199 if a1 != 0\n      : @186 (gas: 12)\n 10704: a2 = u64 [sp + 0x78]\n 10707: a0 = t0 | a2\n 10710: a1 = u64 [sp + 0x70]\n 10713: a3 = u64 [sp + 0x68]\n 10716: a1 = a1 | a3\n 10719: a0 = a0 | a1\n 10722: a0 = a0 >> 0x20\n 10725: a1 = a1 | a2\n 10728: a1 = a1 << 0x20\n 10731: a0 = a0 | a1\n 10734: a3 = u64 [sp + 0x58]\n 10737: jump @194 if a0 != 0\n      : @187 (gas: 11)\n 10741: a0 = t2 | ra\n 10744: a1 = s1 | t1\n 10747: a0 = a0 | a1\n 10750: a0 = a0 >> 0x20\n 10753: a1 = a1 | ra\n 10756: a1 = a1 << 0x20\n 10759: a0 = a0 | a1\n 10762: a2 = u64 [sp + 0x38]\n 10765: a4 = u64 [sp + 0x30]\n 10768: a5 = u64 [sp + 0x28]\n 10771: jump @194 if a0 != 0\n      : @188 (gas: 7)\n 10775: u64 [sp + 0x78] = s1\n 10778: a0 = a2 | a3\n 10781: a1 = 0xffffffe0\n 10791: a1 = a5 <u a1\n 10794: a1 = 0 if a4 != 0\n 10796: a1 = 0 if a0 != 0\n 10798: jump @194 if a1 == 0\n      : @189 (gas: 16)\n 10802: s1 = a5 + 0x20\n 10805: a0 = s1 <u a5\n 10808: a1 = a4 + a0\n 10811: u64 [sp + 0x20] = a1\n 10814: a1 = a1 <u a4\n 10817: a1 = a0 if a0 == 0\n 10820: a1 = a1 + a2\n 10823: u64 [sp + 0x68] = a1\n 10826: a0 = a1 <u a2\n 10829: u64 [sp + 0x70] = a0\n 10832: i32 t0 = t0 + 0\n 10834: u64 [sp + 0x60] = t0\n 10837: i32 a0 = s1 + 0\n 10839: i32 a1 = t2 + 0\n 10841: u64 [sp + 0x18] = a1\n 10844: ra = 156, jump @0\n      : @190 [@dyn 78] (gas: 5)\n 10850: i32 a0 = a0 + 0\n 10852: a1 = u64 [sp + 0x18]\n 10855: a2 = u64 [sp + 0x60]\n 10858: ecalli 0 // 'call_data_copy'\n 10859: fallthrough\n      : @191 (gas: 31)\n 10860: a0 = u64 [sp + 0x40]\n 10863: a0 = a0 + s1\n 10866: a1 = a0 <u s1\n 10869: a2 = u64 [sp + 0x78]\n 10872: a4 = u64 [sp + 0x20]\n 10875: a2 = a2 + a4\n 10878: a2 = a2 + a1\n 10881: a3 = a2 ^ a4\n 10884: a4 = a2 <u a4\n 10887: a4 = a1 if a3 == 0\n 10890: a1 = u64 [sp + 0x48]\n 10893: a3 = u64 [sp + 0x68]\n 10896: a1 = a1 + a3\n 10899: a4 = a4 + a1\n 10902: t0 = a4 <u a1\n 10905: a1 = a1 <u a3\n 10908: a5 = u64 [sp + 0x50]\n 10911: s1 = u64 [sp + 0x58]\n 10914: a5 = a5 + s1\n 10917: a3 = u64 [sp + 0x70]\n 10920: a5 = a5 + a3\n 10923: a1 = a1 + a5\n 10926: a1 = a1 + t0\n 10929: a3 = a0 | a4\n 10932: a1 = a1 | a2\n 10935: a3 = a3 | a1\n 10938: a3 = a3 >> 0x20\n 10941: a1 = a1 | a4\n 10944: a1 = a1 << 0x20\n 10947: a1 = a1 | a3\n 10950: jump @194 if a1 != 0\n      : @192 (gas: 3)\n 10954: i32 a0 = a0 + 0\n 10956: a1 = 0x20\n 10959: ra = 158, jump @0\n      : @193 [@dyn 79] (gas: 46)\n 10965: u8 [a0 + 31] = 0\n 10968: u8 [a0 + 30] = 0\n 10971: u8 [a0 + 29] = 0\n 10974: u8 [a0 + 28] = 0\n 10977: u8 [a0 + 27] = 0\n 10980: u8 [a0 + 26] = 0\n 10983: u8 [a0 + 25] = 0\n 10986: u8 [a0 + 24] = 0\n 10989: u8 [a0 + 23] = 0\n 10992: u8 [a0 + 22] = 0\n 10995: u8 [a0 + 21] = 0\n 10998: u8 [a0 + 20] = 0\n 11001: u8 [a0 + 19] = 0\n 11004: u8 [a0 + 18] = 0\n 11007: u8 [a0 + 17] = 0\n 11010: u8 [a0 + 16] = 0\n 11013: u8 [a0 + 15] = 0\n 11016: u8 [a0 + 14] = 0\n 11019: u8 [a0 + 13] = 0\n 11022: u8 [a0 + 12] = 0\n 11025: u8 [a0 + 11] = 0\n 11028: u8 [a0 + 10] = 0\n 11031: u8 [a0 + 9] = 0\n 11034: u8 [a0 + 8] = 0\n 11037: u8 [a0 + 7] = 0\n 11040: u8 [a0 + 6] = 0\n 11043: u8 [a0 + 5] = 0\n 11046: u8 [a0 + 4] = 0\n 11049: u8 [a0 + 3] = 0\n 11052: u8 [a0 + 2] = 0\n 11055: u8 [a0 + 1] = 0\n 11058: u8 [a0 + 0] = 0\n 11060: a0 = u64 [sp]\n 11062: a1 = u64 [sp + 0x28]\n 11065: u64 [a0] = a1\n 11067: u64 [a0 + 0x18] = s1\n 11070: a1 = u64 [sp + 0x30]\n 11073: u64 [a0 + 0x8] = a1\n 11076: a1 = u64 [sp + 0x38]\n 11079: u64 [a0 + 0x10] = a1\n 11082: sp = s0 + 0xfffffffffffffee0\n 11086: ra = u64 [sp + 0x118]\n 11090: s0 = u64 [sp + 0x110]\n 11094: s1 = u64 [sp + 0x108]\n 11098: sp = sp + 0x120\n 11102: ret\n      : @194 (gas: 1)\n 11104: trap\n      : @195 (gas: 8)\n 11105: u64 [sp + 176] = 0\n 11109: u64 [sp + 168] = 0\n 11113: u64 [sp + 160] = 0\n 11117: a0 = 0x4e487b7100000000\n 11127: a1 = sp + 0xa0\n 11131: u64 [sp + 0xb8] = a0\n 11135: a0 = 0\n 11137: ra = 160, jump @23\n      : @196 [@dyn 80] (gas: 7)\n 11143: u64 [sp + 152] = 0\n 11147: u64 [sp + 144] = 0\n 11151: u64 [sp + 128] = 0x41\n 11156: a0 = 0x4\n 11159: a1 = sp + 0x80\n 11163: u64 [sp + 136] = 0\n 11167: ra = 162, jump @23\n      : @197 [@dyn 81] (gas: 3)\n 11173: a1 = 0x24\n 11176: a0 = 0\n 11178: ra = 164, jump @0\n      : @198 [@dyn 82] (gas: 5)\n 11184: i32 a1 = a0 + 0\n 11186: a0 = 0x1\n 11189: a2 = 0x24\n 11192: ecalli 7 // 'seal_return'\n 11194: fallthrough\n      : @199 (gas: 3)\n 11195: a0 = 0\n 11197: a1 = 0\n 11199: ra = 166, jump @0\n      : @200 [@dyn 83] (gas: 6)\n 11205: i32 a1 = a0 + 0\n 11207: a0 = 0x1\n 11210: a2 = 0\n 11212: ra = 0xa8\n 11216: ecalli 7 // 'seal_return'\n 11218: fallthrough\n      : @201 [@dyn 84] (gas: 38)\n 11219: sp = sp + 0xffffffffffffff00\n 11223: u64 [sp + 0xf8] = ra\n 11227: u64 [sp + 0xf0] = s0\n 11231: u64 [sp + 0xe8] = s1\n 11235: s0 = sp + 0x100\n 11239: sp = sp & 0xffffffffffffffe0\n 11242: ra = u64 [a1]\n 11244: a4 = u64 [a2 + 0x8]\n 11247: t2 = u64 [a1 + 0x8]\n 11250: s1 = u64 [a2]\n 11252: a3 = ra + 0x1f\n 11255: t1 = a3 <u ra\n 11258: a5 = t2 + t1\n 11261: u64 [sp + 0x20] = s1\n 11264: a3 = a3 <u s1\n 11267: s1 = a5 ^ a4\n 11270: u64 [sp + 0x28] = a4\n 11273: a4 = a5 <u a4\n 11276: a4 = a3 if s1 == 0\n 11279: t0 = u64 [a1 + 0x10]\n 11282: u64 [sp + 0x38] = t2\n 11285: a3 = a5 <u t2\n 11288: a3 = t1 if t1 == 0\n 11291: t1 = u64 [a2 + 0x18]\n 11294: a5 = u64 [a1 + 0x18]\n 11297: s1 = u64 [a2 + 0x10]\n 11300: a3 = a3 + t0\n 11303: a1 = a3 <u t0\n 11306: u64 [sp + 0x30] = a5\n 11309: a1 = a1 + a5\n 11312: a2 = a1 ^ t1\n 11315: a1 = a1 <s t1\n 11318: a5 = a3 <u s1\n 11321: a1 = a5 if a2 == 0\n 11324: a3 = a3 ^ s1\n 11327: a2 = a2 | a3\n 11330: a4 = a1 if a2 != 0\n 11333: jump @206 if a4 == 0\n      : @202 (gas: 14)\n 11337: t2 = t0\n 11339: u64 [sp + 0x8] = s1\n 11342: u64 [sp + 0x10] = t1\n 11345: u64 [sp + 0x18] = a0\n 11348: a0 = ra | t2\n 11351: a1 = u64 [sp + 0x38]\n 11354: a2 = u64 [sp + 0x30]\n 11357: a1 = a1 | a2\n 11360: a0 = a0 | a1\n 11363: a0 = a0 >> 0x20\n 11366: a1 = a1 | t2\n 11369: a1 = a1 << 0x20\n 11372: a0 = a0 | a1\n 11375: jump @205 if a0 != 0\n      : @203 (gas: 41)\n 11379: s1 = t2\n 11381: i32 a1 = ra + 0\n 11383: i32 a0 = sp + 0xc0\n 11387: u64 [sp] = ra\n 11389: ecalli 1 // 'call_data_load'\n 11391: t0 = u64 [sp + 0xc0]\n 11395: t1 = u64 [sp + 0xc8]\n 11399: a2 = u64 [sp + 0xd0]\n 11403: a3 = u64 [sp + 0xd8]\n 11407: a0 = u64 [sp]\n 11409: a4 = a0 + 0x20\n 11412: a5 = a4 <u a0\n 11415: a1 = u64 [sp + 0x38]\n 11418: a0 = a1 + a5\n 11421: a1 = a0 <u a1\n 11424: a1 = a5 if a5 == 0\n 11427: a1 = a1 + s1\n 11430: a5 = a1 <u s1\n 11433: s1 = u64 [sp + 0x30]\n 11436: a5 = a5 + s1\n 11439: s1 = u64 [sp + 0x10]\n 11442: u64 [sp + 0x58] = s1\n 11445: s1 = u64 [sp + 0x8]\n 11448: u64 [sp + 0x50] = s1\n 11451: s1 = u64 [sp + 0x28]\n 11454: u64 [sp + 0x48] = s1\n 11457: s1 = u64 [sp + 0x20]\n 11460: u64 [sp + 0x40] = s1\n 11463: u64 [sp + 0x78] = a3\n 11466: u64 [sp + 0x70] = a2\n 11469: u64 [sp + 0x68] = t1\n 11472: u64 [sp + 0x60] = t0\n 11475: u64 [sp + 0x88] = a0\n 11479: u64 [sp + 0x80] = a4\n 11483: u64 [sp + 0x90] = a1\n 11487: a0 = sp + 0xa0\n 11491: a1 = sp + 0x80\n 11495: a2 = sp + 0x60\n 11498: a3 = sp + 0x40\n 11501: u64 [sp + 0x98] = a5\n 11505: ra = 170, jump @181\n      : @204 [@dyn 85] (gas: 15)\n 11511: a0 = u64 [sp + 0xb0]\n 11515: a1 = u64 [sp + 0xb8]\n 11519: a2 = u64 [sp + 0xa0]\n 11523: a3 = u64 [sp + 0xa8]\n 11527: a4 = u64 [sp + 0x18]\n 11530: u64 [a4 + 0x10] = a0\n 11533: u64 [a4 + 0x18] = a1\n 11536: u64 [a4] = a2\n 11538: u64 [a4 + 0x8] = a3\n 11541: sp = s0 + 0xffffffffffffff00\n 11545: ra = u64 [sp + 0xf8]\n 11549: s0 = u64 [sp + 0xf0]\n 11553: s1 = u64 [sp + 0xe8]\n 11557: sp = sp + 0x100\n 11561: ret\n      : @205 (gas: 1)\n 11563: trap\n      : @206 (gas: 3)\n 11564: a0 = 0\n 11566: a1 = 0\n 11568: ra = 172, jump @0\n      : @207 [@dyn 86] (gas: 6)\n 11574: i32 a1 = a0 + 0\n 11576: a0 = 0x1\n 11579: a2 = 0\n 11581: ra = 0xae\n 11585: ecalli 7 // 'seal_return'\n 11587: fallthrough\n      : @208 [@dyn 87] (gas: 42)\n 11588: sp = sp + 0xfffffffffffffee0\n 11592: u64 [sp + 0x118] = ra\n 11596: u64 [sp + 0x110] = s0\n 11600: u64 [sp + 0x108] = s1\n 11604: s0 = sp + 0x120\n 11608: sp = sp & 0xffffffffffffffe0\n 11611: s1 = u64 [a2 + 0x8]\n 11614: t2 = u64 [a1 + 0x8]\n 11617: a5 = u64 [a2]\n 11619: ra = u64 [a1]\n 11621: t1 = u64 [a2 + 0x10]\n 11624: a4 = s1 ^ t2\n 11627: a3 = s1 <u t2\n 11630: t0 = a5 <u ra\n 11633: a3 = t0 if a4 == 0\n 11636: u64 [sp + 0x38] = s1\n 11639: a4 = s1 - t2\n 11642: a4 = a4 - t0\n 11645: u64 [sp + 0x30] = a5\n 11648: a5 = a5 - ra\n 11651: a5 = a5 <u 0x20\n 11654: a5 = a5 ^ 0x1\n 11657: t0 = u64 [a1 + 0x10]\n 11660: s1 = a4 >u 0\n 11662: a5 = s1 if a4 != 0\n 11665: a4 = u64 [a2 + 0x18]\n 11668: s1 = u64 [a1 + 0x18]\n 11671: a1 = t1 - t0\n 11674: a2 = a1 - a3\n 11677: a1 = a1 <u a3\n 11680: u64 [sp + 0x28] = t1\n 11683: a3 = t1 <u t0\n 11686: u64 [sp + 0x20] = a4\n 11689: a4 = a4 - s1\n 11692: a4 = a4 - a3\n 11695: a4 = a4 - a1\n 11698: a1 = a4 >s 0\n 11700: a3 = a2 >u 0\n 11702: a3 = a1 if a4 != 0\n 11705: a2 = a2 | a4\n 11708: a5 = a3 if a2 != 0\n 11711: jump @217 if a5 == 0\n      : @209 (gas: 11)\n 11715: a2 = ra | t0\n 11718: u64 [sp + 0x18] = t2\n 11721: u64 [sp + 0x8] = s1\n 11724: a1 = t2 | s1\n 11727: a2 = a2 | a1\n 11730: a2 = a2 >> 0x20\n 11733: u64 [sp + 0x10] = t0\n 11736: a1 = a1 | t0\n 11739: a1 = a1 << 0x20\n 11742: a1 = a1 | a2\n 11745: jump @216 if a1 != 0\n      : @210 (gas: 6)\n 11749: u64 [sp] = a0\n 11751: s1 = ra\n 11753: i32 a1 = ra + 0\n 11755: i32 a0 = sp + 0xc0\n 11759: ecalli 1 // 'call_data_load'\n 11761: fallthrough\n      : @211 (gas: 7)\n 11762: a0 = u64 [sp + 0xd8]\n 11766: a1 = u64 [sp + 0xd0]\n 11770: a2 = u64 [sp + 0xc8]\n 11774: a3 = a1 | a0\n 11777: a4 = a2 <u 0x1\n 11780: a4 = 0 if a3 != 0\n 11782: jump @217 if a4 == 0\n      : @212 (gas: 42)\n 11786: a3 = u64 [sp + 0xc0]\n 11790: t0 = a3 + s1\n 11793: a3 = t0 <u a3\n 11796: a4 = u64 [sp + 0x18]\n 11799: a4 = a4 + a2\n 11802: t1 = a4 + a3\n 11805: a4 = t1 ^ a2\n 11808: s1 = t1 <u a2\n 11811: s1 = a3 if a4 == 0\n 11814: a2 = u64 [sp + 0x10]\n 11817: a2 = a2 + a1\n 11820: s1 = s1 + a2\n 11823: a3 = s1 <u a2\n 11826: a1 = a2 <u a1\n 11829: a2 = u64 [sp + 0x8]\n 11832: a0 = a0 + a2\n 11835: a0 = a0 + a1\n 11838: ra = a0 + a3\n 11841: a0 = t0 + 0x1f\n 11844: a1 = a0 <u t0\n 11847: a2 = t1 + a1\n 11850: a3 = a2 <u t1\n 11853: a3 = a1 if a1 == 0\n 11856: t2 = s1 + a3\n 11859: a1 = t2 <u s1\n 11862: a1 = a1 + ra\n 11865: a5 = u64 [sp + 0x38]\n 11868: a4 = a2 ^ a5\n 11871: a2 = a2 <u a5\n 11874: a5 = u64 [sp + 0x30]\n 11877: a0 = a0 <u a5\n 11880: a0 = a2 if a4 != 0\n 11883: a5 = u64 [sp + 0x28]\n 11886: a2 = t2 <u a5\n 11889: a4 = u64 [sp + 0x20]\n 11892: a3 = a1 ^ a4\n 11895: a1 = a1 <s a4\n 11898: a1 = a2 if a3 == 0\n 11901: a2 = t2 ^ a5\n 11904: a2 = a2 | a3\n 11907: a0 = a1 if a2 != 0\n 11910: jump @218 if a0 == 0\n      : @213 (gas: 11)\n 11914: a0 = t0 | s1\n 11917: u64 [sp + 0x18] = t1\n 11920: u64 [sp + 0x8] = ra\n 11923: a1 = t1 | ra\n 11926: a0 = a0 | a1\n 11929: a0 = a0 >> 0x20\n 11932: u64 [sp + 0x10] = s1\n 11935: a1 = a1 | s1\n 11938: a1 = a1 << 0x20\n 11941: a0 = a0 | a1\n 11944: jump @216 if a0 != 0\n      : @214 (gas: 40)\n 11948: i32 a1 = t0 + 0\n 11950: i32 a0 = sp + 0xe0\n 11954: s1 = t0\n 11956: ecalli 1 // 'call_data_load'\n 11958: t0 = u64 [sp + 0xe0]\n 11962: t1 = u64 [sp + 0xe8]\n 11966: a2 = u64 [sp + 0xf0]\n 11970: a3 = u64 [sp + 0xf8]\n 11974: a4 = s1 + 0x20\n 11977: a5 = a4 <u s1\n 11980: a1 = u64 [sp + 0x18]\n 11983: a0 = a1 + a5\n 11986: a1 = a0 <u a1\n 11989: a1 = a5 if a5 == 0\n 11992: a5 = u64 [sp + 0x10]\n 11995: a1 = a1 + a5\n 11998: a5 = a1 <u a5\n 12001: s1 = u64 [sp + 0x8]\n 12004: a5 = a5 + s1\n 12007: s1 = u64 [sp + 0x20]\n 12010: u64 [sp + 0x58] = s1\n 12013: s1 = u64 [sp + 0x28]\n 12016: u64 [sp + 0x50] = s1\n 12019: s1 = u64 [sp + 0x38]\n 12022: u64 [sp + 0x48] = s1\n 12025: s1 = u64 [sp + 0x30]\n 12028: u64 [sp + 0x40] = s1\n 12031: u64 [sp + 0x78] = a3\n 12034: u64 [sp + 0x70] = a2\n 12037: u64 [sp + 0x68] = t1\n 12040: u64 [sp + 0x60] = t0\n 12043: u64 [sp + 0x88] = a0\n 12047: u64 [sp + 0x80] = a4\n 12051: u64 [sp + 0x90] = a1\n 12055: a0 = sp + 0xa0\n 12059: a1 = sp + 0x80\n 12063: a2 = sp + 0x60\n 12066: a3 = sp + 0x40\n 12069: u64 [sp + 0x98] = a5\n 12073: ra = 176, jump @181\n      : @215 [@dyn 88] (gas: 15)\n 12079: a0 = u64 [sp + 0xb8]\n 12083: a1 = u64 [sp + 0xb0]\n 12087: a2 = u64 [sp + 0xa8]\n 12091: a3 = u64 [sp + 0xa0]\n 12095: a4 = u64 [sp]\n 12097: u64 [a4 + 0x18] = a0\n 12100: u64 [a4 + 0x10] = a1\n 12103: u64 [a4 + 0x8] = a2\n 12106: u64 [a4] = a3\n 12108: sp = s0 + 0xfffffffffffffee0\n 12112: ra = u64 [sp + 0x118]\n 12116: s0 = u64 [sp + 0x110]\n 12120: s1 = u64 [sp + 0x108]\n 12124: sp = sp + 0x120\n 12128: ret\n      : @216 (gas: 1)\n 12130: trap\n      : @217 (gas: 4)\n 12131: a0 = 0\n 12133: a1 = 0\n 12135: ra = 0xb2\n 12139: jump @0\n      : @218 (gas: 2)\n 12142: a1 = 0\n 12144: ra = 178, jump @0\n      : @219 [@dyn 89] (gas: 6)\n 12150: i32 a1 = a0 + 0\n 12152: a0 = 0x1\n 12155: a2 = 0\n 12157: ra = 0xb4\n 12161: ecalli 7 // 'seal_return'\n 12163: fallthrough\n      : @220 [@dyn 90] (gas: 9)\n 12164: a2 = u64 [a1 + 0x18]\n 12167: a3 = u64 [a1 + 0x10]\n 12170: a4 = u64 [a1 + 0x8]\n 12173: a1 = u64 [a1]\n 12175: u64 [a0 + 0x18] = a2\n 12178: u64 [a0 + 0x10] = a3\n 12181: u64 [a0 + 0x8] = a4\n 12184: u64 [a0] = a1\n 12186: ret\n      : @221 (gas: 8)\n 12188: a0 = u64 [sp + 0x90]\n 12192: a1 = u64 [sp + 0x98]\n 12196: a2 = u64 [sp + 0x88]\n 12200: a3 = u64 [sp + 0x80]\n 12204: a1 = a1 | a2\n 12207: a0 = a0 | a3\n 12210: a0 = a0 | a1\n 12213: jump @227 if a0 != 0\n      : @222 (gas: 13)\n 12217: a0 = u32 [0x20024]\n 12222: u64 [sp + 56] = 0\n 12225: u64 [sp + 48] = 0\n 12228: u64 [sp + 40] = 0\n 12231: u64 [sp + 0x20] = a0\n 12234: u64 [sp + 88] = 0\n 12237: u64 [sp + 80] = 0\n 12240: u64 [sp + 64] = 0x4\n 12244: a0 = sp + 0x60\n 12247: a1 = sp + 0x40\n 12250: a2 = sp + 0x20\n 12253: u64 [sp + 72] = 0\n 12256: ra = 182, jump @208\n      : @223 [@dyn 91] (gas: 44)\n 12262: a1 = u64 [sp + 0x60]\n 12265: a0 = u64 [sp + 0x68]\n 12268: a2 = u64 [sp + 0x70]\n 12271: a3 = u64 [sp + 0x78]\n 12274: u64 [sp + 0x18] = a3\n 12277: u64 [sp + 0x10] = a2\n 12280: u64 [sp + 0x8] = a0\n 12283: a0 = sp\n 12285: u64 [sp] = a1\n 12287: ra = 0xb8\n 12291: sp = sp + 0xfffffffffffffd60\n 12295: u64 [sp + 0x298] = ra\n 12299: u64 [sp + 0x290] = s0\n 12303: u64 [sp + 0x288] = s1\n 12307: s0 = sp + 0x2a0\n 12311: sp = sp & 0xffffffffffffffe0\n 12314: a1 = u64 [a0 + 0x18]\n 12317: u64 [sp + 0xd0] = a1\n 12321: a1 = u64 [a0 + 0x10]\n 12324: u64 [sp + 0xd8] = a1\n 12328: a1 = u64 [a0 + 0x8]\n 12331: u64 [sp + 0xe0] = a1\n 12335: a0 = u64 [a0]\n 12337: u64 [sp + 0xe8] = a0\n 12341: i32 a0 = sp + 0x1e0\n 12345: ecalli 3 // 'caller'\n 12347: a0 = u64 [sp + 0x1e8]\n 12351: a1 = i32 [sp + 0x1f0]\n 12355: s1 = u64 [sp + 0x1e0]\n 12359: a0 = reverse a0\n 12361: a2 = a0 << 0x20\n 12364: a1 = reverse a1\n 12366: a1 = a1 >> 0x20\n 12369: a1 = a1 | a2\n 12372: u64 [sp + 0xf8] = a1\n 12376: a0 = a0 >> 0x20\n 12379: a1 = reverse s1\n 12381: a1 = a1 << 0x20\n 12384: a0 = a0 | a1\n 12387: u64 [sp + 0xf0] = a0\n 12391: a1 = 0x20\n 12394: a0 = 0\n 12396: ra = 0xe0\n 12400: jump @0\n      : @224 [@dyn 92] (gas: 3)\n 12403: a0 = 0x40\n 12406: a1 = 0x20\n 12409: ra = 186, jump @0\n      : @225 [@dyn 93] (gas: 100)\n 12415: a1 = u8 [a0 + 0x11]\n 12418: a2 = u8 [a0 + 0x10]\n 12421: a3 = u8 [a0 + 0x12]\n 12424: a4 = u8 [a0 + 0x13]\n 12427: a1 = a1 << 0x8\n 12430: a1 = a1 | a2\n 12433: a3 = a3 << 0x10\n 12436: a4 = a4 << 0x18\n 12439: a3 = a3 | a4\n 12442: a1 = a1 | a3\n 12445: a2 = u8 [a0 + 0x15]\n 12448: a3 = u8 [a0 + 0x14]\n 12451: a4 = u8 [a0 + 0x16]\n 12454: a5 = u8 [a0 + 0x17]\n 12457: a2 = a2 << 0x8\n 12460: a2 = a2 | a3\n 12463: a4 = a4 << 0x10\n 12466: a5 = a5 << 0x18\n 12469: a4 = a4 | a5\n 12472: a2 = a2 | a4\n 12475: a2 = a2 << 0x20\n 12478: t0 = a2 | a1\n 12481: a2 = u8 [a0 + 0x1]\n 12484: a3 = u8 [a0]\n 12486: a4 = u8 [a0 + 0x2]\n 12489: a5 = u8 [a0 + 0x3]\n 12492: a2 = a2 << 0x8\n 12495: a2 = a2 | a3\n 12498: a4 = a4 << 0x10\n 12501: a5 = a5 << 0x18\n 12504: a4 = a4 | a5\n 12507: a2 = a2 | a4\n 12510: a3 = u8 [a0 + 0x5]\n 12513: a4 = u8 [a0 + 0x4]\n 12516: a5 = u8 [a0 + 0x6]\n 12519: a1 = u8 [a0 + 0x7]\n 12522: a3 = a3 << 0x8\n 12525: a3 = a3 | a4\n 12528: a5 = a5 << 0x10\n 12531: a1 = a1 << 0x18\n 12534: a1 = a1 | a5\n 12537: a1 = a1 | a3\n 12540: a1 = a1 << 0x20\n 12543: t1 = a1 | a2\n 12546: a1 = u8 [a0 + 0x19]\n 12549: a3 = u8 [a0 + 0x18]\n 12552: a4 = u8 [a0 + 0x1a]\n 12555: a5 = u8 [a0 + 0x1b]\n 12558: a1 = a1 << 0x8\n 12561: a1 = a1 | a3\n 12564: a4 = a4 << 0x10\n 12567: a5 = a5 << 0x18\n 12570: a4 = a4 | a5\n 12573: a1 = a1 | a4\n 12576: a3 = u8 [a0 + 0x1d]\n 12579: a4 = u8 [a0 + 0x1c]\n 12582: a5 = u8 [a0 + 0x1e]\n 12585: a2 = u8 [a0 + 0x1f]\n 12588: a3 = a3 << 0x8\n 12591: a3 = a3 | a4\n 12594: a5 = a5 << 0x10\n 12597: a2 = a2 << 0x18\n 12600: a2 = a2 | a5\n 12603: a2 = a2 | a3\n 12606: a2 = a2 << 0x20\n 12609: a3 = a2 | a1\n 12612: a1 = u8 [a0 + 0x9]\n 12615: a2 = u8 [a0 + 0x8]\n 12618: a4 = u8 [a0 + 0xa]\n 12621: a5 = u8 [a0 + 0xb]\n 12624: a1 = a1 << 0x8\n 12627: a1 = a1 | a2\n 12630: a4 = a4 << 0x10\n 12633: a5 = a5 << 0x18\n 12636: a4 = a4 | a5\n 12639: a1 = a1 | a4\n 12642: a2 = u8 [a0 + 0xd]\n 12645: a4 = u8 [a0 + 0xc]\n 12648: a5 = u8 [a0 + 0xe]\n 12651: a0 = u8 [a0 + 0xf]\n 12654: a2 = a2 << 0x8\n 12657: a2 = a2 | a4\n 12660: a5 = a5 << 0x10\n 12663: a0 = a0 << 0x18\n 12666: a0 = a0 | a5\n 12669: a0 = a0 | a2\n 12672: a0 = a0 << 0x20\n 12675: a0 = a0 | a1\n 12678: a1 = reverse a0\n 12680: a0 = reverse a3\n 12682: a2 = reverse t1\n 12684: a3 = reverse t0\n 12686: a2 = a2 | a3\n 12689: a3 = a0 | a1\n 12692: a3 = a3 | a2\n 12695: a3 = a3 >> 0x20\n 12698: a1 = a1 | a2\n 12701: a1 = a1 << 0x20\n 12704: a1 = a1 | a3\n 12707: jump @229 if a1 == 0\n      : @226 (gas: 1)\n 12710: trap\n      : @227 (gas: 3)\n 12711: a0 = 0\n 12713: a1 = 0\n 12715: ra = 188, jump @0\n      : @228 [@dyn 94] (gas: 7)\n 12721: i32 a1 = a0 + 0\n 12723: a0 = 0x1\n 12726: a2 = 0\n 12728: ecalli 7 // 'seal_return'\n 12730: i32 a0 = a0 + 0\n 12732: ra = 0xbe\n 12736: jump @0\n      : @229 (gas: 2)\n 12739: i32 a0 = a0 + 0\n 12741: ra = 190, jump @0\n      : @230 [@dyn 95] (gas: 6)\n 12747: i32 a1 = a0 + 0\n 12749: a0 = 0\n 12751: a2 = 0\n 12753: ra = 0xc0\n 12757: ecalli 7 // 'seal_return'\n 12759: fallthrough\n      : @231 [@dyn 96] (gas: 6)\n 12760: u64 [a0 + 24] = 0\n 12763: u64 [a0 + 16] = 0\n 12766: u64 [a0 + 8] = 0\n 12769: a1 = 0x60\n 12772: u64 [a0] = a1\n 12774: ret\n      : @232 (gas: 15)\n 12776: sp = sp + 0xffffffffffffff20\n 12780: u64 [sp + 0xd8] = ra\n 12784: u64 [sp + 0xd0] = s0\n 12788: u64 [sp + 0xc8] = s1\n 12792: s0 = sp + 0xe0\n 12796: sp = sp & 0xffffffffffffffe0\n 12799: t0 = u64 [a1 + 0x18]\n 12802: a5 = u64 [a1 + 0x10]\n 12805: a4 = u64 [a1]\n 12807: s1 = u64 [a1 + 0x8]\n 12810: a1 = a5 | t0\n 12813: a3 = a4 <u 0x20\n 12816: a3 = 0 if s1 != 0\n 12818: a3 = 0 if a1 != 0\n 12820: jump @240 if a3 != 0\n      : @233 (gas: 23)\n 12824: a1 = u64 [a2 + 0x18]\n 12827: u64 [sp + 0x50] = a1\n 12830: a1 = u64 [a2 + 0x10]\n 12833: u64 [sp + 0x40] = a1\n 12836: a1 = u64 [a2 + 0x8]\n 12839: u64 [sp + 0x58] = a1\n 12842: a1 = u64 [a2]\n 12844: u64 [sp + 0x20] = a1\n 12847: a1 = u64 [a0 + 0x18]\n 12850: u64 [sp] = a1\n 12852: a1 = u64 [a0 + 0x10]\n 12855: u64 [sp + 0x8] = a1\n 12858: a1 = u64 [a0 + 0x8]\n 12861: u64 [sp + 0x10] = a1\n 12864: a0 = u64 [a0]\n 12866: u64 [sp + 0x18] = a0\n 12869: a1 = 0x20\n 12872: a0 = 0\n 12874: u64 [sp + 0x28] = t0\n 12877: u64 [sp + 0x48] = a5\n 12880: u64 [sp + 0x38] = s1\n 12883: u64 [sp + 0x30] = a4\n 12886: ra = 194, jump @0\n      : @234 [@dyn 97] (gas: 71)\n 12892: a1 = u64 [sp]\n 12894: a1 = reverse a1\n 12896: a2 = u64 [sp + 0x8]\n 12899: a2 = reverse a2\n 12901: a3 = u64 [sp + 0x10]\n 12904: a3 = reverse a3\n 12906: a4 = u64 [sp + 0x18]\n 12909: a4 = reverse a4\n 12911: a5 = a4 >> 0x38\n 12914: u8 [a0 + 0x1f] = a5\n 12917: a5 = a4 >> 0x30\n 12920: u8 [a0 + 0x1e] = a5\n 12923: a5 = a4 >> 0x28\n 12926: u8 [a0 + 0x1d] = a5\n 12929: a5 = a4 >> 0x20\n 12932: u8 [a0 + 0x1c] = a5\n 12935: a5 = a4 >> 0x18\n 12938: u8 [a0 + 0x1b] = a5\n 12941: a5 = a4 >> 0x10\n 12944: u8 [a0 + 0x1a] = a5\n 12947: a5 = a4 >> 0x8\n 12950: u8 [a0 + 0x19] = a5\n 12953: u8 [a0 + 0x18] = a4\n 12956: u8 [a0 + 0x10] = a3\n 12959: a4 = a3 >> 0x38\n 12962: u8 [a0 + 0x17] = a4\n 12965: a4 = a3 >> 0x30\n 12968: u8 [a0 + 0x16] = a4\n 12971: a4 = a3 >> 0x28\n 12974: u8 [a0 + 0x15] = a4\n 12977: a4 = a3 >> 0x20\n 12980: u8 [a0 + 0x14] = a4\n 12983: a4 = a3 >> 0x18\n 12986: u8 [a0 + 0x13] = a4\n 12989: a4 = a3 >> 0x10\n 12992: u8 [a0 + 0x12] = a4\n 12995: a3 = a3 >> 0x8\n 12998: u8 [a0 + 0x11] = a3\n 13001: u8 [a0 + 0x8] = a2\n 13004: a3 = a2 >> 0x38\n 13007: u8 [a0 + 0xf] = a3\n 13010: a3 = a2 >> 0x30\n 13013: u8 [a0 + 0xe] = a3\n 13016: a3 = a2 >> 0x28\n 13019: u8 [a0 + 0xd] = a3\n 13022: a3 = a2 >> 0x20\n 13025: u8 [a0 + 0xc] = a3\n 13028: a3 = a2 >> 0x18\n 13031: u8 [a0 + 0xb] = a3\n 13034: a3 = a2 >> 0x10\n 13037: u8 [a0 + 0xa] = a3\n 13040: a2 = a2 >> 0x8\n 13043: u8 [a0 + 0x9] = a2\n 13046: u8 [a0] = a1\n 13048: a2 = a1 >> 0x38\n 13051: u8 [a0 + 0x7] = a2\n 13054: a2 = a1 >> 0x30\n 13057: u8 [a0 + 0x6] = a2\n 13060: a2 = a1 >> 0x28\n 13063: u8 [a0 + 0x5] = a2\n 13066: a2 = a1 >> 0x20\n 13069: u8 [a0 + 0x4] = a2\n 13072: a2 = a1 >> 0x18\n 13075: u8 [a0 + 0x3] = a2\n 13078: a2 = a1 >> 0x10\n 13081: u8 [a0 + 0x2] = a2\n 13084: a1 = a1 >> 0x8\n 13087: u8 [a0 + 0x1] = a1\n 13090: a1 = 0x20\n 13093: a0 = 0\n 13095: ra = 196, jump @0\n      : @235 [@dyn 98] (gas: 5)\n 13101: i32 a0 = a0 + 0\n 13103: i32 a2 = sp + 0xa0\n 13107: a1 = 0x20\n 13110: ecalli 6 // 'hash_keccak_256'\n 13112: fallthrough\n      : @236 (gas: 112)\n 13113: a2 = u64 [sp + 0x20]\n 13116: a1 = a2 + 0x1f\n 13119: a0 = a1 <u a2\n 13122: t1 = a2\n 13124: a4 = u64 [sp + 0x58]\n 13127: a3 = a4 + a0\n 13130: a2 = a3 <u a4\n 13133: t0 = a4\n 13135: a2 = a0 if a0 == 0\n 13138: s1 = u64 [sp + 0x40]\n 13141: a2 = a2 + s1\n 13144: u64 [sp + 0x18] = a2\n 13147: a2 = a2 << 0x3b\n 13150: a4 = a3 >> 0x5\n 13153: a2 = a2 | a4\n 13156: a3 = a3 << 0x3b\n 13159: a1 = a1 >> 0x5\n 13162: a5 = a1 | a3\n 13165: a1 = t1 <u 0x20\n 13168: a1 = 0 if t0 != 0\n 13170: a3 = u64 [sp + 0xb8]\n 13174: t1 = u64 [sp + 0xb0]\n 13178: a0 = u64 [sp + 0x50]\n 13181: a4 = s1 | a0\n 13184: a1 = 0 if a4 != 0\n 13186: a4 = reverse a3\n 13188: s1 = reverse t1\n 13190: a2 = 0 if a1 != 0\n 13192: a5 = 0 if a1 != 0\n 13194: a5 = a5 + a4\n 13197: u64 [sp + 0x58] = a5\n 13200: a5 = a5 <u a4\n 13203: a3 = s1 + a5\n 13206: t0 = a3 + a2\n 13209: a3 = t0 ^ s1\n 13212: ra = t0 <u s1\n 13215: ra = a5 if a3 == 0\n 13218: a0 = u64 [sp + 0x30]\n 13221: t2 = a0 + 0x1f\n 13224: a0 = t2 <u a0\n 13227: a2 = u64 [sp + 0x38]\n 13230: a3 = a2 + a0\n 13233: a5 = a3 <u a2\n 13236: a5 = a0 if a0 == 0\n 13239: a0 = u64 [sp + 0x48]\n 13242: a5 = a5 + a0\n 13245: a0 = a5 << 0x3b\n 13248: a2 = a3 >> 0x5\n 13251: a0 = a0 | a2\n 13254: a3 = a3 << 0x3b\n 13257: a2 = t2 >> 0x5\n 13260: a2 = a2 | a3\n 13263: t2 = a4 + a2\n 13266: a2 = t2 <u a4\n 13269: a3 = s1 + a2\n 13272: t1 = a3 + a0\n 13275: a0 = t1 ^ s1\n 13278: a3 = t1 <u s1\n 13281: a3 = a2 if a0 == 0\n 13284: a4 = u64 [sp + 0x18]\n 13287: a0 = u64 [sp + 0x40]\n 13290: a0 = a4 <u a0\n 13293: a2 = u64 [sp + 0x50]\n 13296: a0 = a0 + a2\n 13299: a2 = a4 >> 0x5\n 13302: a4 = a0 << 0x3b\n 13305: a2 = a2 | a4\n 13308: a0 = a0 >> 0x5\n 13311: a4 = u64 [sp + 0xa8]\n 13315: s1 = u64 [sp + 0xa0]\n 13319: a2 = 0 if a1 != 0\n 13321: a0 = 0 if a1 != 0\n 13323: a1 = reverse a4\n 13325: a4 = reverse s1\n 13327: u64 [sp + 0x50] = a4\n 13330: a0 = a0 + a4\n 13333: a2 = a2 + a1\n 13336: s1 = a2 <u a1\n 13339: a0 = a0 + s1\n 13342: a4 = a2 + ra\n 13345: s1 = a4 <u a2\n 13348: s1 = s1 + a0\n 13351: a0 = u64 [sp + 0x48]\n 13354: a0 = a5 <u a0\n 13357: a2 = u64 [sp + 0x28]\n 13360: a0 = a0 + a2\n 13363: a5 = a5 >> 0x5\n 13366: a2 = a0 << 0x3b\n 13369: a2 = a2 | a5\n 13372: a5 = u64 [sp + 0x58]\n 13375: a0 = a0 >> 0x5\n 13378: a2 = a2 + a1\n 13381: ra = a2 + a3\n 13384: a1 = a2 <u a1\n 13387: a2 = ra <u a2\n 13390: a3 = u64 [sp + 0x50]\n 13393: a0 = a0 + a3\n 13396: a0 = a0 + a1\n 13399: a3 = a0 + a2\n 13402: a0 = t0 ^ t1\n 13405: a1 = t0 <u t1\n 13408: a2 = a5 <u t2\n 13411: a2 = a1 if a0 != 0\n 13414: a0 = a4 <u ra\n 13417: a1 = s1 ^ a3\n 13420: u64 [sp + 0x40] = a3\n 13423: a3 = s1 <u a3\n 13426: a3 = a0 if a1 == 0\n 13429: a0 = a4 ^ ra\n 13432: a0 = a0 | a1\n 13435: a2 = a3 if a0 != 0\n 13438: jump @240 if a2 == 0\n      : @237 (gas: 5)\n 13442: a0 = a4\n 13444: u64 [sp + 0x38] = t2\n 13447: u64 [sp + 0x30] = t1\n 13450: u64 [sp + 0x28] = ra\n 13453: fallthrough\n      : @238 (gas: 36)\n 13454: u64 [sp + 0x48] = a0\n 13457: u64 [sp + 0x50] = t0\n 13460: u64 [sp + 0x58] = a5\n 13463: u64 [sp + 0x90] = a0\n 13467: u64 [sp + 0x88] = t0\n 13471: u64 [sp + 0x80] = a5\n 13475: u64 [sp + 0x98] = s1\n 13479: u64 [sp + 184] = 0\n 13483: u64 [sp + 176] = 0\n 13487: u64 [sp + 168] = 0\n 13491: u64 [sp + 160] = 0\n 13495: u32 [sp + 96] = 0x20\n 13499: i32 a1 = sp + 0x80\n 13503: i32 a3 = sp + 0xa0\n 13507: i32 a4 = sp + 0x60\n 13510: a2 = 0xffffffffffffffff\n 13513: a0 = 0\n 13515: ecalli 5 // 'get_storage'\n 13517: u64 [sp + 0x98] = s1\n 13521: a0 = u64 [sp + 0x48]\n 13524: u64 [sp + 0x90] = a0\n 13528: a0 = u64 [sp + 0x50]\n 13531: u64 [sp + 0x88] = a0\n 13535: a0 = u64 [sp + 0x58]\n 13538: u64 [sp + 0x80] = a0\n 13542: u64 [sp + 184] = 0\n 13546: u64 [sp + 176] = 0\n 13550: u64 [sp + 168] = 0\n 13554: u64 [sp + 160] = 0\n 13558: i32 a1 = sp + 0x80\n 13562: i32 a3 = sp + 0xa0\n 13566: a2 = 0xffffffffffffffff\n 13569: a4 = 0x20\n 13572: a0 = 0\n 13574: ecalli 9 // 'set_storage'\n 13576: fallthrough\n      : @239 (gas: 27)\n 13577: ra = u64 [sp + 0x28]\n 13580: t1 = u64 [sp + 0x30]\n 13583: t2 = u64 [sp + 0x38]\n 13586: t0 = u64 [sp + 0x50]\n 13589: a5 = u64 [sp + 0x58]\n 13592: a5 = a5 + 0x1\n 13595: a0 = a5 <u 0x1\n 13598: t0 = t0 + a0\n 13601: a0 = a5 | t0\n 13604: a0 = a0 <u 0x1\n 13607: a1 = u64 [sp + 0x48]\n 13610: a0 = a0 + a1\n 13613: a1 = a0 <u a1\n 13616: s1 = s1 + a1\n 13619: a1 = a5 <u t2\n 13622: a2 = t0 ^ t1\n 13625: a3 = t0 <u t1\n 13628: a3 = a1 if a2 == 0\n 13631: a1 = a0 <u ra\n 13634: a4 = u64 [sp + 0x40]\n 13637: a2 = s1 ^ a4\n 13640: a4 = s1 <u a4\n 13643: a4 = a1 if a2 == 0\n 13646: a1 = a0 ^ ra\n 13649: a1 = a1 | a2\n 13652: a4 = a3 if a1 == 0\n 13655: jump @238 if a4 != 0\n      : @240 (gas: 6)\n 13659: sp = s0 + 0xffffffffffffff20\n 13663: ra = u64 [sp + 0xd8]\n 13667: s0 = u64 [sp + 0xd0]\n 13671: s1 = u64 [sp + 0xc8]\n 13675: sp = sp + 0xe0\n 13679: ret\n      : @241 (gas: 21)\n 13681: sp = sp + 0xfffffffffffffd40\n 13685: u64 [sp + 0x2b8] = ra\n 13689: u64 [sp + 0x2b0] = s0\n 13693: u64 [sp + 0x2a8] = s1\n 13697: s0 = sp + 0x2c0\n 13701: sp = sp & 0xffffffffffffffe0\n 13704: a3 = u64 [a1 + 0x10]\n 13707: a2 = u64 [a1 + 0x18]\n 13710: a4 = u64 [a1 + 0x8]\n 13713: a5 = u64 [a1]\n 13715: u64 [sp + 0x98] = a2\n 13719: u64 [sp + 0x88] = a4\n 13723: a1 = a4 | a2\n 13726: a2 = a5 | a3\n 13729: a2 = a2 | a1\n 13732: a2 = a2 >> 0x20\n 13735: u64 [sp + 0x90] = a3\n 13739: a1 = a1 | a3\n 13742: a1 = a1 << 0x20\n 13745: a1 = a1 | a2\n 13748: jump @271 if a1 != 0\n      : @242 (gas: 13)\n 13752: a1 = u64 [a0 + 0x18]\n 13755: u64 [sp + 0x40] = a1\n 13758: a1 = u64 [a0 + 0x10]\n 13761: u64 [sp + 0x58] = a1\n 13764: a1 = u64 [a0 + 0x8]\n 13767: u64 [sp + 0x48] = a1\n 13770: a0 = u64 [a0]\n 13772: u64 [sp + 0x50] = a0\n 13775: u64 [sp + 0x80] = a5\n 13779: i32 a0 = a5 + 0\n 13781: a1 = 0x20\n 13784: u64 [sp + 0x18] = a0\n 13787: ra = 198, jump @0\n      : @243 [@dyn 99] (gas: 80)\n 13793: a1 = u8 [a0 + 0x9]\n 13796: a2 = u8 [a0 + 0x8]\n 13799: a3 = u8 [a0 + 0xa]\n 13802: a4 = u8 [a0 + 0xb]\n 13805: a1 = a1 << 0x8\n 13808: a1 = a1 | a2\n 13811: a3 = a3 << 0x10\n 13814: a4 = a4 << 0x18\n 13817: a3 = a3 | a4\n 13820: a1 = a1 | a3\n 13823: a2 = u8 [a0 + 0xd]\n 13826: a3 = u8 [a0 + 0xc]\n 13829: a4 = u8 [a0 + 0xe]\n 13832: a5 = u8 [a0 + 0xf]\n 13835: a2 = a2 << 0x8\n 13838: a2 = a2 | a3\n 13841: a4 = a4 << 0x10\n 13844: a5 = a5 << 0x18\n 13847: a4 = a4 | a5\n 13850: a2 = a2 | a4\n 13853: a2 = a2 << 0x20\n 13856: t0 = a2 | a1\n 13859: a1 = u8 [a0 + 0x1]\n 13862: a2 = u8 [a0]\n 13864: a3 = u8 [a0 + 0x2]\n 13867: a4 = u8 [a0 + 0x3]\n 13870: a1 = a1 << 0x8\n 13873: a1 = a1 | a2\n 13876: a3 = a3 << 0x10\n 13879: a4 = a4 << 0x18\n 13882: a3 = a3 | a4\n 13885: a1 = a1 | a3\n 13888: a2 = u8 [a0 + 0x5]\n 13891: a3 = u8 [a0 + 0x4]\n 13894: a4 = u8 [a0 + 0x6]\n 13897: a5 = u8 [a0 + 0x7]\n 13900: a2 = a2 << 0x8\n 13903: a2 = a2 | a3\n 13906: a4 = a4 << 0x10\n 13909: a5 = a5 << 0x18\n 13912: a4 = a4 | a5\n 13915: a2 = a2 | a4\n 13918: a2 = a2 << 0x20\n 13921: s1 = a2 | a1\n 13924: a1 = u8 [a0 + 0x11]\n 13927: a2 = u8 [a0 + 0x10]\n 13930: a3 = u8 [a0 + 0x12]\n 13933: a4 = u8 [a0 + 0x13]\n 13936: a1 = a1 << 0x8\n 13939: a1 = a1 | a2\n 13942: a3 = a3 << 0x10\n 13945: a4 = a4 << 0x18\n 13948: a3 = a3 | a4\n 13951: a1 = a1 | a3\n 13954: a2 = u8 [a0 + 0x15]\n 13957: a3 = u8 [a0 + 0x14]\n 13960: a4 = u8 [a0 + 0x16]\n 13963: a5 = u8 [a0 + 0x17]\n 13966: a2 = a2 << 0x8\n 13969: a2 = a2 | a3\n 13972: a4 = a4 << 0x10\n 13975: a5 = a5 << 0x18\n 13978: a4 = a4 | a5\n 13981: a2 = a2 | a4\n 13984: a2 = a2 << 0x20\n 13987: a1 = a1 | a2\n 13990: u64 [sp + 0x60] = a1\n 13993: a1 = reverse a1\n 13995: u64 [sp + 0x68] = s1\n 13998: a3 = reverse s1\n 14000: u64 [sp + 0x70] = t0\n 14003: a2 = reverse t0\n 14005: u64 [sp + 0x30] = a2\n 14008: u64 [sp + 0x28] = a3\n 14011: a2 = a2 | a3\n 14014: u64 [sp + 0x38] = a1\n 14017: a1 = a1 <u 0x1\n 14020: u64 [sp + 0xd8] = a2\n 14024: a1 = 0 if a2 != 0\n 14026: jump @272 if a1 == 0\n      : @244 (gas: 36)\n 14030: a1 = u8 [a0 + 0x18]\n 14033: u64 [sp + 0xb8] = a1\n 14037: a1 = u8 [a0 + 0x19]\n 14040: u64 [sp + 0x78] = a1\n 14043: a1 = u8 [a0 + 0x1a]\n 14046: u64 [sp + 0xa8] = a1\n 14050: a1 = u8 [a0 + 0x1b]\n 14053: u64 [sp + 0xa0] = a1\n 14057: a1 = u8 [a0 + 0x1c]\n 14060: u64 [sp + 0xd0] = a1\n 14064: a1 = u8 [a0 + 0x1d]\n 14067: u64 [sp + 0xb0] = a1\n 14071: a1 = u8 [a0 + 0x1e]\n 14074: u64 [sp + 0xc8] = a1\n 14078: a0 = u8 [a0 + 0x1f]\n 14081: u64 [sp + 0xc0] = a0\n 14085: u32 [sp + 576] = 0x20\n 14090: a0 = u64 [sp + 0x58]\n 14093: u64 [sp + 0x270] = a0\n 14097: a0 = u64 [sp + 0x48]\n 14100: u64 [sp + 0x268] = a0\n 14104: a0 = u64 [sp + 0x50]\n 14107: u64 [sp + 0x260] = a0\n 14111: s1 = u64 [sp + 0x40]\n 14114: u64 [sp + 0x278] = s1\n 14118: u64 [sp + 664] = 0\n 14122: u64 [sp + 656] = 0\n 14126: u64 [sp + 648] = 0\n 14130: u64 [sp + 640] = 0\n 14134: i32 a1 = sp + 0x260\n 14138: i32 a3 = sp + 0x280\n 14142: i32 a4 = sp + 0x240\n 14146: a2 = 0xffffffffffffffff\n 14149: a0 = 0\n 14151: ecalli 5 // 'get_storage'\n 14153: fallthrough\n      : @245 (gas: 28)\n 14154: a0 = u64 [sp + 0x290]\n 14158: a1 = u64 [sp + 0x288]\n 14162: a2 = u64 [sp + 0x280]\n 14166: a3 = u64 [sp + 0x298]\n 14170: a4 = a0 << 0x3f\n 14173: a5 = a1 >> 0x1\n 14176: a4 = a4 | a5\n 14179: a5 = a3 << 0x3f\n 14182: a0 = a0 >> 0x1\n 14185: t2 = s1\n 14187: s1 = a0 | a5\n 14190: a1 = a1 << 0x3f\n 14193: a5 = a2 >> 0x1\n 14196: a1 = a1 | a5\n 14199: a5 = a3 >> 0x1\n 14202: a2 = a2 & 0x1\n 14205: a0 = -a2\n 14207: t0 = a2 <u 0x1\n 14210: a3 = a1 & 0x7f\n 14213: t1 = a0 & s1\n 14216: a4 = a4 & a0\n 14219: a3 = a1 if a2 != 0\n 14222: a1 = a0 & a5\n 14225: a0 = a3 <u 0x20\n 14228: a0 = 0 if a4 != 0\n 14230: a2 = t1 | a1\n 14233: a0 = 0 if a2 != 0\n 14235: jump @274 if t0 != a0\n      : @246 (gas: 47)\n 14239: a0 = u64 [sp + 0x78]\n 14242: a0 = a0 << 0x8\n 14245: a2 = u64 [sp + 0xb8]\n 14249: a0 = a0 | a2\n 14252: a2 = u64 [sp + 0xa8]\n 14256: a2 = a2 << 0x10\n 14259: a5 = u64 [sp + 0xa0]\n 14263: a5 = a5 << 0x18\n 14266: a2 = a2 | a5\n 14269: a0 = a0 | a2\n 14272: a2 = u64 [sp + 0xb0]\n 14276: a2 = a2 << 0x8\n 14279: a5 = u64 [sp + 0xd0]\n 14283: a2 = a2 | a5\n 14286: a5 = u64 [sp + 0xc8]\n 14290: a5 = a5 << 0x10\n 14293: s1 = u64 [sp + 0xc0]\n 14297: s1 = s1 << 0x18\n 14300: a5 = a5 | s1\n 14303: a2 = a2 | a5\n 14306: a2 = a2 << 0x20\n 14309: a0 = a0 | a2\n 14312: u64 [sp + 0xd0] = a0\n 14316: a0 = reverse a0\n 14318: u64 [sp + 0x20] = a0\n 14321: u64 [sp + 0x1e0] = a0\n 14325: u64 [sp + 0x200] = a3\n 14329: a0 = u64 [sp + 0x50]\n 14332: u64 [sp + 0x220] = a0\n 14336: a0 = u64 [sp + 0x38]\n 14339: u64 [sp + 0x1e8] = a0\n 14343: u64 [sp + 0x208] = a4\n 14347: a0 = u64 [sp + 0x48]\n 14350: u64 [sp + 0x228] = a0\n 14354: a0 = u64 [sp + 0x30]\n 14357: u64 [sp + 0x1f0] = a0\n 14361: u64 [sp + 0x210] = t1\n 14365: a0 = u64 [sp + 0x58]\n 14368: u64 [sp + 0x230] = a0\n 14372: s1 = u64 [sp + 0x28]\n 14375: u64 [sp + 0x1f8] = s1\n 14379: u64 [sp + 0x218] = a1\n 14383: a0 = sp + 0x220\n 14387: a1 = sp + 0x200\n 14391: a2 = sp + 0x1e0\n 14395: u64 [sp + 0x238] = t2\n 14399: ra = 200, jump @232\n      : @247 [@dyn 100] (gas: 16)\n 14405: a3 = u64 [sp + 0x20]\n 14408: a2 = u64 [sp + 0x38]\n 14411: a0 = a2 >u 0\n 14413: a1 = a3 <u 0x20\n 14416: a1 = a1 ^ 0x1\n 14419: a1 = a0 if a2 != 0\n 14422: a0 = u64 [sp + 0x30]\n 14425: a0 = a0 >u 0\n 14427: a2 = s1 >u 0\n 14429: a2 = a0 if s1 == 0\n 14432: a0 = u64 [sp + 0xd8]\n 14436: a2 = a1 if a0 == 0\n 14439: a4 = u64 [sp + 0x40]\n 14442: a5 = u64 [sp + 0x58]\n 14445: s1 = u64 [sp + 0x50]\n 14448: jump @258 if a2 == 0\n      : @248 (gas: 5)\n 14452: a3 = a3 & 0xffffffffffffffe0\n 14455: u64 [sp + 0x18] = a3\n 14458: a1 = 0x20\n 14461: a0 = 0\n 14463: ra = 202, jump @0\n      : @249 [@dyn 101] (gas: 70)\n 14469: a1 = u64 [sp + 0x40]\n 14472: a1 = reverse a1\n 14474: a2 = u64 [sp + 0x58]\n 14477: a2 = reverse a2\n 14479: a3 = u64 [sp + 0x48]\n 14482: a3 = reverse a3\n 14484: a4 = reverse s1\n 14486: a5 = a4 >> 0x38\n 14489: u8 [a0 + 0x1f] = a5\n 14492: a5 = a4 >> 0x30\n 14495: u8 [a0 + 0x1e] = a5\n 14498: a5 = a4 >> 0x28\n 14501: u8 [a0 + 0x1d] = a5\n 14504: a5 = a4 >> 0x20\n 14507: u8 [a0 + 0x1c] = a5\n 14510: a5 = a4 >> 0x18\n 14513: u8 [a0 + 0x1b] = a5\n 14516: a5 = a4 >> 0x10\n 14519: u8 [a0 + 0x1a] = a5\n 14522: a5 = a4 >> 0x8\n 14525: u8 [a0 + 0x19] = a5\n 14528: u8 [a0 + 0x18] = a4\n 14531: u8 [a0 + 0x10] = a3\n 14534: a4 = a3 >> 0x38\n 14537: u8 [a0 + 0x17] = a4\n 14540: a4 = a3 >> 0x30\n 14543: u8 [a0 + 0x16] = a4\n 14546: a4 = a3 >> 0x28\n 14549: u8 [a0 + 0x15] = a4\n 14552: a4 = a3 >> 0x20\n 14555: u8 [a0 + 0x14] = a4\n 14558: a4 = a3 >> 0x18\n 14561: u8 [a0 + 0x13] = a4\n 14564: a4 = a3 >> 0x10\n 14567: u8 [a0 + 0x12] = a4\n 14570: a3 = a3 >> 0x8\n 14573: u8 [a0 + 0x11] = a3\n 14576: u8 [a0 + 0x8] = a2\n 14579: a3 = a2 >> 0x38\n 14582: u8 [a0 + 0xf] = a3\n 14585: a3 = a2 >> 0x30\n 14588: u8 [a0 + 0xe] = a3\n 14591: a3 = a2 >> 0x28\n 14594: u8 [a0 + 0xd] = a3\n 14597: a3 = a2 >> 0x20\n 14600: u8 [a0 + 0xc] = a3\n 14603: a3 = a2 >> 0x18\n 14606: u8 [a0 + 0xb] = a3\n 14609: a3 = a2 >> 0x10\n 14612: u8 [a0 + 0xa] = a3\n 14615: a2 = a2 >> 0x8\n 14618: u8 [a0 + 0x9] = a2\n 14621: u8 [a0] = a1\n 14623: a2 = a1 >> 0x38\n 14626: u8 [a0 + 0x7] = a2\n 14629: a2 = a1 >> 0x30\n 14632: u8 [a0 + 0x6] = a2\n 14635: a2 = a1 >> 0x28\n 14638: u8 [a0 + 0x5] = a2\n 14641: a2 = a1 >> 0x20\n 14644: u8 [a0 + 0x4] = a2\n 14647: a2 = a1 >> 0x18\n 14650: u8 [a0 + 0x3] = a2\n 14653: a2 = a1 >> 0x10\n 14656: u8 [a0 + 0x2] = a2\n 14659: a1 = a1 >> 0x8\n 14662: u8 [a0 + 0x1] = a1\n 14665: a1 = 0x20\n 14668: a0 = 0\n 14670: ra = 204, jump @0\n      : @250 [@dyn 102] (gas: 5)\n 14676: i32 a0 = a0 + 0\n 14678: i32 a2 = sp + 0x280\n 14682: a1 = 0x20\n 14685: ecalli 6 // 'hash_keccak_256'\n 14687: fallthrough\n      : @251 (gas: 13)\n 14688: a0 = u64 [sp + 0x280]\n 14692: a1 = u64 [sp + 0x288]\n 14696: a2 = u64 [sp + 0x290]\n 14700: a3 = u64 [sp + 0x298]\n 14704: a0 = reverse a0\n 14706: u64 [sp + 0xd0] = a0\n 14710: t0 = reverse a1\n 14712: a0 = reverse a2\n 14714: u64 [sp + 0xd8] = a0\n 14718: a0 = reverse a3\n 14720: u64 [sp + 0xc0] = a0\n 14724: a0 = u64 [sp + 0x18]\n 14727: jump @262 if a0 == 0\n      : @252 (gas: 118)\n 14731: u64 [sp + 176] = 0\n 14735: u64 [sp + 184] = 0\n 14739: u64 [sp + 168] = 0\n 14743: ra = u64 [sp + 0x80]\n 14747: s1 = ra + 0x20\n 14750: a0 = s1 <u ra\n 14753: t2 = u64 [sp + 0x88]\n 14757: a2 = t2 + a0\n 14760: a3 = a2 <u t2\n 14763: a3 = a0 if a0 == 0\n 14766: t1 = u64 [sp + 0x90]\n 14770: a3 = a3 + t1\n 14773: a0 = a3 <u t1\n 14776: u64 [sp + 0xc8] = t0\n 14780: t0 = u64 [sp + 0x98]\n 14784: t0 = t0 + a0\n 14787: a4 = a3 >u 0\n 14789: a5 = t0 >u 0\n 14791: a5 = a4 if t0 == 0\n 14794: a4 = 0x100000000\n 14804: a1 = s1\n 14806: a0 = maxu(s1, a4)\n 14809: s1 = a4 if a5 == 0\n 14812: a1 = a4 if a2 == 0\n 14815: a0 = a1 if a2 != 0\n 14818: a1 = a3 | t0\n 14821: a0 = s1 if a1 != 0\n 14824: a4 = a2\n 14826: a4 = 0 if a5 == 0\n 14828: a4 = a2 if a1 == 0\n 14831: a1 = a3\n 14833: a1 = 0 if t0 == 0\n 14835: a1 = a3 if t0 == 0\n 14838: a2 = t2 ^ 0xffffffffffffffff\n 14841: a4 = a4 + a2\n 14844: a3 = ra ^ 0xffffffffffffffff\n 14847: a0 = a0 + a3\n 14850: a3 = a0 <u a3\n 14853: a4 = a4 + a3\n 14856: a5 = a4 ^ a2\n 14859: a2 = a4 <u a2\n 14862: a2 = a3 if a5 == 0\n 14865: a5 = t1 ^ 0xffffffffffffffff\n 14868: u64 [sp + 0x78] = a5\n 14871: a5 = a5 + a1\n 14874: s1 = a5 + a2\n 14877: a1 = s1 << 0x3b\n 14880: a2 = a4 >> 0x5\n 14883: a1 = a1 | a2\n 14886: a4 = a4 << 0x3b\n 14889: a0 = a0 >> 0x5\n 14892: a2 = a0 | a4\n 14895: u64 [sp + 0xa0] = a2\n 14899: a4 = u64 [sp + 0x18]\n 14902: a0 = a4 <u 0x1\n 14905: a3 = -a0\n 14907: ra = a0 << 0x3b\n 14910: a4 = a4 + 0xffffffffffffffff\n 14913: a4 = a4 >> 0x5\n 14916: a0 = a4 - ra\n 14919: t2 = a1 ^ a3\n 14922: a4 = a1 <u a3\n 14925: t1 = a2 <u a0\n 14928: t1 = a4 if t2 != 0\n 14931: a2 = u64 [sp + 0x98]\n 14935: a4 = a2 ^ 0xffffffffffffffff\n 14938: t0 = t0 + a4\n 14941: a2 = u64 [sp + 0x78]\n 14944: a4 = a5 <u a2\n 14947: a4 = a4 + t0\n 14950: a5 = s1 <u a5\n 14953: a4 = a4 + a5\n 14956: s1 = s1 >> 0x5\n 14959: a5 = a4 << 0x3b\n 14962: a5 = a5 | s1\n 14965: a4 = a4 >> 0x5\n 14968: s1 = a3 >> 0x5\n 14971: t0 = s1 - ra\n 14974: a2 = a5 <u t0\n 14977: t2 = a4 ^ s1\n 14980: ra = a4 <u s1\n 14983: ra = a2 if t2 == 0\n 14986: a2 = a5 ^ t0\n 14989: a2 = a2 | t2\n 14992: ra = t1 if a2 == 0\n 14995: a2 = u64 [sp + 0xa0]\n 14999: a2 = a0 if ra == 0\n 15002: a1 = a3 if ra == 0\n 15005: a4 = s1 if ra == 0\n 15008: a5 = t0 if ra == 0\n 15011: a0 = a5 >> 0x3b\n 15014: a4 = a4 << 0x5\n 15017: t0 = a4 | a0\n 15020: a4 = u64 [sp + 0xb0]\n 15024: a0 = a1 >> 0x3b\n 15027: a5 = a5 << 0x5\n 15030: t2 = a5 | a0\n 15033: a5 = u64 [sp + 0xb8]\n 15037: a3 = a2 >> 0x3b\n 15040: a1 = a1 << 0x5\n 15043: a0 = a1 | a3\n 15046: t1 = a2 << 0x5\n 15049: a3 = t1 + 0x40\n 15052: u64 [sp + 0x78] = a3\n 15055: a3 = a3 <u t1\n 15058: s1 = u64 [sp + 0xa8]\n 15062: a1 = a0 + a3\n 15065: u64 [sp + 0x70] = a1\n 15068: a1 = a1 <u a0\n 15071: a1 = a3 if a3 == 0\n 15074: a1 = a1 + t2\n 15077: u64 [sp + 0x68] = a1\n 15080: a1 = a1 <u t2\n 15083: a1 = a1 + t0\n 15086: u64 [sp + 0x60] = a1\n 15089: a2 = 0x20\n 15092: a3 = u64 [sp + 0xc8]\n 15096: fallthrough\n      : @253 (gas: 31)\n 15097: u64 [sp + 0xa8] = s1\n 15101: u64 [sp + 0xc8] = a3\n 15105: a0 = u64 [sp + 0x80]\n 15109: a0 = a0 + a2\n 15112: u64 [sp + 0xa0] = a2\n 15116: a1 = a0 <u a2\n 15119: a2 = u64 [sp + 0x88]\n 15123: a2 = a2 + a4\n 15126: a2 = a2 + a1\n 15129: a3 = a2 ^ a4\n 15132: u64 [sp + 0xb0] = a4\n 15136: a4 = a2 <u a4\n 15139: a4 = a1 if a3 == 0\n 15142: a1 = u64 [sp + 0x90]\n 15146: a1 = a1 + a5\n 15149: u64 [sp + 0xb8] = a5\n 15153: a3 = a1 <u a5\n 15156: a5 = u64 [sp + 0x98]\n 15160: a5 = a5 + s1\n 15163: a3 = a3 + a5\n 15166: a4 = a4 + a1\n 15169: a1 = a4 <u a1\n 15172: a1 = a1 + a3\n 15175: a1 = a1 | a2\n 15178: a2 = a0 | a4\n 15181: a2 = a2 | a1\n 15184: a1 = a1 | a4\n 15187: a2 = a2 >> 0x20\n 15190: a1 = a1 << 0x20\n 15193: a1 = a1 | a2\n 15196: jump @271 if a1 != 0\n      : @254 (gas: 3)\n 15200: i32 a0 = a0 + 0\n 15202: a1 = 0x20\n 15205: ra = 206, jump @0\n      : @255 [@dyn 103] (gas: 111)\n 15211: a1 = u8 [a0 + 0x1]\n 15214: a2 = u8 [a0]\n 15216: a3 = u8 [a0 + 0x2]\n 15219: a4 = u8 [a0 + 0x3]\n 15222: a1 = a1 << 0x8\n 15225: a1 = a1 | a2\n 15228: a3 = a3 << 0x10\n 15231: a4 = a4 << 0x18\n 15234: a3 = a3 | a4\n 15237: a1 = a1 | a3\n 15240: a2 = u8 [a0 + 0x5]\n 15243: a3 = u8 [a0 + 0x4]\n 15246: a4 = u8 [a0 + 0x6]\n 15249: a5 = u8 [a0 + 0x7]\n 15252: a2 = a2 << 0x8\n 15255: a2 = a2 | a3\n 15258: a4 = a4 << 0x10\n 15261: a5 = a5 << 0x18\n 15264: a4 = a4 | a5\n 15267: a2 = a2 | a4\n 15270: a2 = a2 << 0x20\n 15273: t0 = a2 | a1\n 15276: a2 = u8 [a0 + 0x9]\n 15279: a3 = u8 [a0 + 0x8]\n 15282: a4 = u8 [a0 + 0xa]\n 15285: a5 = u8 [a0 + 0xb]\n 15288: a2 = a2 << 0x8\n 15291: a2 = a2 | a3\n 15294: a4 = a4 << 0x10\n 15297: a5 = a5 << 0x18\n 15300: a4 = a4 | a5\n 15303: a2 = a2 | a4\n 15306: a3 = u8 [a0 + 0xd]\n 15309: a4 = u8 [a0 + 0xc]\n 15312: a5 = u8 [a0 + 0xe]\n 15315: s1 = u8 [a0 + 0xf]\n 15318: a3 = a3 << 0x8\n 15321: a3 = a3 | a4\n 15324: a5 = a5 << 0x10\n 15327: s1 = s1 << 0x18\n 15330: a5 = a5 | s1\n 15333: a3 = a3 | a5\n 15336: a3 = a3 << 0x20\n 15339: a2 = a2 | a3\n 15342: a3 = u8 [a0 + 0x11]\n 15345: a4 = u8 [a0 + 0x10]\n 15348: a5 = u8 [a0 + 0x12]\n 15351: s1 = u8 [a0 + 0x13]\n 15354: a3 = a3 << 0x8\n 15357: a3 = a3 | a4\n 15360: a5 = a5 << 0x10\n 15363: s1 = s1 << 0x18\n 15366: a5 = a5 | s1\n 15369: a3 = a3 | a5\n 15372: a4 = u8 [a0 + 0x15]\n 15375: a5 = u8 [a0 + 0x14]\n 15378: s1 = u8 [a0 + 0x16]\n 15381: a1 = u8 [a0 + 0x17]\n 15384: a4 = a4 << 0x8\n 15387: a4 = a4 | a5\n 15390: s1 = s1 << 0x10\n 15393: a1 = a1 << 0x18\n 15396: a1 = a1 | s1\n 15399: a1 = a1 | a4\n 15402: a1 = a1 << 0x20\n 15405: a3 = a3 | a1\n 15408: a1 = u8 [a0 + 0x19]\n 15411: a4 = u8 [a0 + 0x18]\n 15414: a5 = u8 [a0 + 0x1a]\n 15417: s1 = u8 [a0 + 0x1b]\n 15420: a1 = a1 << 0x8\n 15423: a1 = a1 | a4\n 15426: a5 = a5 << 0x10\n 15429: s1 = s1 << 0x18\n 15432: a5 = a5 | s1\n 15435: a1 = a1 | a5\n 15438: a4 = u8 [a0 + 0x1d]\n 15441: a5 = u8 [a0 + 0x1c]\n 15444: s1 = u8 [a0 + 0x1e]\n 15447: a0 = u8 [a0 + 0x1f]\n 15450: a4 = a4 << 0x8\n 15453: a4 = a4 | a5\n 15456: s1 = s1 << 0x10\n 15459: a0 = a0 << 0x18\n 15462: a0 = a0 | s1\n 15465: a0 = a0 | a4\n 15468: a0 = a0 << 0x20\n 15471: a0 = a0 | a1\n 15474: a0 = reverse a0\n 15476: a1 = reverse a3\n 15478: a2 = reverse a2\n 15480: a3 = reverse t0\n 15482: a4 = u64 [sp + 0xd0]\n 15486: u64 [sp + 0x278] = a4\n 15490: a4 = u64 [sp + 0xc8]\n 15494: u64 [sp + 0x270] = a4\n 15498: a4 = u64 [sp + 0xd8]\n 15502: u64 [sp + 0x268] = a4\n 15506: s1 = u64 [sp + 0xc0]\n 15510: u64 [sp + 0x260] = s1\n 15514: u64 [sp + 0x298] = a3\n 15518: u64 [sp + 0x290] = a2\n 15522: u64 [sp + 0x288] = a1\n 15526: u64 [sp + 0x280] = a0\n 15530: i32 a1 = sp + 0x260\n 15534: i32 a3 = sp + 0x280\n 15538: a2 = 0xffffffffffffffff\n 15541: a4 = 0x20\n 15544: a0 = 0\n 15546: ecalli 9 // 'set_storage'\n 15548: fallthrough\n      : @256 (gas: 42)\n 15549: s1 = s1 + 0x1\n 15552: a0 = s1 <u 0x1\n 15555: a1 = u64 [sp + 0xd8]\n 15559: a1 = a1 + a0\n 15562: u64 [sp + 0xc0] = s1\n 15566: u64 [sp + 0xd8] = a1\n 15570: a0 = s1 | a1\n 15573: a0 = a0 <u 0x1\n 15576: a1 = u64 [sp + 0xc8]\n 15580: t0 = a1 + a0\n 15583: a2 = t0 <u a1\n 15586: a0 = u64 [sp + 0xa0]\n 15590: a1 = a0 + 0x20\n 15593: a0 = a1 <u a0\n 15596: a3 = u64 [sp + 0xb0]\n 15600: t2 = a3 + a0\n 15603: a3 = t2 <u a3\n 15606: a3 = a0 if a0 == 0\n 15609: a4 = u64 [sp + 0xb8]\n 15613: a0 = a4 + a3\n 15616: a3 = a0 <u a4\n 15619: s1 = u64 [sp + 0xa8]\n 15623: s1 = s1 + a3\n 15626: a3 = u64 [sp + 0x68]\n 15629: a3 = a3 ^ a0\n 15632: a4 = u64 [sp + 0x78]\n 15635: a4 = a4 ^ a1\n 15638: a3 = a3 | a4\n 15641: a4 = u64 [sp + 0x60]\n 15644: a4 = a4 ^ s1\n 15647: a5 = u64 [sp + 0x70]\n 15650: a5 = t2 ^ a5\n 15653: a4 = a4 | a5\n 15656: t1 = a3 | a4\n 15659: a3 = u64 [sp + 0xd0]\n 15663: a3 = a3 + a2\n 15666: u64 [sp + 0xd0] = a3\n 15670: a2 = a1\n 15672: a4 = t2\n 15674: a5 = a0\n 15676: a3 = t0\n 15678: jump @253 if t1 != 0\n      : @257 (gas: 1)\n 15682: jump @263\n      : @258 (gas: 8)\n 15685: a0 = u64 [sp + 0x68]\n 15688: a1 = u64 [sp + 0x60]\n 15691: a0 = a0 | a1\n 15694: a1 = u64 [sp + 0x70]\n 15697: a2 = u64 [sp + 0xd0]\n 15701: a1 = a1 | a2\n 15704: a0 = a0 | a1\n 15707: jump @268 if a0 == 0\n      : @259 (gas: 10)\n 15711: a0 = u64 [sp + 0x98]\n 15715: a1 = u64 [sp + 0x90]\n 15719: a0 = a0 | a1\n 15722: a1 = 0xffffffe0\n 15732: a2 = u64 [sp + 0x80]\n 15736: a1 = a2 <u a1\n 15739: a2 = u64 [sp + 0x88]\n 15743: a1 = 0 if a2 != 0\n 15745: a1 = 0 if a0 != 0\n 15747: jump @271 if a1 == 0\n      : @260 (gas: 4)\n 15751: a0 = u64 [sp + 0x18]\n 15754: i32 a0 = a0 + 0x20\n 15757: a1 = 0x20\n 15760: ra = 208, jump @0\n      : @261 [@dyn 104] (gas: 280)\n 15766: a1 = u8 [a0 + 0x19]\n 15769: a2 = u8 [a0 + 0x18]\n 15772: a3 = u8 [a0 + 0x1a]\n 15775: a4 = u8 [a0 + 0x1b]\n 15778: a1 = a1 << 0x8\n 15781: a1 = a1 | a2\n 15784: a3 = a3 << 0x10\n 15787: a4 = a4 << 0x18\n 15790: a3 = a3 | a4\n 15793: a1 = a1 | a3\n 15796: a2 = u8 [a0 + 0x1d]\n 15799: a3 = u8 [a0 + 0x1c]\n 15802: a4 = u8 [a0 + 0x1e]\n 15805: a5 = u8 [a0 + 0x1f]\n 15808: a2 = a2 << 0x8\n 15811: a2 = a2 | a3\n 15814: a4 = a4 << 0x10\n 15817: a5 = a5 << 0x18\n 15820: a4 = a4 | a5\n 15823: a2 = a2 | a4\n 15826: a2 = a2 << 0x20\n 15829: t0 = a2 | a1\n 15832: a1 = u8 [a0 + 0x11]\n 15835: a2 = u8 [a0 + 0x10]\n 15838: a3 = u8 [a0 + 0x12]\n 15841: a4 = u8 [a0 + 0x13]\n 15844: a1 = a1 << 0x8\n 15847: a1 = a1 | a2\n 15850: a3 = a3 << 0x10\n 15853: a4 = a4 << 0x18\n 15856: a3 = a3 | a4\n 15859: a1 = a1 | a3\n 15862: a2 = u8 [a0 + 0x15]\n 15865: a3 = u8 [a0 + 0x14]\n 15868: a4 = u8 [a0 + 0x16]\n 15871: a5 = u8 [a0 + 0x17]\n 15874: a2 = a2 << 0x8\n 15877: a2 = a2 | a3\n 15880: a4 = a4 << 0x10\n 15883: a5 = a5 << 0x18\n 15886: a4 = a4 | a5\n 15889: a2 = a2 | a4\n 15892: a2 = a2 << 0x20\n 15895: a1 = a1 | a2\n 15898: u64 [sp + 0xd8] = a1\n 15902: a1 = u8 [a0 + 0x9]\n 15905: a3 = u8 [a0 + 0x8]\n 15908: a4 = u8 [a0 + 0xa]\n 15911: a5 = u8 [a0 + 0xb]\n 15914: a1 = a1 << 0x8\n 15917: a1 = a1 | a3\n 15920: a4 = a4 << 0x10\n 15923: a5 = a5 << 0x18\n 15926: a4 = a4 | a5\n 15929: a1 = a1 | a4\n 15932: a3 = u8 [a0 + 0xd]\n 15935: a4 = u8 [a0 + 0xc]\n 15938: a5 = u8 [a0 + 0xe]\n 15941: s1 = u8 [a0 + 0xf]\n 15944: a3 = a3 << 0x8\n 15947: a3 = a3 | a4\n 15950: a5 = a5 << 0x10\n 15953: s1 = s1 << 0x18\n 15956: a5 = a5 | s1\n 15959: a3 = a3 | a5\n 15962: a3 = a3 << 0x20\n 15965: a1 = a1 | a3\n 15968: u64 [sp + 0xd0] = a1\n 15972: a1 = u8 [a0 + 0x1]\n 15975: a4 = u8 [a0]\n 15977: a5 = u8 [a0 + 0x2]\n 15980: s1 = u8 [a0 + 0x3]\n 15983: a1 = a1 << 0x8\n 15986: a1 = a1 | a4\n 15989: a5 = a5 << 0x10\n 15992: s1 = s1 << 0x18\n 15995: a5 = a5 | s1\n 15998: a1 = a1 | a5\n 16001: a4 = u8 [a0 + 0x5]\n 16004: a5 = u8 [a0 + 0x4]\n 16007: s1 = u8 [a0 + 0x6]\n 16010: a0 = u8 [a0 + 0x7]\n 16013: a4 = a4 << 0x8\n 16016: a4 = a4 | a5\n 16019: s1 = s1 << 0x10\n 16022: a0 = a0 << 0x18\n 16025: a0 = a0 | s1\n 16028: a0 = a0 | a4\n 16031: a0 = a0 << 0x20\n 16034: ra = a0 | a1\n 16037: u8 [sp + 479] = 0\n 16041: u8 [sp + 478] = 0\n 16045: u8 [sp + 477] = 0\n 16049: u8 [sp + 476] = 0\n 16053: u8 [sp + 475] = 0\n 16057: u8 [sp + 474] = 0\n 16061: u8 [sp + 473] = 0\n 16065: u8 [sp + 472] = 0\n 16069: u8 [sp + 471] = 0\n 16073: u8 [sp + 470] = 0\n 16077: u8 [sp + 469] = 0\n 16081: u8 [sp + 468] = 0\n 16085: u8 [sp + 467] = 0\n 16089: u8 [sp + 466] = 0\n 16093: u8 [sp + 465] = 0\n 16097: u8 [sp + 464] = 0\n 16101: u8 [sp + 463] = 0\n 16105: u8 [sp + 462] = 0\n 16109: u8 [sp + 461] = 0\n 16113: u8 [sp + 460] = 0\n 16117: u8 [sp + 459] = 0\n 16121: u8 [sp + 458] = 0\n 16125: u8 [sp + 457] = 0\n 16129: u8 [sp + 456] = 0\n 16133: u8 [sp + 455] = 0\n 16137: u8 [sp + 454] = 0\n 16141: u8 [sp + 453] = 0\n 16145: u8 [sp + 452] = 0\n 16149: u8 [sp + 451] = 0\n 16153: u8 [sp + 450] = 0\n 16157: u8 [sp + 449] = 0\n 16161: u8 [sp + 448] = 0\n 16165: u8 [sp + 447] = 0xff\n 16171: u8 [sp + 446] = 0xff\n 16177: u8 [sp + 445] = 0xff\n 16183: u8 [sp + 443] = 0xff\n 16189: u8 [sp + 440] = 0xffffffffffffffff\n 16194: u8 [sp + 439] = 0xff\n 16200: u8 [sp + 438] = 0xff\n 16206: u8 [sp + 437] = 0xff\n 16212: u8 [sp + 435] = 0xff\n 16218: u8 [sp + 432] = 0xffffffffffffffff\n 16223: u8 [sp + 431] = 0xff\n 16229: u8 [sp + 430] = 0xff\n 16235: u8 [sp + 429] = 0xff\n 16241: u8 [sp + 427] = 0xff\n 16247: u8 [sp + 424] = 0xffffffffffffffff\n 16252: u8 [sp + 423] = 0xff\n 16258: u8 [sp + 422] = 0xff\n 16264: u8 [sp + 421] = 0xff\n 16270: u8 [sp + 419] = 0xff\n 16276: u8 [sp + 416] = 0xffffffffffffffff\n 16281: a1 = 0xffffffff\n 16291: u8 [sp + 0x1bc] = a1\n 16295: a5 = 0xffffffffffff\n 16305: u8 [sp + 0x1ba] = a5\n 16309: a4 = 0xffffffffffffff\n 16319: u8 [sp + 0x1b9] = a4\n 16323: u8 [sp + 0x1b4] = a1\n 16327: u8 [sp + 0x1b2] = a5\n 16331: u8 [sp + 0x1b1] = a4\n 16335: u8 [sp + 0x1ac] = a1\n 16339: u8 [sp + 0x1aa] = a5\n 16343: u8 [sp + 0x1a9] = a4\n 16347: u8 [sp + 0x1a4] = a1\n 16351: u8 [sp + 0x1a2] = a5\n 16355: u8 [sp + 0x1a1] = a4\n 16359: t2 = u64 [sp + 0x20]\n 16362: a4 = t2 & 0x1f\n 16365: a1 = sp + 0x1a0\n 16369: a4 = a4 + a1\n 16372: a1 = u8 [a4 + 0x19]\n 16375: a5 = u8 [a4 + 0x18]\n 16378: s1 = u8 [a4 + 0x1a]\n 16381: a2 = u8 [a4 + 0x1b]\n 16384: a1 = a1 << 0x8\n 16387: a1 = a1 | a5\n 16390: s1 = s1 << 0x10\n 16393: a2 = a2 << 0x18\n 16396: a2 = a2 | s1\n 16399: a1 = a1 | a2\n 16402: a2 = u8 [a4 + 0x1d]\n 16405: a5 = u8 [a4 + 0x1c]\n 16408: s1 = u8 [a4 + 0x1e]\n 16411: a3 = u8 [a4 + 0x1f]\n 16414: a2 = a2 << 0x8\n 16417: a2 = a2 | a5\n 16420: s1 = s1 << 0x10\n 16423: a3 = a3 << 0x18\n 16426: a3 = a3 | s1\n 16429: a2 = a2 | a3\n 16432: a2 = a2 << 0x20\n 16435: t1 = a2 | a1\n 16438: a1 = u8 [a4 + 0x11]\n 16441: a2 = u8 [a4 + 0x10]\n 16444: a3 = u8 [a4 + 0x12]\n 16447: s1 = u8 [a4 + 0x13]\n 16450: a1 = a1 << 0x8\n 16453: a1 = a1 | a2\n 16456: a3 = a3 << 0x10\n 16459: s1 = s1 << 0x18\n 16462: a3 = a3 | s1\n 16465: a1 = a1 | a3\n 16468: a2 = u8 [a4 + 0x15]\n 16471: a3 = u8 [a4 + 0x14]\n 16474: s1 = u8 [a4 + 0x16]\n 16477: a0 = u8 [a4 + 0x17]\n 16480: a2 = a2 << 0x8\n 16483: a2 = a2 | a3\n 16486: s1 = s1 << 0x10\n 16489: a0 = a0 << 0x18\n 16492: a0 = a0 | s1\n 16495: a0 = a0 | a2\n 16498: a0 = a0 << 0x20\n 16501: s1 = a0 | a1\n 16504: a0 = u8 [a4 + 0x9]\n 16507: a1 = u8 [a4 + 0x8]\n 16510: a2 = u8 [a4 + 0xa]\n 16513: a3 = u8 [a4 + 0xb]\n 16516: a0 = a0 << 0x8\n 16519: a0 = a0 | a1\n 16522: a2 = a2 << 0x10\n 16525: a3 = a3 << 0x18\n 16528: a2 = a2 | a3\n 16531: a5 = a2 | a0\n 16534: a1 = u8 [a4 + 0xd]\n 16537: a2 = u8 [a4 + 0xc]\n 16540: a3 = u8 [a4 + 0xe]\n 16543: a0 = u8 [a4 + 0xf]\n 16546: a1 = a1 << 0x8\n 16549: a1 = a1 | a2\n 16552: a3 = a3 << 0x10\n 16555: a0 = a0 << 0x18\n 16558: a0 = a0 | a3\n 16561: a0 = a0 | a1\n 16564: a0 = a0 << 0x20\n 16567: a1 = a0 | a5\n 16570: a0 = u8 [a4 + 0x1]\n 16573: a2 = u8 [a4]\n 16575: a3 = u8 [a4 + 0x2]\n 16578: a5 = u8 [a4 + 0x3]\n 16581: a0 = a0 << 0x8\n 16584: a0 = a0 | a2\n 16587: a3 = a3 << 0x10\n 16590: a5 = a5 << 0x18\n 16593: a3 = a3 | a5\n 16596: a0 = a0 | a3\n 16599: a2 = u8 [a4 + 0x5]\n 16602: a3 = u8 [a4 + 0x4]\n 16605: a5 = u8 [a4 + 0x6]\n 16608: a4 = u8 [a4 + 0x7]\n 16611: a2 = a2 << 0x8\n 16614: a2 = a2 | a3\n 16617: a5 = a5 << 0x10\n 16620: a4 = a4 << 0x18\n 16623: a4 = a4 | a5\n 16626: a2 = a2 | a4\n 16629: a2 = a2 << 0x20\n 16632: a0 = a0 | a2\n 16635: a2 = reverse t0\n 16637: t0 = a2 & ~a0\n 16640: a0 = u64 [sp + 0xd8]\n 16644: a0 = reverse a0\n 16646: a2 = a0 & ~a1\n 16649: a0 = reverse ra\n 16651: a1 = u64 [sp + 0xd0]\n 16655: a1 = reverse a1\n 16657: a1 = a1 & ~s1\n 16660: a0 = a0 & ~t1\n 16663: a4 = t2 >> 0x3f\n 16666: a3 = u64 [sp + 0x38]\n 16669: a5 = a3 << 0x1\n 16672: a4 = a4 | a5\n 16675: a5 = a3 >> 0x3f\n 16678: a3 = u64 [sp + 0x30]\n 16681: s1 = a3 << 0x1\n 16684: a5 = a5 | s1\n 16687: s1 = a3 >> 0x3f\n 16690: a3 = u64 [sp + 0x28]\n 16693: a3 = a3 << 0x1\n 16696: a3 = a3 | s1\n 16699: t1 = a0 | a3\n 16702: a1 = a1 | a5\n 16705: a2 = a2 | a4\n 16708: a3 = t2 << 0x1\n 16711: a3 = t0 | a3\n 16714: a4 = u64 [sp + 0x40]\n 16717: a5 = u64 [sp + 0x58]\n 16720: s1 = u64 [sp + 0x50]\n 16723: jump @269\n      : @262 (gas: 4)\n 16726: t2 = 0\n 16728: s1 = 0\n 16730: a1 = 0x20\n 16733: fallthrough\n      : @263 (gas: 10)\n 16734: a5 = u64 [sp + 0x20]\n 16737: a2 = u64 [sp + 0x18]\n 16740: a2 = a2 ^ a5\n 16743: a3 = u64 [sp + 0x30]\n 16746: a2 = a2 | a3\n 16749: a3 = u64 [sp + 0x38]\n 16752: a4 = u64 [sp + 0x28]\n 16755: a3 = a3 | a4\n 16758: a2 = a2 | a3\n 16761: jump @267 if a2 == 0\n      : @264 (gas: 27)\n 16765: u64 [sp + 0xc8] = t0\n 16769: a2 = u64 [sp + 0x80]\n 16773: a2 = a2 + a1\n 16776: a3 = a2 <u a1\n 16779: a4 = u64 [sp + 0x88]\n 16783: a4 = a4 + t2\n 16786: a4 = a4 + a3\n 16789: a5 = a4 ^ t2\n 16792: a1 = a4 <u t2\n 16795: a1 = a3 if a5 == 0\n 16798: a3 = u64 [sp + 0x90]\n 16802: a3 = a3 + a0\n 16805: a1 = a1 + a3\n 16808: a5 = a1 <u a3\n 16811: a0 = a3 <u a0\n 16814: a3 = u64 [sp + 0x98]\n 16818: a3 = a3 + s1\n 16821: a0 = a0 + a3\n 16824: a0 = a0 + a5\n 16827: a3 = a2 | a1\n 16830: a0 = a0 | a4\n 16833: a3 = a3 | a0\n 16836: a3 = a3 >> 0x20\n 16839: a0 = a0 | a1\n 16842: a0 = a0 << 0x20\n 16845: a0 = a0 | a3\n 16848: jump @271 if a0 != 0\n      : @265 (gas: 3)\n 16852: i32 a0 = a2 + 0\n 16854: a1 = 0x20\n 16857: ra = 210, jump @0\n      : @266 [@dyn 105] (gas: 277)\n 16863: a1 = u8 [a0 + 0x19]\n 16866: a2 = u8 [a0 + 0x18]\n 16869: a3 = u8 [a0 + 0x1a]\n 16872: a4 = u8 [a0 + 0x1b]\n 16875: a1 = a1 << 0x8\n 16878: a1 = a1 | a2\n 16881: a3 = a3 << 0x10\n 16884: a4 = a4 << 0x18\n 16887: a3 = a3 | a4\n 16890: a1 = a1 | a3\n 16893: a2 = u8 [a0 + 0x1d]\n 16896: a3 = u8 [a0 + 0x1c]\n 16899: a4 = u8 [a0 + 0x1e]\n 16902: a5 = u8 [a0 + 0x1f]\n 16905: a2 = a2 << 0x8\n 16908: a2 = a2 | a3\n 16911: a4 = a4 << 0x10\n 16914: a5 = a5 << 0x18\n 16917: a4 = a4 | a5\n 16920: a2 = a2 | a4\n 16923: a2 = a2 << 0x20\n 16926: a1 = a1 | a2\n 16929: u64 [sp + 0xb8] = a1\n 16933: a1 = u8 [a0 + 0x11]\n 16936: a2 = u8 [a0 + 0x10]\n 16939: a3 = u8 [a0 + 0x12]\n 16942: a4 = u8 [a0 + 0x13]\n 16945: a1 = a1 << 0x8\n 16948: a1 = a1 | a2\n 16951: a3 = a3 << 0x10\n 16954: a4 = a4 << 0x18\n 16957: a3 = a3 | a4\n 16960: a1 = a1 | a3\n 16963: a2 = u8 [a0 + 0x15]\n 16966: a3 = u8 [a0 + 0x14]\n 16969: a4 = u8 [a0 + 0x16]\n 16972: a5 = u8 [a0 + 0x17]\n 16975: a2 = a2 << 0x8\n 16978: a2 = a2 | a3\n 16981: a4 = a4 << 0x10\n 16984: a5 = a5 << 0x18\n 16987: a4 = a4 | a5\n 16990: a2 = a2 | a4\n 16993: a2 = a2 << 0x20\n 16996: t1 = a2 | a1\n 16999: a1 = u8 [a0 + 0x9]\n 17002: a3 = u8 [a0 + 0x8]\n 17005: a4 = u8 [a0 + 0xa]\n 17008: a5 = u8 [a0 + 0xb]\n 17011: a1 = a1 << 0x8\n 17014: a1 = a1 | a3\n 17017: a4 = a4 << 0x10\n 17020: a5 = a5 << 0x18\n 17023: a4 = a4 | a5\n 17026: a1 = a1 | a4\n 17029: a3 = u8 [a0 + 0xd]\n 17032: a4 = u8 [a0 + 0xc]\n 17035: a5 = u8 [a0 + 0xe]\n 17038: s1 = u8 [a0 + 0xf]\n 17041: a3 = a3 << 0x8\n 17044: a3 = a3 | a4\n 17047: a5 = a5 << 0x10\n 17050: s1 = s1 << 0x18\n 17053: a5 = a5 | s1\n 17056: a3 = a3 | a5\n 17059: a3 = a3 << 0x20\n 17062: t2 = a3 | a1\n 17065: a1 = u8 [a0 + 0x1]\n 17068: a4 = u8 [a0]\n 17070: a5 = u8 [a0 + 0x2]\n 17073: s1 = u8 [a0 + 0x3]\n 17076: a1 = a1 << 0x8\n 17079: a1 = a1 | a4\n 17082: a5 = a5 << 0x10\n 17085: s1 = s1 << 0x18\n 17088: a5 = a5 | s1\n 17091: a1 = a1 | a5\n 17094: a4 = u8 [a0 + 0x5]\n 17097: a5 = u8 [a0 + 0x4]\n 17100: s1 = u8 [a0 + 0x6]\n 17103: a0 = u8 [a0 + 0x7]\n 17106: a4 = a4 << 0x8\n 17109: a4 = a4 | a5\n 17112: s1 = s1 << 0x10\n 17115: a0 = a0 << 0x18\n 17118: a0 = a0 | s1\n 17121: a0 = a0 | a4\n 17124: a0 = a0 << 0x20\n 17127: ra = a0 | a1\n 17130: u8 [sp + 415] = 0\n 17134: u8 [sp + 414] = 0\n 17138: u8 [sp + 413] = 0\n 17142: u8 [sp + 412] = 0\n 17146: u8 [sp + 411] = 0\n 17150: u8 [sp + 410] = 0\n 17154: u8 [sp + 409] = 0\n 17158: u8 [sp + 408] = 0\n 17162: u8 [sp + 407] = 0\n 17166: u8 [sp + 406] = 0\n 17170: u8 [sp + 405] = 0\n 17174: u8 [sp + 404] = 0\n 17178: u8 [sp + 403] = 0\n 17182: u8 [sp + 402] = 0\n 17186: u8 [sp + 401] = 0\n 17190: u8 [sp + 400] = 0\n 17194: u8 [sp + 399] = 0\n 17198: u8 [sp + 398] = 0\n 17202: u8 [sp + 397] = 0\n 17206: u8 [sp + 396] = 0\n 17210: u8 [sp + 395] = 0\n 17214: u8 [sp + 394] = 0\n 17218: u8 [sp + 393] = 0\n 17222: u8 [sp + 392] = 0\n 17226: u8 [sp + 391] = 0\n 17230: u8 [sp + 390] = 0\n 17234: u8 [sp + 389] = 0\n 17238: u8 [sp + 388] = 0\n 17242: u8 [sp + 387] = 0\n 17246: u8 [sp + 386] = 0\n 17250: u8 [sp + 385] = 0\n 17254: u8 [sp + 384] = 0\n 17258: u8 [sp + 383] = 0xff\n 17264: u8 [sp + 382] = 0xff\n 17270: u8 [sp + 381] = 0xff\n 17276: u8 [sp + 379] = 0xff\n 17282: u8 [sp + 376] = 0xffffffffffffffff\n 17287: u8 [sp + 375] = 0xff\n 17293: u8 [sp + 374] = 0xff\n 17299: u8 [sp + 373] = 0xff\n 17305: u8 [sp + 371] = 0xff\n 17311: u8 [sp + 368] = 0xffffffffffffffff\n 17316: u8 [sp + 367] = 0xff\n 17322: u8 [sp + 366] = 0xff\n 17328: u8 [sp + 365] = 0xff\n 17334: u8 [sp + 363] = 0xff\n 17340: u8 [sp + 360] = 0xffffffffffffffff\n 17345: u8 [sp + 359] = 0xff\n 17351: u8 [sp + 358] = 0xff\n 17357: u8 [sp + 357] = 0xff\n 17363: u8 [sp + 355] = 0xff\n 17369: u8 [sp + 352] = 0xffffffffffffffff\n 17374: a1 = 0xffffffff\n 17384: u8 [sp + 0x17c] = a1\n 17388: a5 = 0xffffffffffff\n 17398: u8 [sp + 0x17a] = a5\n 17402: a4 = 0xffffffffffffff\n 17412: u8 [sp + 0x179] = a4\n 17416: u8 [sp + 0x174] = a1\n 17420: u8 [sp + 0x172] = a5\n 17424: u8 [sp + 0x171] = a4\n 17428: u8 [sp + 0x16c] = a1\n 17432: u8 [sp + 0x16a] = a5\n 17436: u8 [sp + 0x169] = a4\n 17440: u8 [sp + 0x164] = a1\n 17444: u8 [sp + 0x162] = a5\n 17448: u8 [sp + 0x161] = a4\n 17452: a4 = u64 [sp + 0x20]\n 17455: a4 = a4 & 0x1f\n 17458: a1 = sp + 0x160\n 17462: a4 = a4 + a1\n 17465: a1 = u8 [a4 + 0x19]\n 17468: a5 = u8 [a4 + 0x18]\n 17471: s1 = u8 [a4 + 0x1a]\n 17474: a2 = u8 [a4 + 0x1b]\n 17477: a1 = a1 << 0x8\n 17480: a1 = a1 | a5\n 17483: s1 = s1 << 0x10\n 17486: a2 = a2 << 0x18\n 17489: a2 = a2 | s1\n 17492: a1 = a1 | a2\n 17495: a2 = u8 [a4 + 0x1d]\n 17498: a5 = u8 [a4 + 0x1c]\n 17501: s1 = u8 [a4 + 0x1e]\n 17504: a3 = u8 [a4 + 0x1f]\n 17507: a2 = a2 << 0x8\n 17510: a2 = a2 | a5\n 17513: s1 = s1 << 0x10\n 17516: a3 = a3 << 0x18\n 17519: a3 = a3 | s1\n 17522: a2 = a2 | a3\n 17525: a2 = a2 << 0x20\n 17528: t0 = a2 | a1\n 17531: a1 = u8 [a4 + 0x11]\n 17534: a2 = u8 [a4 + 0x10]\n 17537: a3 = u8 [a4 + 0x12]\n 17540: s1 = u8 [a4 + 0x13]\n 17543: a1 = a1 << 0x8\n 17546: a1 = a1 | a2\n 17549: a3 = a3 << 0x10\n 17552: s1 = s1 << 0x18\n 17555: a3 = a3 | s1\n 17558: a1 = a1 | a3\n 17561: a2 = u8 [a4 + 0x15]\n 17564: a3 = u8 [a4 + 0x14]\n 17567: s1 = u8 [a4 + 0x16]\n 17570: a0 = u8 [a4 + 0x17]\n 17573: a2 = a2 << 0x8\n 17576: a2 = a2 | a3\n 17579: s1 = s1 << 0x10\n 17582: a0 = a0 << 0x18\n 17585: a0 = a0 | s1\n 17588: a0 = a0 | a2\n 17591: a0 = a0 << 0x20\n 17594: s1 = a0 | a1\n 17597: a0 = u8 [a4 + 0x9]\n 17600: a1 = u8 [a4 + 0x8]\n 17603: a2 = u8 [a4 + 0xa]\n 17606: a3 = u8 [a4 + 0xb]\n 17609: a0 = a0 << 0x8\n 17612: a0 = a0 | a1\n 17615: a2 = a2 << 0x10\n 17618: a3 = a3 << 0x18\n 17621: a2 = a2 | a3\n 17624: a5 = a2 | a0\n 17627: a1 = u8 [a4 + 0xd]\n 17630: a2 = u8 [a4 + 0xc]\n 17633: a3 = u8 [a4 + 0xe]\n 17636: a0 = u8 [a4 + 0xf]\n 17639: a1 = a1 << 0x8\n 17642: a1 = a1 | a2\n 17645: a3 = a3 << 0x10\n 17648: a0 = a0 << 0x18\n 17651: a0 = a0 | a3\n 17654: a0 = a0 | a1\n 17657: a0 = a0 << 0x20\n 17660: a1 = a0 | a5\n 17663: a0 = u8 [a4 + 0x1]\n 17666: a2 = u8 [a4]\n 17668: a3 = u8 [a4 + 0x2]\n 17671: a5 = u8 [a4 + 0x3]\n 17674: a0 = a0 << 0x8\n 17677: a0 = a0 | a2\n 17680: a3 = a3 << 0x10\n 17683: a5 = a5 << 0x18\n 17686: a3 = a3 | a5\n 17689: a0 = a0 | a3\n 17692: a2 = u8 [a4 + 0x5]\n 17695: a3 = u8 [a4 + 0x4]\n 17698: a5 = u8 [a4 + 0x6]\n 17701: a4 = u8 [a4 + 0x7]\n 17704: a2 = a2 << 0x8\n 17707: a2 = a2 | a3\n 17710: a5 = a5 << 0x10\n 17713: a4 = a4 << 0x18\n 17716: a4 = a4 | a5\n 17719: a2 = a2 | a4\n 17722: a2 = a2 << 0x20\n 17725: a0 = a0 | a2\n 17728: a2 = u64 [sp + 0xb8]\n 17732: a2 = reverse a2\n 17734: a0 = a2 & ~a0\n 17737: a2 = reverse t1\n 17739: a1 = a2 & ~a1\n 17742: a2 = reverse t2\n 17744: a2 = a2 & ~s1\n 17747: a3 = reverse ra\n 17749: a3 = a3 & ~t0\n 17752: a4 = u64 [sp + 0xd0]\n 17756: u64 [sp + 0x278] = a4\n 17760: a4 = u64 [sp + 0xc8]\n 17764: u64 [sp + 0x270] = a4\n 17768: a4 = u64 [sp + 0xd8]\n 17772: u64 [sp + 0x268] = a4\n 17776: a4 = u64 [sp + 0xc0]\n 17780: u64 [sp + 0x260] = a4\n 17784: u64 [sp + 0x298] = a3\n 17788: u64 [sp + 0x290] = a2\n 17792: u64 [sp + 0x288] = a1\n 17796: u64 [sp + 0x280] = a0\n 17800: i32 a1 = sp + 0x260\n 17804: i32 a3 = sp + 0x280\n 17808: a2 = 0xffffffffffffffff\n 17811: a4 = 0x20\n 17814: a0 = 0\n 17816: ecalli 9 // 'set_storage'\n 17818: a5 = u64 [sp + 0x20]\n 17821: fallthrough\n      : @267 (gas: 27)\n 17822: a2 = u64 [sp + 0x30]\n 17825: a0 = a2 >> 0x3f\n 17828: a1 = u64 [sp + 0x28]\n 17831: a1 = a1 << 0x1\n 17834: a0 = a0 | a1\n 17837: a3 = u64 [sp + 0x38]\n 17840: a1 = a3 >> 0x3f\n 17843: a2 = a2 << 0x1\n 17846: a1 = a1 | a2\n 17849: a2 = a5 >> 0x3f\n 17852: a3 = a3 << 0x1\n 17855: a2 = a2 | a3\n 17858: a3 = a5 << 0x1\n 17861: a3 = a3 + 0x1\n 17864: a4 = u64 [sp + 0x48]\n 17867: u64 [sp + 0x268] = a4\n 17871: a4 = u64 [sp + 0x50]\n 17874: u64 [sp + 0x260] = a4\n 17878: a4 = u64 [sp + 0x58]\n 17881: u64 [sp + 0x270] = a4\n 17885: a4 = u64 [sp + 0x40]\n 17888: u64 [sp + 0x278] = a4\n 17892: u64 [sp + 0x280] = a3\n 17896: u64 [sp + 0x288] = a2\n 17900: u64 [sp + 0x290] = a1\n 17904: u64 [sp + 0x298] = a0\n 17908: jump @270\n      : @268 (gas: 5)\n 17910: a3 = 0\n 17912: a2 = 0\n 17914: a1 = 0\n 17916: t1 = 0\n 17918: fallthrough\n      : @269 (gas: 10)\n 17919: a0 = u64 [sp + 0x48]\n 17922: u64 [sp + 0x268] = a0\n 17926: u64 [sp + 0x260] = s1\n 17930: u64 [sp + 0x270] = a5\n 17934: u64 [sp + 0x278] = a4\n 17938: u64 [sp + 0x280] = a3\n 17942: u64 [sp + 0x288] = a2\n 17946: u64 [sp + 0x290] = a1\n 17950: u64 [sp + 0x298] = t1\n 17954: fallthrough\n      : @270 (gas: 12)\n 17955: i32 a1 = sp + 0x260\n 17959: i32 a3 = sp + 0x280\n 17963: a2 = 0xffffffffffffffff\n 17966: a4 = 0x20\n 17969: a0 = 0\n 17971: ecalli 9 // 'set_storage'\n 17973: sp = s0 + 0xfffffffffffffd40\n 17977: ra = u64 [sp + 0x2b8]\n 17981: s0 = u64 [sp + 0x2b0]\n 17985: s1 = u64 [sp + 0x2a8]\n 17989: sp = sp + 0x2c0\n 17993: ret\n      : @271 (gas: 1)\n 17995: trap\n      : @272 (gas: 8)\n 17996: u64 [sp + 272] = 0\n 18000: u64 [sp + 264] = 0\n 18004: u64 [sp + 256] = 0\n 18008: a0 = 0x4e487b7100000000\n 18018: a1 = sp + 0x100\n 18022: u64 [sp + 0x118] = a0\n 18026: a0 = 0\n 18028: ra = 212, jump @23\n      : @273 [@dyn 106] (gas: 8)\n 18034: u64 [sp + 248] = 0\n 18038: u64 [sp + 240] = 0\n 18042: u64 [sp + 224] = 0x41\n 18047: a0 = 0x4\n 18050: a1 = sp + 0xe0\n 18054: u64 [sp + 232] = 0\n 18058: ra = 0xd8\n 18062: jump @23\n      : @274 (gas: 8)\n 18065: u64 [sp + 336] = 0\n 18069: u64 [sp + 328] = 0\n 18073: u64 [sp + 320] = 0\n 18077: a0 = 0x4e487b7100000000\n 18087: a1 = sp + 0x140\n 18091: u64 [sp + 0x158] = a0\n 18095: a0 = 0\n 18097: ra = 214, jump @23\n      : @275 [@dyn 107] (gas: 7)\n 18103: u64 [sp + 312] = 0\n 18107: u64 [sp + 304] = 0\n 18111: u64 [sp + 288] = 0x22\n 18116: a0 = 0x4\n 18119: a1 = sp + 0x120\n 18123: u64 [sp + 296] = 0\n 18127: ra = 216, jump @23\n      : @276 [@dyn 108] (gas: 3)\n 18133: a1 = 0x24\n 18136: a0 = 0\n 18138: ra = 218, jump @0\n      : @277 [@dyn 109] (gas: 6)\n 18144: i32 a1 = a0 + 0\n 18146: a0 = 0x1\n 18149: a2 = 0x24\n 18152: ra = 0xdc\n 18156: ecalli 7 // 'seal_return'\n 18158: fallthrough\n      : @278 [@dyn 110] (gas: 24)\n 18159: sp = sp + 0xffffffffffffffb0\n 18162: u64 [sp + 0x48] = ra\n 18165: u64 [sp + 0x40] = s0\n 18168: s0 = sp + 0x50\n 18171: sp = sp & 0xfffffffffffffff0\n 18174: t0 = u64 [a0]\n 18176: t1 = u64 [a0 + 0x8]\n 18179: a4 = u64 [a0 + 0x10]\n 18182: a0 = u64 [a0 + 0x18]\n 18185: a5 = u64 [a1]\n 18187: a2 = u64 [a1 + 0x8]\n 18190: a3 = u64 [a1 + 0x10]\n 18193: a1 = u64 [a1 + 0x18]\n 18196: u64 [sp + 0x18] = a1\n 18199: u64 [sp + 0x10] = a3\n 18202: u64 [sp + 0x8] = a2\n 18205: u64 [sp] = a5\n 18207: u64 [sp + 0x38] = a0\n 18210: u64 [sp + 0x30] = a4\n 18213: u64 [sp + 0x28] = t1\n 18216: a0 = sp + 0x20\n 18219: a1 = sp\n 18221: u64 [sp + 0x20] = t0\n 18224: ra = 222, jump @241\n      : @279 [@dyn 111] (gas: 5)\n 18230: sp = s0 + 0xffffffffffffffb0\n 18233: ra = u64 [sp + 0x48]\n 18236: s0 = u64 [sp + 0x40]\n 18239: sp = sp + 0x50\n 18242: ret\n      : @280 [@dyn 112] (gas: 74)\n 18244: a1 = u64 [sp + 0xf0]\n 18248: a3 = reverse a1\n 18250: a1 = u64 [sp + 0xf8]\n 18254: a2 = reverse a1\n 18256: a4 = s1 << 0x20\n 18259: u64 [sp + 0xf8] = a4\n 18263: a1 = s1 >> 0x18\n 18266: u8 [a0 + 0xf] = a1\n 18269: a1 = s1 >> 0x10\n 18272: u8 [a0 + 0xe] = a1\n 18275: a1 = s1 >> 0x8\n 18278: u8 [a0 + 0xd] = a1\n 18281: u8 [a0 + 0xc] = s1\n 18284: s1 = a2\n 18286: u8 [a0 + 11] = 0\n 18289: u8 [a0 + 10] = 0\n 18292: u8 [a0 + 9] = 0\n 18295: u8 [a0 + 0x8] = a4\n 18298: u8 [a0 + 7] = 0\n 18301: u8 [a0 + 6] = 0\n 18304: u8 [a0 + 5] = 0\n 18307: u8 [a0 + 4] = 0\n 18310: u8 [a0 + 3] = 0\n 18313: u8 [a0 + 2] = 0\n 18316: u8 [a0 + 1] = 0\n 18319: u8 [a0 + 0] = 0\n 18321: u8 [a0 + 0x18] = a2\n 18324: u8 [a0 + 0x10] = a3\n 18327: a1 = a2 >> 0x38\n 18330: u64 [sp + 0xc0] = a1\n 18334: u8 [a0 + 0x1f] = a1\n 18337: a1 = a2 >> 0x30\n 18340: u64 [sp + 0xb8] = a1\n 18344: u8 [a0 + 0x1e] = a1\n 18347: a1 = a2 >> 0x28\n 18350: u64 [sp + 0xb0] = a1\n 18354: u8 [a0 + 0x1d] = a1\n 18357: a1 = a2 >> 0x20\n 18360: u64 [sp + 0xa8] = a1\n 18364: u8 [a0 + 0x1c] = a1\n 18367: a1 = a2 >> 0x18\n 18370: u64 [sp + 0xa0] = a1\n 18374: u8 [a0 + 0x1b] = a1\n 18377: a1 = a2 >> 0x10\n 18380: u64 [sp + 0x98] = a1\n 18384: u8 [a0 + 0x1a] = a1\n 18387: a1 = a2 >> 0x8\n 18390: u64 [sp + 0x90] = a1\n 18394: u8 [a0 + 0x19] = a1\n 18397: a1 = a3 >> 0x38\n 18400: u64 [sp + 0x88] = a1\n 18404: u8 [a0 + 0x17] = a1\n 18407: a1 = a3 >> 0x30\n 18410: u64 [sp + 0x80] = a1\n 18414: u8 [a0 + 0x16] = a1\n 18417: a1 = a3 >> 0x28\n 18420: u64 [sp + 0x78] = a1\n 18423: u8 [a0 + 0x15] = a1\n 18426: a1 = a3 >> 0x20\n 18429: u64 [sp + 0x70] = a1\n 18432: u8 [a0 + 0x14] = a1\n 18435: a1 = a3 >> 0x18\n 18438: u64 [sp + 0x68] = a1\n 18441: u8 [a0 + 0x13] = a1\n 18444: a1 = a3 >> 0x10\n 18447: u64 [sp + 0x60] = a1\n 18450: u8 [a0 + 0x12] = a1\n 18453: u64 [sp + 0xf0] = a3\n 18457: a1 = a3 >> 0x8\n 18460: u64 [sp + 0x58] = a1\n 18463: u8 [a0 + 0x11] = a1\n 18466: a0 = 0x20\n 18469: a1 = 0x20\n 18472: ra = 226, jump @0\n      : @281 [@dyn 113] (gas: 35)\n 18478: u8 [a0 + 31] = 0x2\n 18482: u8 [a0 + 30] = 0\n 18485: u8 [a0 + 29] = 0\n 18488: u8 [a0 + 28] = 0\n 18491: u8 [a0 + 27] = 0\n 18494: u8 [a0 + 26] = 0\n 18497: u8 [a0 + 25] = 0\n 18500: u8 [a0 + 24] = 0\n 18503: u8 [a0 + 23] = 0\n 18506: u8 [a0 + 22] = 0\n 18509: u8 [a0 + 21] = 0\n 18512: u8 [a0 + 20] = 0\n 18515: u8 [a0 + 19] = 0\n 18518: u8 [a0 + 18] = 0\n 18521: u8 [a0 + 17] = 0\n 18524: u8 [a0 + 16] = 0\n 18527: u8 [a0 + 15] = 0\n 18530: u8 [a0 + 14] = 0\n 18533: u8 [a0 + 13] = 0\n 18536: u8 [a0 + 12] = 0\n 18539: u8 [a0 + 11] = 0\n 18542: u8 [a0 + 10] = 0\n 18545: u8 [a0 + 9] = 0\n 18548: u8 [a0 + 8] = 0\n 18551: u8 [a0 + 7] = 0\n 18554: u8 [a0 + 6] = 0\n 18557: u8 [a0 + 5] = 0\n 18560: u8 [a0 + 4] = 0\n 18563: u8 [a0 + 3] = 0\n 18566: u8 [a0 + 2] = 0\n 18569: u8 [a0 + 1] = 0\n 18572: u8 [a0 + 0] = 0\n 18574: a1 = 0x40\n 18577: a0 = 0\n 18579: ra = 228, jump @0\n      : @282 [@dyn 114] (gas: 28)\n 18585: i32 a0 = a0 + 0\n 18587: i32 a2 = sp + 0x240\n 18591: a1 = 0x40\n 18594: ecalli 6 // 'hash_keccak_256'\n 18596: a0 = u64 [sp + 0x258]\n 18600: a1 = u64 [sp + 0x250]\n 18604: a2 = u64 [sp + 0x248]\n 18608: a3 = u64 [sp + 0x240]\n 18612: a0 = reverse a0\n 18614: a1 = reverse a1\n 18616: a2 = reverse a2\n 18618: a3 = reverse a3\n 18620: u64 [sp + 0x238] = a3\n 18624: u64 [sp + 0x230] = a2\n 18628: u64 [sp + 0x228] = a1\n 18632: u64 [sp + 0x220] = a0\n 18636: u64 [sp + 600] = 0\n 18640: u64 [sp + 592] = 0\n 18644: u64 [sp + 584] = 0\n 18648: u64 [sp + 576] = 0\n 18652: u32 [sp + 512] = 0x20\n 18657: i32 a1 = sp + 0x220\n 18661: i32 a3 = sp + 0x240\n 18665: i32 a4 = sp + 0x200\n 18669: a2 = 0xffffffffffffffff\n 18672: a0 = 0\n 18674: ecalli 5 // 'get_storage'\n 18676: fallthrough\n      : @283 (gas: 18)\n 18677: a0 = u8 [sp + 0x240]\n 18681: a2 = u64 [sp + 0xf8]\n 18685: a1 = a2 >> 0x38\n 18688: u64 [sp + 0x50] = a1\n 18691: a1 = a2 >> 0x30\n 18694: u64 [sp + 0x48] = a1\n 18697: a1 = a2 >> 0x28\n 18700: u64 [sp + 0x40] = a1\n 18703: a1 = a2 >> 0x20\n 18706: u64 [sp + 0x38] = a1\n 18709: a1 = a2 >> 0x18\n 18712: u64 [sp + 0x30] = a1\n 18715: a1 = a2 >> 0x10\n 18718: u64 [sp + 0x28] = a1\n 18721: a1 = a2 >> 0x8\n 18724: u64 [sp + 0x20] = a1\n 18727: u64 [sp + 0xc8] = s1\n 18731: jump @290 if a0 != 0\n      : @284 (gas: 16)\n 18735: u64 [sp + 568] = 0\n 18739: u64 [sp + 560] = 0\n 18743: u64 [sp + 552] = 0\n 18747: u64 [sp + 544] = 0x1\n 18752: u64 [sp + 600] = 0\n 18756: u64 [sp + 592] = 0\n 18760: u64 [sp + 584] = 0\n 18764: u64 [sp + 576] = 0\n 18768: u32 [sp + 512] = 0x20\n 18773: i32 a1 = sp + 0x220\n 18777: i32 a3 = sp + 0x240\n 18781: i32 a4 = sp + 0x200\n 18785: a2 = 0xffffffffffffffff\n 18788: a0 = 0\n 18790: ecalli 5 // 'get_storage'\n 18792: fallthrough\n      : @285 (gas: 2)\n 18793: s1 = u64 [sp + 0x240]\n 18797: jump @302 if s1 == 4294967295\n      : @286 (gas: 43)\n 18802: u64 [sp + 568] = 0\n 18806: u64 [sp + 560] = 0\n 18810: u64 [sp + 552] = 0\n 18814: u64 [sp + 544] = 0x1\n 18819: u64 [sp + 600] = 0\n 18823: u64 [sp + 592] = 0\n 18827: u64 [sp + 584] = 0\n 18831: u64 [sp + 576] = 0\n 18835: u32 [sp + 512] = 0x20\n 18840: i32 a1 = sp + 0x220\n 18844: i32 a3 = sp + 0x240\n 18848: i32 a4 = sp + 0x200\n 18852: a2 = 0xffffffffffffffff\n 18855: a0 = 0\n 18857: ecalli 5 // 'get_storage'\n 18859: a0 = u64 [sp + 0x258]\n 18863: a1 = u64 [sp + 0x248]\n 18867: a2 = u64 [sp + 0x250]\n 18871: s1 = s1 + 0x1\n 18874: a3 = s1 <u 0x1\n 18877: a1 = a1 + a3\n 18880: a3 = s1 | a1\n 18883: a3 = a3 <u 0x1\n 18886: a3 = a3 + a2\n 18889: a2 = a3 <u a2\n 18892: a0 = a0 + a2\n 18895: u64 [sp + 568] = 0\n 18899: u64 [sp + 560] = 0\n 18903: u64 [sp + 552] = 0\n 18907: u64 [sp + 544] = 0x1\n 18912: u64 [sp + 0x250] = a3\n 18916: u64 [sp + 0x248] = a1\n 18920: u64 [sp + 0x240] = s1\n 18924: u64 [sp + 0x258] = a0\n 18928: i32 a1 = sp + 0x220\n 18932: i32 a3 = sp + 0x240\n 18936: a2 = 0xffffffffffffffff\n 18939: a4 = 0x20\n 18942: a0 = 0\n 18944: ecalli 9 // 'set_storage'\n 18946: a1 = 0x20\n 18949: a0 = 0\n 18951: ra = 230, jump @0\n      : @287 [@dyn 115] (gas: 59)\n 18957: a1 = u64 [sp + 0xc0]\n 18961: u8 [a0 + 0x1f] = a1\n 18964: a1 = u64 [sp + 0xb8]\n 18968: u8 [a0 + 0x1e] = a1\n 18971: a1 = u64 [sp + 0xb0]\n 18975: u8 [a0 + 0x1d] = a1\n 18978: a1 = u64 [sp + 0xa8]\n 18982: u8 [a0 + 0x1c] = a1\n 18985: a1 = u64 [sp + 0xa0]\n 18989: u8 [a0 + 0x1b] = a1\n 18992: a1 = u64 [sp + 0x98]\n 18996: u8 [a0 + 0x1a] = a1\n 18999: a1 = u64 [sp + 0x90]\n 19003: u8 [a0 + 0x19] = a1\n 19006: a1 = u64 [sp + 0xc8]\n 19010: u8 [a0 + 0x18] = a1\n 19013: a1 = u64 [sp + 0x88]\n 19017: u8 [a0 + 0x17] = a1\n 19020: a1 = u64 [sp + 0x80]\n 19024: u8 [a0 + 0x16] = a1\n 19027: a1 = u64 [sp + 0x78]\n 19030: u8 [a0 + 0x15] = a1\n 19033: a1 = u64 [sp + 0x70]\n 19036: u8 [a0 + 0x14] = a1\n 19039: a1 = u64 [sp + 0x68]\n 19042: u8 [a0 + 0x13] = a1\n 19045: a1 = u64 [sp + 0x60]\n 19048: u8 [a0 + 0x12] = a1\n 19051: a1 = u64 [sp + 0x58]\n 19054: u8 [a0 + 0x11] = a1\n 19057: a1 = u64 [sp + 0xf0]\n 19061: u8 [a0 + 0x10] = a1\n 19064: a1 = u64 [sp + 0x50]\n 19067: u8 [a0 + 0xf] = a1\n 19070: a1 = u64 [sp + 0x48]\n 19073: u8 [a0 + 0xe] = a1\n 19076: a1 = u64 [sp + 0x40]\n 19079: u8 [a0 + 0xd] = a1\n 19082: a1 = u64 [sp + 0x38]\n 19085: u8 [a0 + 0xc] = a1\n 19088: a1 = u64 [sp + 0x30]\n 19091: u8 [a0 + 0xb] = a1\n 19094: a1 = u64 [sp + 0x28]\n 19097: u8 [a0 + 0xa] = a1\n 19100: a1 = u64 [sp + 0x20]\n 19103: u8 [a0 + 0x9] = a1\n 19106: a1 = u64 [sp + 0xf8]\n 19110: u8 [a0 + 0x8] = a1\n 19113: u8 [a0 + 7] = 0\n 19116: u8 [a0 + 6] = 0\n 19119: u8 [a0 + 5] = 0\n 19122: u8 [a0 + 4] = 0\n 19125: u8 [a0 + 3] = 0\n 19128: u8 [a0 + 2] = 0\n 19131: u8 [a0 + 1] = 0\n 19134: u8 [a0 + 0] = 0\n 19136: a0 = 0x20\n 19139: a1 = 0x20\n 19142: ra = 232, jump @0\n      : @288 [@dyn 116] (gas: 35)\n 19148: u8 [a0 + 31] = 0x2\n 19152: u8 [a0 + 30] = 0\n 19155: u8 [a0 + 29] = 0\n 19158: u8 [a0 + 28] = 0\n 19161: u8 [a0 + 27] = 0\n 19164: u8 [a0 + 26] = 0\n 19167: u8 [a0 + 25] = 0\n 19170: u8 [a0 + 24] = 0\n 19173: u8 [a0 + 23] = 0\n 19176: u8 [a0 + 22] = 0\n 19179: u8 [a0 + 21] = 0\n 19182: u8 [a0 + 20] = 0\n 19185: u8 [a0 + 19] = 0\n 19188: u8 [a0 + 18] = 0\n 19191: u8 [a0 + 17] = 0\n 19194: u8 [a0 + 16] = 0\n 19197: u8 [a0 + 15] = 0\n 19200: u8 [a0 + 14] = 0\n 19203: u8 [a0 + 13] = 0\n 19206: u8 [a0 + 12] = 0\n 19209: u8 [a0 + 11] = 0\n 19212: u8 [a0 + 10] = 0\n 19215: u8 [a0 + 9] = 0\n 19218: u8 [a0 + 8] = 0\n 19221: u8 [a0 + 7] = 0\n 19224: u8 [a0 + 6] = 0\n 19227: u8 [a0 + 5] = 0\n 19230: u8 [a0 + 4] = 0\n 19233: u8 [a0 + 3] = 0\n 19236: u8 [a0 + 2] = 0\n 19239: u8 [a0 + 1] = 0\n 19242: u8 [a0 + 0] = 0\n 19244: a1 = 0x40\n 19247: a0 = 0\n 19249: ra = 234, jump @0\n      : @289 [@dyn 117] (gas: 55)\n 19255: i32 a0 = a0 + 0\n 19257: i32 a2 = sp + 0x240\n 19261: a1 = 0x40\n 19264: ecalli 6 // 'hash_keccak_256'\n 19266: a0 = u64 [sp + 0x258]\n 19270: a1 = u64 [sp + 0x250]\n 19274: a2 = u64 [sp + 0x248]\n 19278: a3 = u64 [sp + 0x240]\n 19282: a0 = reverse a0\n 19284: u64 [sp + 0x18] = a0\n 19287: a1 = reverse a1\n 19289: u64 [sp + 0x10] = a1\n 19292: a2 = reverse a2\n 19294: u64 [sp + 0x8] = a2\n 19297: s1 = reverse a3\n 19299: u64 [sp + 0x238] = s1\n 19303: u64 [sp + 0x230] = a2\n 19307: u64 [sp + 0x228] = a1\n 19311: u64 [sp + 0x220] = a0\n 19315: u64 [sp + 600] = 0\n 19319: u64 [sp + 592] = 0\n 19323: u64 [sp + 584] = 0\n 19327: u64 [sp + 576] = 0\n 19331: u32 [sp + 512] = 0x20\n 19336: i32 a1 = sp + 0x220\n 19340: i32 a3 = sp + 0x240\n 19344: i32 a4 = sp + 0x200\n 19348: a2 = 0xffffffffffffffff\n 19351: a0 = 0\n 19353: ecalli 5 // 'get_storage'\n 19355: a0 = u64 [sp + 0x240]\n 19359: a1 = u64 [sp + 0x248]\n 19363: a2 = u64 [sp + 0x250]\n 19367: a3 = u64 [sp + 0x258]\n 19371: a0 = a0 & 0xffffffffffffff00\n 19375: a0 = a0 | 0x1\n 19378: u64 [sp + 0x238] = s1\n 19382: s1 = u64 [sp + 0xc8]\n 19386: a4 = u64 [sp + 0x8]\n 19389: u64 [sp + 0x230] = a4\n 19393: a4 = u64 [sp + 0x10]\n 19396: u64 [sp + 0x228] = a4\n 19400: a4 = u64 [sp + 0x18]\n 19403: u64 [sp + 0x220] = a4\n 19407: u64 [sp + 0x258] = a3\n 19411: u64 [sp + 0x250] = a2\n 19415: u64 [sp + 0x248] = a1\n 19419: u64 [sp + 0x240] = a0\n 19423: i32 a1 = sp + 0x220\n 19427: i32 a3 = sp + 0x240\n 19431: a2 = 0xffffffffffffffff\n 19434: a4 = 0x20\n 19437: a0 = 0\n 19439: ecalli 9 // 'set_storage'\n 19441: fallthrough\n      : @290 (gas: 3)\n 19442: a1 = 0x20\n 19445: a0 = 0\n 19447: ra = 236, jump @0\n      : @291 [@dyn 118] (gas: 58)\n 19453: a1 = u64 [sp + 0x50]\n 19456: u8 [a0 + 0xf] = a1\n 19459: a1 = u64 [sp + 0x48]\n 19462: u8 [a0 + 0xe] = a1\n 19465: a1 = u64 [sp + 0x40]\n 19468: u8 [a0 + 0xd] = a1\n 19471: a1 = u64 [sp + 0x38]\n 19474: u8 [a0 + 0xc] = a1\n 19477: a1 = u64 [sp + 0x30]\n 19480: u8 [a0 + 0xb] = a1\n 19483: a1 = u64 [sp + 0x28]\n 19486: u8 [a0 + 0xa] = a1\n 19489: a1 = u64 [sp + 0x20]\n 19492: u8 [a0 + 0x9] = a1\n 19495: a1 = u64 [sp + 0x88]\n 19499: u8 [a0 + 0x17] = a1\n 19502: a1 = u64 [sp + 0x80]\n 19506: u8 [a0 + 0x16] = a1\n 19509: a1 = u64 [sp + 0x78]\n 19512: u8 [a0 + 0x15] = a1\n 19515: a1 = u64 [sp + 0x70]\n 19518: u8 [a0 + 0x14] = a1\n 19521: a1 = u64 [sp + 0x68]\n 19524: u8 [a0 + 0x13] = a1\n 19527: a1 = u64 [sp + 0x60]\n 19530: u8 [a0 + 0x12] = a1\n 19533: a1 = u64 [sp + 0x58]\n 19536: u8 [a0 + 0x11] = a1\n 19539: a1 = u64 [sp + 0xc0]\n 19543: u8 [a0 + 0x1f] = a1\n 19546: a1 = u64 [sp + 0xb8]\n 19550: u8 [a0 + 0x1e] = a1\n 19553: a1 = u64 [sp + 0xb0]\n 19557: u8 [a0 + 0x1d] = a1\n 19560: a1 = u64 [sp + 0xa8]\n 19564: u8 [a0 + 0x1c] = a1\n 19567: a1 = u64 [sp + 0xa0]\n 19571: u8 [a0 + 0x1b] = a1\n 19574: a1 = u64 [sp + 0x98]\n 19578: u8 [a0 + 0x1a] = a1\n 19581: a1 = u64 [sp + 0x90]\n 19585: u8 [a0 + 0x19] = a1\n 19588: a1 = u64 [sp + 0xf0]\n 19592: u8 [a0 + 0x10] = a1\n 19595: a1 = u64 [sp + 0xf8]\n 19599: u8 [a0 + 0x8] = a1\n 19602: u8 [a0 + 7] = 0\n 19605: u8 [a0 + 6] = 0\n 19608: u8 [a0 + 5] = 0\n 19611: u8 [a0 + 4] = 0\n 19614: u8 [a0 + 3] = 0\n 19617: u8 [a0 + 2] = 0\n 19620: u8 [a0 + 1] = 0\n 19623: u8 [a0 + 0] = 0\n 19625: u8 [a0 + 0x18] = s1\n 19628: a0 = 0x20\n 19631: a1 = 0x20\n 19634: ra = 238, jump @0\n      : @292 [@dyn 119] (gas: 35)\n 19640: u8 [a0 + 31] = 0\n 19643: u8 [a0 + 30] = 0\n 19646: u8 [a0 + 29] = 0\n 19649: u8 [a0 + 28] = 0\n 19652: u8 [a0 + 27] = 0\n 19655: u8 [a0 + 26] = 0\n 19658: u8 [a0 + 25] = 0\n 19661: u8 [a0 + 24] = 0\n 19664: u8 [a0 + 23] = 0\n 19667: u8 [a0 + 22] = 0\n 19670: u8 [a0 + 21] = 0\n 19673: u8 [a0 + 20] = 0\n 19676: u8 [a0 + 19] = 0\n 19679: u8 [a0 + 18] = 0\n 19682: u8 [a0 + 17] = 0\n 19685: u8 [a0 + 16] = 0\n 19688: u8 [a0 + 15] = 0\n 19691: u8 [a0 + 14] = 0\n 19694: u8 [a0 + 13] = 0\n 19697: u8 [a0 + 12] = 0\n 19700: u8 [a0 + 11] = 0\n 19703: u8 [a0 + 10] = 0\n 19706: u8 [a0 + 9] = 0\n 19709: u8 [a0 + 8] = 0\n 19712: u8 [a0 + 7] = 0\n 19715: u8 [a0 + 6] = 0\n 19718: u8 [a0 + 5] = 0\n 19721: u8 [a0 + 4] = 0\n 19724: u8 [a0 + 3] = 0\n 19727: u8 [a0 + 2] = 0\n 19730: u8 [a0 + 1] = 0\n 19733: u8 [a0 + 0] = 0\n 19735: a1 = 0x40\n 19738: a0 = 0\n 19740: ra = 240, jump @0\n      : @293 [@dyn 120] (gas: 27)\n 19746: i32 a0 = a0 + 0\n 19748: i32 a2 = sp + 0x240\n 19752: a1 = 0x40\n 19755: ecalli 6 // 'hash_keccak_256'\n 19757: a0 = u64 [sp + 0x258]\n 19761: a1 = u64 [sp + 0x250]\n 19765: a2 = u64 [sp + 0x248]\n 19769: a3 = u64 [sp + 0x240]\n 19773: a4 = reverse a0\n 19775: a0 = reverse a1\n 19777: a1 = reverse a2\n 19779: a2 = reverse a3\n 19781: a3 = u64 [sp + 0xd0]\n 19785: u64 [sp + 0x1b8] = a3\n 19789: a3 = u64 [sp + 0xd8]\n 19793: u64 [sp + 0x1b0] = a3\n 19797: a3 = u64 [sp + 0xe0]\n 19801: u64 [sp + 0x1a8] = a3\n 19805: a3 = u64 [sp + 0xe8]\n 19809: u64 [sp + 0x1a0] = a3\n 19813: u64 [sp + 0x1d8] = a2\n 19817: u64 [sp + 0x1d0] = a1\n 19821: u64 [sp + 0x1c8] = a0\n 19825: a0 = sp + 0x1c0\n 19829: a1 = sp + 0x1a0\n 19833: u64 [sp + 0x1c0] = a4\n 19837: ra = 242, jump @241\n      : @294 [@dyn 121] (gas: 3)\n 19843: a0 = 0x40\n 19846: a1 = 0x20\n 19849: ra = 244, jump @0\n      : @295 [@dyn 122] (gas: 100)\n 19855: a1 = u8 [a0 + 0x11]\n 19858: a2 = u8 [a0 + 0x10]\n 19861: a3 = u8 [a0 + 0x12]\n 19864: a4 = u8 [a0 + 0x13]\n 19867: a1 = a1 << 0x8\n 19870: a1 = a1 | a2\n 19873: a3 = a3 << 0x10\n 19876: a4 = a4 << 0x18\n 19879: a3 = a3 | a4\n 19882: a1 = a1 | a3\n 19885: a2 = u8 [a0 + 0x15]\n 19888: a3 = u8 [a0 + 0x14]\n 19891: a4 = u8 [a0 + 0x16]\n 19894: a5 = u8 [a0 + 0x17]\n 19897: a2 = a2 << 0x8\n 19900: a2 = a2 | a3\n 19903: a4 = a4 << 0x10\n 19906: a5 = a5 << 0x18\n 19909: a4 = a4 | a5\n 19912: a2 = a2 | a4\n 19915: a2 = a2 << 0x20\n 19918: t0 = a2 | a1\n 19921: a2 = u8 [a0 + 0x1]\n 19924: a3 = u8 [a0]\n 19926: a4 = u8 [a0 + 0x2]\n 19929: a5 = u8 [a0 + 0x3]\n 19932: a2 = a2 << 0x8\n 19935: a2 = a2 | a3\n 19938: a4 = a4 << 0x10\n 19941: a5 = a5 << 0x18\n 19944: a4 = a4 | a5\n 19947: a2 = a2 | a4\n 19950: a3 = u8 [a0 + 0x5]\n 19953: a4 = u8 [a0 + 0x4]\n 19956: a5 = u8 [a0 + 0x6]\n 19959: s1 = u8 [a0 + 0x7]\n 19962: a3 = a3 << 0x8\n 19965: a3 = a3 | a4\n 19968: a5 = a5 << 0x10\n 19971: s1 = s1 << 0x18\n 19974: a5 = a5 | s1\n 19977: a3 = a3 | a5\n 19980: a3 = a3 << 0x20\n 19983: a2 = a2 | a3\n 19986: a3 = u8 [a0 + 0x19]\n 19989: a4 = u8 [a0 + 0x18]\n 19992: a5 = u8 [a0 + 0x1a]\n 19995: s1 = u8 [a0 + 0x1b]\n 19998: a3 = a3 << 0x8\n 20001: a3 = a3 | a4\n 20004: a5 = a5 << 0x10\n 20007: s1 = s1 << 0x18\n 20010: a5 = a5 | s1\n 20013: a3 = a3 | a5\n 20016: a4 = u8 [a0 + 0x1d]\n 20019: a5 = u8 [a0 + 0x1c]\n 20022: s1 = u8 [a0 + 0x1e]\n 20025: a1 = u8 [a0 + 0x1f]\n 20028: a4 = a4 << 0x8\n 20031: a4 = a4 | a5\n 20034: s1 = s1 << 0x10\n 20037: a1 = a1 << 0x18\n 20040: a1 = a1 | s1\n 20043: a1 = a1 | a4\n 20046: a1 = a1 << 0x20\n 20049: a3 = a3 | a1\n 20052: a1 = u8 [a0 + 0x9]\n 20055: a4 = u8 [a0 + 0x8]\n 20058: a5 = u8 [a0 + 0xa]\n 20061: s1 = u8 [a0 + 0xb]\n 20064: a1 = a1 << 0x8\n 20067: a1 = a1 | a4\n 20070: a5 = a5 << 0x10\n 20073: s1 = s1 << 0x18\n 20076: a5 = a5 | s1\n 20079: a1 = a1 | a5\n 20082: a4 = u8 [a0 + 0xd]\n 20085: a5 = u8 [a0 + 0xc]\n 20088: s1 = u8 [a0 + 0xe]\n 20091: a0 = u8 [a0 + 0xf]\n 20094: a4 = a4 << 0x8\n 20097: a4 = a4 | a5\n 20100: s1 = s1 << 0x10\n 20103: a0 = a0 << 0x18\n 20106: a0 = a0 | s1\n 20109: a0 = a0 | a4\n 20112: a0 = a0 << 0x20\n 20115: a0 = a0 | a1\n 20118: s1 = reverse a0\n 20120: a3 = reverse a3\n 20122: a4 = reverse a2\n 20124: a2 = reverse t0\n 20126: a0 = a2 | a4\n 20129: a1 = a3 | s1\n 20132: a1 = a1 | a0\n 20135: a1 = a1 >> 0x20\n 20138: a0 = a0 | s1\n 20141: a0 = a0 << 0x20\n 20144: a0 = a0 | a1\n 20147: jump @301 if a0 != 0\n      : @296 (gas: 19)\n 20151: a0 = a3 + 0x20\n 20154: u64 [sp + 0xa0] = a0\n 20158: a0 = a0 <u a3\n 20161: a1 = a2 + a0\n 20164: u64 [sp + 0x90] = a1\n 20168: a1 = a1 <u a2\n 20171: a1 = a0 if a0 == 0\n 20174: a1 = a1 + s1\n 20177: u64 [sp + 0x98] = a1\n 20181: a0 = a1 <u s1\n 20184: a0 = a0 + a4\n 20187: u64 [sp + 0xa8] = a0\n 20191: i32 a0 = a3 + 0\n 20193: a1 = 0x20\n 20196: u64 [sp + 0x88] = a0\n 20200: u64 [sp + 0xb8] = a3\n 20204: u64 [sp + 0xb0] = a2\n 20208: u64 [sp + 0xc0] = a4\n 20212: ra = 246, jump @0\n      : @297 [@dyn 123] (gas: 52)\n 20218: u8 [a0 + 31] = 0x20\n 20222: u8 [a0 + 30] = 0\n 20225: u8 [a0 + 29] = 0\n 20228: u8 [a0 + 28] = 0\n 20231: u8 [a0 + 27] = 0\n 20234: u8 [a0 + 26] = 0\n 20237: u8 [a0 + 25] = 0\n 20240: u8 [a0 + 24] = 0\n 20243: u8 [a0 + 23] = 0\n 20246: u8 [a0 + 22] = 0\n 20249: u8 [a0 + 21] = 0\n 20252: u8 [a0 + 20] = 0\n 20255: u8 [a0 + 19] = 0\n 20258: u8 [a0 + 18] = 0\n 20261: u8 [a0 + 17] = 0\n 20264: u8 [a0 + 16] = 0\n 20267: u8 [a0 + 15] = 0\n 20270: u8 [a0 + 14] = 0\n 20273: u8 [a0 + 13] = 0\n 20276: u8 [a0 + 12] = 0\n 20279: u8 [a0 + 11] = 0\n 20282: u8 [a0 + 10] = 0\n 20285: u8 [a0 + 9] = 0\n 20288: u8 [a0 + 8] = 0\n 20291: u8 [a0 + 7] = 0\n 20294: u8 [a0 + 6] = 0\n 20297: u8 [a0 + 5] = 0\n 20300: u8 [a0 + 4] = 0\n 20303: u8 [a0 + 3] = 0\n 20306: u8 [a0 + 2] = 0\n 20309: u8 [a0 + 1] = 0\n 20312: u8 [a0 + 0] = 0\n 20314: a0 = u64 [sp + 0x90]\n 20318: u64 [sp + 0x148] = a0\n 20322: a0 = u64 [sp + 0xa0]\n 20326: u64 [sp + 0x140] = a0\n 20330: a0 = u64 [sp + 0xd0]\n 20334: u64 [sp + 0x178] = a0\n 20338: a0 = u64 [sp + 0xd8]\n 20342: u64 [sp + 0x170] = a0\n 20346: a0 = u64 [sp + 0xe0]\n 20350: u64 [sp + 0x168] = a0\n 20354: a0 = u64 [sp + 0xe8]\n 20358: u64 [sp + 0x160] = a0\n 20362: a0 = u64 [sp + 0x98]\n 20366: u64 [sp + 0x150] = a0\n 20370: a0 = sp + 0x180\n 20374: a1 = sp + 0x160\n 20378: a2 = sp + 0x140\n 20382: a3 = u64 [sp + 0xa8]\n 20386: u64 [sp + 0x158] = a3\n 20390: ra = 248, jump @59\n      : @298 [@dyn 124] (gas: 30)\n 20396: a0 = u64 [sp + 0x188]\n 20400: t0 = u64 [sp + 0x198]\n 20404: t1 = u64 [sp + 0x180]\n 20408: a3 = u64 [sp + 0x190]\n 20412: a1 = u64 [sp + 0xb0]\n 20416: a4 = a0 ^ a1\n 20419: a5 = a0 <u a1\n 20422: t2 = a1\n 20424: a2 = u64 [sp + 0xb8]\n 20428: a1 = t1 <u a2\n 20431: a5 = a1 if a4 == 0\n 20434: a4 = a3 - s1\n 20437: a3 = a3 <u s1\n 20440: s1 = u64 [sp + 0xc0]\n 20444: s1 = t0 - s1\n 20447: s1 = s1 - a3\n 20450: a3 = a4 <u a5\n 20453: a3 = s1 - a3\n 20456: a4 = a4 - a5\n 20459: a0 = a0 - t2\n 20462: a0 = a0 - a1\n 20465: s1 = t1 - a2\n 20468: a0 = a0 | a3\n 20471: a1 = s1 | a4\n 20474: a1 = a1 | a0\n 20477: a0 = a0 | a4\n 20480: a1 = a1 >> 0x20\n 20483: a0 = a0 << 0x20\n 20486: a0 = a0 | a1\n 20489: jump @301 if a0 != 0\n      : @299 (gas: 4)\n 20492: i32 s1 = s1 + 0\n 20494: a0 = u64 [sp + 0x88]\n 20498: a1 = s1\n 20500: ra = 250, jump @0\n      : @300 [@dyn 125] (gas: 26)\n 20506: a1 = u64 [0x20000]\n 20511: a2 = u64 [0x20008]\n 20516: a3 = u64 [0x20010]\n 20521: a4 = u64 [0x20018]\n 20526: u64 [sp + 0x258] = a1\n 20530: u64 [sp + 0x250] = a2\n 20534: u64 [sp + 0x248] = a3\n 20538: u64 [sp + 0x240] = a4\n 20542: a1 = u64 [sp + 0xf0]\n 20546: u64 [sp + 0x270] = a1\n 20550: a1 = u64 [sp + 0xf8]\n 20554: u64 [sp + 0x268] = a1\n 20558: u64 [sp + 608] = 0\n 20562: a1 = u64 [sp + 0xc8]\n 20566: u64 [sp + 0x278] = a1\n 20570: i32 a2 = a0 + 0\n 20572: i32 a0 = sp + 0x240\n 20576: a1 = 0x2\n 20579: a3 = s1\n 20581: ecalli 4 // 'deposit_event'\n 20583: sp = s0 + 0xfffffffffffffd60\n 20587: ra = u64 [sp + 0x298]\n 20591: s0 = u64 [sp + 0x290]\n 20595: s1 = u64 [sp + 0x288]\n 20599: sp = sp + 0x2a0\n 20603: ret\n      : @301 (gas: 1)\n 20605: trap\n      : @302 (gas: 8)\n 20606: u64 [sp + 304] = 0\n 20610: u64 [sp + 296] = 0\n 20614: u64 [sp + 288] = 0\n 20618: a0 = 0x4e487b7100000000\n 20628: a1 = sp + 0x120\n 20632: u64 [sp + 0x138] = a0\n 20636: a0 = 0\n 20638: ra = 252, jump @23\n      : @303 [@dyn 126] (gas: 7)\n 20644: u64 [sp + 280] = 0\n 20648: u64 [sp + 272] = 0\n 20652: u64 [sp + 256] = 0x11\n 20657: a0 = 0x4\n 20660: a1 = sp + 0x100\n 20664: u64 [sp + 264] = 0\n 20668: ra = 254, jump @23\n      : @304 [@dyn 127] (gas: 3)\n 20674: a1 = 0x24\n 20677: a0 = 0\n 20679: ra = 256, jump @0\n      : @305 [@dyn 128] (gas: 7)\n 20685: i32 a1 = a0 + 0\n 20687: a0 = 0x1\n 20690: a2 = 0x24\n 20693: ecalli 7 // 'seal_return'\n 20695: a0 = 0\n 20697: ra = 0x102\n 20701: jump @25\n      : @306 [export #0: 'call'] (gas: 2)\n 20704: a0 = 0\n 20706: ra = 258, jump @25\n      : @307 [@dyn 129] [export #1: 'deploy'] (gas: 2)\n 20712: a0 = 0x1\n 20715: ra = 260, jump @25\n      : @308 [@dyn 130] (gas: 27)\n 20721: sp = sp + 0xffffffffffffff80\n 20724: u64 [sp + 0x78] = ra\n 20727: u64 [sp + 0x70] = s0\n 20730: u64 [sp + 0x68] = s1\n 20733: s0 = sp + 0x80\n 20737: sp = sp & 0xfffffffffffffff0\n 20740: t0 = u64 [a1]\n 20742: t1 = u64 [a1 + 0x8]\n 20745: t2 = u64 [a1 + 0x10]\n 20748: a1 = u64 [a1 + 0x18]\n 20751: a3 = u64 [a2]\n 20753: a4 = u64 [a2 + 0x8]\n 20756: a5 = u64 [a2 + 0x10]\n 20759: a2 = u64 [a2 + 0x18]\n 20762: s1 = a0\n 20764: u64 [sp + 0x18] = a2\n 20767: u64 [sp + 0x10] = a5\n 20770: u64 [sp + 0x8] = a4\n 20773: u64 [sp] = a3\n 20775: u64 [sp + 0x38] = a1\n 20778: u64 [sp + 0x30] = t2\n 20781: u64 [sp + 0x28] = t1\n 20784: a0 = sp + 0x40\n 20787: a1 = sp + 0x20\n 20790: a2 = sp\n 20792: u64 [sp + 0x20] = t0\n 20795: ra = 262, jump @93\n      : @309 [@dyn 131] (gas: 14)\n 20801: a0 = u64 [sp + 0x50]\n 20804: a1 = u64 [sp + 0x58]\n 20807: a2 = u64 [sp + 0x40]\n 20810: a3 = u64 [sp + 0x48]\n 20813: u64 [s1 + 0x10] = a0\n 20816: u64 [s1 + 0x18] = a1\n 20819: u64 [s1] = a2\n 20821: u64 [s1 + 0x8] = a3\n 20824: sp = s0 + 0xffffffffffffff80\n 20827: ra = u64 [sp + 0x78]\n 20830: s0 = u64 [sp + 0x70]\n 20833: s1 = u64 [sp + 0x68]\n 20836: sp = sp + 0x80\n 20840: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"getMessage(address)": "55448fe1",
							"getSignerCount()": "b715be81",
							"messages(address)": "5fdd59f8",
							"signIn(string)": "c95f728a",
							"signerCount()": "7ca548c6"
						}
					},
					"irOptimized": "/// @use-src 0:\"contracts/SimpleSigner.sol\"\nobject \"SimpleSigner_77\" {\n    code {\n        {\n            /// @src 0:91:1313  \"contract SimpleSigner {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"SimpleSigner_77_deployed\"), datasize(\"SimpleSigner_77_deployed\"))\n            return(_1, datasize(\"SimpleSigner_77_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"contracts/SimpleSigner.sol\"\n    object \"SimpleSigner_77_deployed\" {\n        code {\n            {\n                /// @src 0:91:1313  \"contract SimpleSigner {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x55448fe1 { external_fun_getMessage() }\n                    case 0x5fdd59f8 { external_fun_messages() }\n                    case 0x7ca548c6 { external_fun_signerCount() }\n                    case 0xb715be81 { external_fun_getSignerCount() }\n                    case 0xc95f728a { external_fun_signIn() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_memory_ptr(value0, tail)\n            }\n            function external_fun_getMessage()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := fun_getMessage(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function mapping_index_access_mapping_address_string_storage_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function read_from_storage_dynamic_split_string(slot, offset) -> value\n            {\n                if gt(offset, 0) { panic_error_0x00() }\n                value := copy_array_from_storage_to_memory_string(slot)\n            }\n            /// @ast-id 5 @src 0:164:206  \"mapping(address => string) public messages\"\n            function getter_fun_messages(key) -> ret_mpos\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_address_string_storage_of_address(slot, key)\n                ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n            }\n            /// @src 0:91:1313  \"contract SimpleSigner {...\"\n            function external_fun_messages()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                let ret := getter_fun_messages(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint64(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffff)\n            }\n            function extract_from_storage_value_dynamict_uint64(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint64(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint64(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint64(sload(slot), offset)\n            }\n            /// @ast-id 7 @src 0:240:265  \"uint64 public signerCount\"\n            function getter_fun_signerCount() -> ret\n            {\n                let slot := 1\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint64(slot, offset)\n            }\n            /// @src 0:91:1313  \"contract SimpleSigner {...\"\n            function cleanup_uint64(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffff)\n            }\n            function abi_encode_uint64(value, pos)\n            {\n                mstore(pos, cleanup_uint64(value))\n            }\n            function abi_encode_tuple_uint64(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint64(value0, add(headStart, 0))\n            }\n            function external_fun_signerCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_signerCount()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_uint64(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_getSignerCount()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_getSignerCount()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_uint64(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_string(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function abi_decode_string_memory_ptr(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_string(add(offset, 0x20), length, end)\n            }\n            function abi_decode_string(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0 := abi_decode_string_memory_ptr(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_signIn()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_string(4, calldatasize())\n                fun_signIn(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function zero_value_for_split_string() -> ret\n            { ret := 96 }\n            function convert_array_string_storage_to_string(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_string(value)\n            }\n            /// @ast-id 67 @src 0:939:1054  \"function getMessage(address account) public view returns (string memory) {...\"\n            function fun_getMessage(var_account) -> var_mpos\n            {\n                /// @src 0:997:1010  \"string memory\"\n                let zero_string_mpos := zero_value_for_split_string()\n                var_mpos := zero_string_mpos\n                /// @src 0:1030:1038  \"messages\"\n                let _2_slot := 0x00\n                let expr_62_slot := _2_slot\n                /// @src 0:1039:1046  \"account\"\n                let _1 := var_account\n                let expr := _1\n                /// @src 0:1030:1047  \"messages[account]\"\n                let _2 := mapping_index_access_mapping_address_string_storage_of_address(expr_62_slot, expr)\n                let _5_slot := _2\n                let expr_64_slot := _5_slot\n                /// @src 0:1023:1047  \"return messages[account]\"\n                var_mpos := convert_array_string_storage_to_string(expr_64_slot)\n                leave\n            }\n            /// @src 0:91:1313  \"contract SimpleSigner {...\"\n            function zero_value_for_split_uint64() -> ret\n            { ret := 0 }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_uint64(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint64(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint64(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint64(sload(slot))\n            }\n            /// @ast-id 76 @src 0:1219:1311  \"function getSignerCount() public view returns (uint64) {...\"\n            function fun_getSignerCount() -> var\n            {\n                /// @src 0:1266:1272  \"uint64\"\n                let zero_uint64 := zero_value_for_split_uint64()\n                var := zero_uint64\n                /// @src 0:1292:1303  \"signerCount\"\n                let _1 := read_from_storage_split_offset_uint64(0x01)\n                let expr := _1\n                /// @src 0:1285:1303  \"return signerCount\"\n                var := expr\n                leave\n            }\n            /// @src 0:91:1313  \"contract SimpleSigner {...\"\n            function mapping_index_access_mapping_address_bool_of_address(slot, key) -> dataSlot\n            {\n                mstore(0, convert_address_to_address(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function increment_uint64(value) -> ret\n            {\n                value := cleanup_uint64(value)\n                if eq(value, 0xffffffffffffffff) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 0xffffffffffffffff\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint64_to_uint64(value) -> converted\n            {\n                converted := cleanup_uint64(identity(cleanup_uint64(value)))\n            }\n            function prepare_store_uint64(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint64_to_uint64(slot, value)\n            {\n                let convertedValue := convert_uint64_to_uint64(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_uint64(convertedValue)))\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_string_to_string(slot, src)\n            {\n                let newLen := array_length_string(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_to_string(slot, value)\n            {\n                copy_byte_array_to_storage_from_string_to_string(slot, value)\n            }\n            /// @ast-id 54 @src 0:457:795  \"function signIn(string memory message) public {...\"\n            function fun_signIn(var_message_mpos)\n            {\n                /// @src 0:530:540  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:513:540  \"address caller = msg.sender\"\n                let var_caller := expr\n                /// @src 0:612:621  \"hasSigned\"\n                let _8_slot := 0x02\n                let expr_27_slot := _8_slot\n                /// @src 0:622:628  \"caller\"\n                let _1 := var_caller\n                let expr_1 := _1\n                /// @src 0:612:629  \"hasSigned[caller]\"\n                let _2 := mapping_index_access_mapping_address_bool_of_address(expr_27_slot, expr_1)\n                let _3 := read_from_storage_split_offset_bool(_2)\n                let expr_2 := _3\n                /// @src 0:611:629  \"!hasSigned[caller]\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 0:607:707  \"if (!hasSigned[caller]) {...\"\n                if expr_3\n                {\n                    /// @src 0:645:658  \"signerCount++\"\n                    let _4 := read_from_storage_split_offset_uint64(0x01)\n                    let _5 := increment_uint64(_4)\n                    update_storage_value_offset_uint64_to_uint64(0x01, _5)\n                    /// @src 0:692:696  \"true\"\n                    let expr_4 := 0x01\n                    /// @src 0:672:681  \"hasSigned\"\n                    let _slot := 0x02\n                    let expr_slot := _slot\n                    /// @src 0:682:688  \"caller\"\n                    let _6 := var_caller\n                    let expr_5 := _6\n                    /// @src 0:672:689  \"hasSigned[caller]\"\n                    let _7 := mapping_index_access_mapping_address_bool_of_address(expr_slot, expr_5)\n                    /// @src 0:672:696  \"hasSigned[caller] = true\"\n                    update_storage_value_offset_bool_to_bool(_7, expr_4)\n                }\n                /// @src 0:736:743  \"message\"\n                let _mpos := var_message_mpos\n                let expr_45_mpos := _mpos\n                /// @src 0:717:725  \"messages\"\n                let _18_slot := 0x00\n                let expr_42_slot := _18_slot\n                /// @src 0:726:732  \"caller\"\n                let _8 := var_caller\n                let expr_6 := _8\n                /// @src 0:717:733  \"messages[caller]\"\n                let _9 := mapping_index_access_mapping_address_string_storage_of_address(expr_42_slot, expr_6)\n                /// @src 0:717:743  \"messages[caller] = message\"\n                update_storage_value_offset_string_to_string(_9, expr_45_mpos)\n                /// @src 0:772:778  \"caller\"\n                let _10 := var_caller\n                let expr_7 := _10\n                /// @src 0:780:787  \"message\"\n                let _23_mpos := var_message_mpos\n                let expr_mpos := _23_mpos\n                /// @src 0:759:788  \"UserSignedIn(caller, message)\"\n                let _11 := 0xd1727b5a553426cdc5c2750980361883f28bbcc7926acc3072f51724ebe7322c\n                let _12 := convert_address_to_address(expr_7)\n                let _13 := allocate_unbounded()\n                let _14 := abi_encode_string(_13, expr_mpos)\n                log2(_13, sub(_14, _13), _11, _12)\n            }\n        }\n        data \".metadata\" hex\"a264697066735822122051477fc004e2ccd89c80b471a5af7d8c870d0c52fc9c1258799cb051a3f685fc64736f6c634300081c0033\"\n    }\n}\n",
					"hash": "0b5dbc6c8748ca04f1f1713897ad47b539b8f50ee4e353bdf6fbda92116684ba",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"contracts/SimpleSigner.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "contracts/SimpleSigner.sol",
					"exportedSymbols": {
						"SimpleSigner": [
							77
						]
					},
					"id": 78,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SimpleSigner",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 77,
							"linearizedBaseContracts": [
								77
							],
							"name": "SimpleSigner",
							"nameLocation": "100:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "5fdd59f8",
									"id": 5,
									"mutability": "mutable",
									"name": "messages",
									"nameLocation": "198:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 77,
									"src": "164:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
										"typeString": "mapping(address => string)"
									},
									"typeName": {
										"id": 4,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 2,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "172:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "164:26:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
											"typeString": "mapping(address => string)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 3,
											"name": "string",
											"nodeType": "ElementaryTypeName",
											"src": "183:6:0",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "7ca548c6",
									"id": 7,
									"mutability": "mutable",
									"name": "signerCount",
									"nameLocation": "254:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 77,
									"src": "240:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint64",
										"typeString": "uint64"
									},
									"typeName": {
										"id": 6,
										"name": "uint64",
										"nodeType": "ElementaryTypeName",
										"src": "240:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint64",
											"typeString": "uint64"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 11,
									"mutability": "mutable",
									"name": "hasSigned",
									"nameLocation": "374:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 77,
									"src": "341:42:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 10,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 8,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "349:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "341:24:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 9,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "360:4:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "d1727b5a553426cdc5c2750980361883f28bbcc7926acc3072f51724ebe7322c",
									"id": 17,
									"name": "UserSignedIn",
									"nameLocation": "396:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"indexed": true,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "425:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "409:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "409:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"indexed": false,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "441:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 17,
												"src": "434:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 14,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "434:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "408:41:0"
									},
									"src": "390:60:0"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "503:292:0",
										"statements": [
											{
												"assignments": [
													23
												],
												"declarations": [
													{
														"constant": false,
														"id": 23,
														"mutability": "mutable",
														"name": "caller",
														"nameLocation": "521:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 53,
														"src": "513:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 22,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "513:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 26,
												"initialValue": {
													"expression": {
														"id": 24,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "530:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "534:6:0",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "530:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "513:27:0"
											},
											{
												"condition": {
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "611:18:0",
													"subExpression": {
														"baseExpression": {
															"id": 27,
															"name": "hasSigned",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "612:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 29,
														"indexExpression": {
															"id": 28,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 23,
															"src": "622:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "612:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 41,
												"nodeType": "IfStatement",
												"src": "607:100:0",
												"trueBody": {
													"id": 40,
													"nodeType": "Block",
													"src": "631:76:0",
													"statements": [
														{
															"expression": {
																"id": 32,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "++",
																"prefix": false,
																"src": "645:13:0",
																"subExpression": {
																	"id": 31,
																	"name": "signerCount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "645:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 33,
															"nodeType": "ExpressionStatement",
															"src": "645:13:0"
														},
														{
															"expression": {
																"id": 38,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 34,
																		"name": "hasSigned",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 11,
																		"src": "672:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 36,
																	"indexExpression": {
																		"id": 35,
																		"name": "caller",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 23,
																		"src": "682:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "672:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 37,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "692:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "672:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 39,
															"nodeType": "ExpressionStatement",
															"src": "672:24:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 42,
															"name": "messages",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 5,
															"src": "717:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
																"typeString": "mapping(address => string storage ref)"
															}
														},
														"id": 44,
														"indexExpression": {
															"id": 43,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 23,
															"src": "726:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "717:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 45,
														"name": "message",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 19,
														"src": "736:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "717:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "717:26:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 49,
															"name": "caller",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 23,
															"src": "772:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 50,
															"name": "message",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 19,
															"src": "780:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 48,
														"name": "UserSignedIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "759:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (address,string memory)"
														}
													},
													"id": 51,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "759:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 52,
												"nodeType": "EmitStatement",
												"src": "754:34:0"
											}
										]
									},
									"functionSelector": "c95f728a",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "signIn",
									"nameLocation": "466:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "487:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "473:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 18,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "473:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "472:23:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "503:0:0"
									},
									"scope": 77,
									"src": "457:338:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1012:42:0",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 62,
														"name": "messages",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 5,
														"src": "1030:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_string_storage_$",
															"typeString": "mapping(address => string storage ref)"
														}
													},
													"id": 64,
													"indexExpression": {
														"id": 63,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 57,
														"src": "1039:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "1030:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 61,
												"id": 65,
												"nodeType": "Return",
												"src": "1023:24:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "801:49:0",
										"text": "Get the message stored by a specific account."
									},
									"functionSelector": "55448fe1",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getMessage",
									"nameLocation": "948:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 58,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 57,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "967:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "959:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 56,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:17:0"
									},
									"returnParameters": {
										"id": 61,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "997:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 59,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "997:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "996:15:0"
									},
									"scope": 77,
									"src": "939:115:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "1274:37:0",
										"statements": [
											{
												"expression": {
													"id": 73,
													"name": "signerCount",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 7,
													"src": "1292:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 72,
												"id": 74,
												"nodeType": "Return",
												"src": "1285:18:0"
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1061:43:0",
										"text": "Get the total number of unique signers."
									},
									"functionSelector": "b715be81",
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSignerCount",
									"nameLocation": "1228:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1242:2:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "1266:6:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 70,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "1266:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:8:0"
									},
									"scope": 77,
									"src": "1219:92:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 78,
							"src": "91:1222:0",
							"usedErrors": [],
							"usedEvents": [
								17
							]
						}
					],
					"src": "32:1281:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}